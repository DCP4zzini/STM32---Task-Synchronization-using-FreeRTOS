
Task_Sincronization.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b768  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  0800b908  0800b908  0001b908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf24  0800bf24  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  0800bf24  0800bf24  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bf24  0800bf24  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf24  0800bf24  0001bf24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf28  0800bf28  0001bf28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800bf2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020200  2**0
                  CONTENTS
 10 .bss          00002600  20000200  20000200  00020200  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002800  20002800  00020200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dae0  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003898  00000000  00000000  0003dd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  000415a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f88  00000000  00000000  00042678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005389  00000000  00000000  00043600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000169b7  00000000  00000000  00048989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4d4f  00000000  00000000  0005f340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013408f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000557c  00000000  00000000  001340e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b8f0 	.word	0x0800b8f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	0800b8f0 	.word	0x0800b8f0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <getNewDataSemaphore>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*---------------------------- Getters and Setters ---------------------------*/
osSemaphoreId_t getNewDataSemaphore(void){
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
	return newDataAvailableSemaphoreHandle;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <getNewDataSemaphore+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	2000271c 	.word	0x2000271c

08000bd0 <releaseNewDataSemaphore>:
void releaseNewDataSemaphore(void){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	osSemaphoreRelease(newDataAvailableSemaphoreHandle);
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <releaseNewDataSemaphore+0x14>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f004 fced 	bl	80055b8 <osSemaphoreRelease>
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000271c 	.word	0x2000271c

08000be8 <getMymutexHandle>:
osMutexId_t getMymutexHandle(void){
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
	return MymutexHandle;
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <getMymutexHandle+0x14>)
 8000bee:	681b      	ldr	r3, [r3, #0]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20002714 	.word	0x20002714

08000c00 <releaseMymutexHandle>:
void releaseMymutexHandle(void){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	osMutexRelease(MymutexHandle);
 8000c04:	4b03      	ldr	r3, [pc, #12]	; (8000c14 <releaseMymutexHandle+0x14>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f004 fb83 	bl	8005314 <osMutexRelease>
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20002714 	.word	0x20002714

08000c18 <getmyQueueHandle>:
osMessageQueueId_t getmyQueueHandle(void){
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
	return myQueueHandle;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <getmyQueueHandle+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20002718 	.word	0x20002718

08000c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c34:	f000 fda4 	bl	8001780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c38:	f000 f86e 	bl	8000d18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c3c:	f000 f96e 	bl	8000f1c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c40:	f000 f93c 	bl	8000ebc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000c44:	f000 f8ca 	bl	8000ddc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4820      	ldr	r0, [pc, #128]	; (8000ccc <main+0x9c>)
 8000c4c:	f001 f91b 	bl	8001e86 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8000c50:	481e      	ldr	r0, [pc, #120]	; (8000ccc <main+0x9c>)
 8000c52:	f000 fff5 	bl	8001c40 <HAL_ADC_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c56:	f004 f925 	bl	8004ea4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Mymutex */
  MymutexHandle = osMutexNew(&Mymutex_attributes);
 8000c5a:	481d      	ldr	r0, [pc, #116]	; (8000cd0 <main+0xa0>)
 8000c5c:	f004 fa62 	bl	8005124 <osMutexNew>
 8000c60:	4603      	mov	r3, r0
 8000c62:	4a1c      	ldr	r2, [pc, #112]	; (8000cd4 <main+0xa4>)
 8000c64:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of newDataAvailableSemaphore */
  newDataAvailableSemaphoreHandle = osSemaphoreNew(1, 1, &newDataAvailableSemaphore_attributes);
 8000c66:	4a1c      	ldr	r2, [pc, #112]	; (8000cd8 <main+0xa8>)
 8000c68:	2101      	movs	r1, #1
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f004 fba2 	bl	80053b4 <osSemaphoreNew>
 8000c70:	4603      	mov	r3, r0
 8000c72:	4a1a      	ldr	r2, [pc, #104]	; (8000cdc <main+0xac>)
 8000c74:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue */
  myQueueHandle = osMessageQueueNew (10, sizeof(message_t), &myQueue_attributes);
 8000c76:	4a1a      	ldr	r2, [pc, #104]	; (8000ce0 <main+0xb0>)
 8000c78:	210c      	movs	r1, #12
 8000c7a:	200a      	movs	r0, #10
 8000c7c:	f004 fcf4 	bl	8005668 <osMessageQueueNew>
 8000c80:	4603      	mov	r3, r0
 8000c82:	4a18      	ldr	r2, [pc, #96]	; (8000ce4 <main+0xb4>)
 8000c84:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Mytask1 */
  Mytask1Handle = osThreadNew(StartMytask1, NULL, &Mytask1_attributes);
 8000c86:	4a18      	ldr	r2, [pc, #96]	; (8000ce8 <main+0xb8>)
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4818      	ldr	r0, [pc, #96]	; (8000cec <main+0xbc>)
 8000c8c:	f004 f972 	bl	8004f74 <osThreadNew>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4a17      	ldr	r2, [pc, #92]	; (8000cf0 <main+0xc0>)
 8000c94:	6013      	str	r3, [r2, #0]

  /* creation of Mytask2 */
  Mytask2Handle = osThreadNew(StartMytask2, NULL, &Mytask2_attributes);
 8000c96:	4a17      	ldr	r2, [pc, #92]	; (8000cf4 <main+0xc4>)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4817      	ldr	r0, [pc, #92]	; (8000cf8 <main+0xc8>)
 8000c9c:	f004 f96a 	bl	8004f74 <osThreadNew>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4a16      	ldr	r2, [pc, #88]	; (8000cfc <main+0xcc>)
 8000ca4:	6013      	str	r3, [r2, #0]

  /* creation of Mytask3 */
  Mytask3Handle = osThreadNew(StartMytask3, NULL, &Mytask3_attributes);
 8000ca6:	4a16      	ldr	r2, [pc, #88]	; (8000d00 <main+0xd0>)
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4816      	ldr	r0, [pc, #88]	; (8000d04 <main+0xd4>)
 8000cac:	f004 f962 	bl	8004f74 <osThreadNew>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	4a15      	ldr	r2, [pc, #84]	; (8000d08 <main+0xd8>)
 8000cb4:	6013      	str	r3, [r2, #0]

  /* creation of Mytask4 */
  Mytask4Handle = osThreadNew(StartMytask4, NULL, &Mytask4_attributes);
 8000cb6:	4a15      	ldr	r2, [pc, #84]	; (8000d0c <main+0xdc>)
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4815      	ldr	r0, [pc, #84]	; (8000d10 <main+0xe0>)
 8000cbc:	f004 f95a 	bl	8004f74 <osThreadNew>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4a14      	ldr	r2, [pc, #80]	; (8000d14 <main+0xe4>)
 8000cc4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000cc6:	f004 f921 	bl	8004f0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <main+0x9a>
 8000ccc:	200026c4 	.word	0x200026c4
 8000cd0:	0800baec 	.word	0x0800baec
 8000cd4:	20002714 	.word	0x20002714
 8000cd8:	0800bafc 	.word	0x0800bafc
 8000cdc:	2000271c 	.word	0x2000271c
 8000ce0:	0800bad4 	.word	0x0800bad4
 8000ce4:	20002718 	.word	0x20002718
 8000ce8:	0800ba44 	.word	0x0800ba44
 8000cec:	08001491 	.word	0x08001491
 8000cf0:	200026b8 	.word	0x200026b8
 8000cf4:	0800ba68 	.word	0x0800ba68
 8000cf8:	08001021 	.word	0x08001021
 8000cfc:	200026c0 	.word	0x200026c0
 8000d00:	0800ba8c 	.word	0x0800ba8c
 8000d04:	0800159d 	.word	0x0800159d
 8000d08:	200026bc 	.word	0x200026bc
 8000d0c:	0800bab0 	.word	0x0800bab0
 8000d10:	08001661 	.word	0x08001661
 8000d14:	200027a8 	.word	0x200027a8

08000d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b0a6      	sub	sp, #152	; 0x98
 8000d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d22:	2228      	movs	r2, #40	; 0x28
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f007 ff40 	bl	8008bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2258      	movs	r2, #88	; 0x58
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f007 ff32 	bl	8008bac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d50:	2310      	movs	r3, #16
 8000d52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d56:	2302      	movs	r3, #2
 8000d58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d64:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d72:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d76:	4618      	mov	r0, r3
 8000d78:	f002 f878 	bl	8002e6c <HAL_RCC_OscConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d82:	f000 f9d5 	bl	8001130 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d86:	230f      	movs	r3, #15
 8000d88:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d96:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d9c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000da0:	2102      	movs	r1, #2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 ff78 	bl	8003c98 <HAL_RCC_ClockConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000dae:	f000 f9bf 	bl	8001130 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8000db2:	2382      	movs	r3, #130	; 0x82
 8000db4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000dba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f003 f988 	bl	80040d8 <HAL_RCCEx_PeriphCLKConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000dce:	f000 f9af 	bl	8001130 <Error_Handler>
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	3798      	adds	r7, #152	; 0x98
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
 8000dfc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dfe:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <MX_ADC1_Init+0xdc>)
 8000e00:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e04:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e06:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <MX_ADC1_Init+0xdc>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e0c:	4b2a      	ldr	r3, [pc, #168]	; (8000eb8 <MX_ADC1_Init+0xdc>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e12:	4b29      	ldr	r3, [pc, #164]	; (8000eb8 <MX_ADC1_Init+0xdc>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e18:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <MX_ADC1_Init+0xdc>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e1e:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <MX_ADC1_Init+0xdc>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e26:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <MX_ADC1_Init+0xdc>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e2c:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <MX_ADC1_Init+0xdc>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <MX_ADC1_Init+0xdc>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e38:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <MX_ADC1_Init+0xdc>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <MX_ADC1_Init+0xdc>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e46:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <MX_ADC1_Init+0xdc>)
 8000e48:	2204      	movs	r2, #4
 8000e4a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <MX_ADC1_Init+0xdc>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e52:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <MX_ADC1_Init+0xdc>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e58:	4817      	ldr	r0, [pc, #92]	; (8000eb8 <MX_ADC1_Init+0xdc>)
 8000e5a:	f000 fcf7 	bl	800184c <HAL_ADC_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000e64:	f000 f964 	bl	8001130 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	4619      	mov	r1, r3
 8000e72:	4811      	ldr	r0, [pc, #68]	; (8000eb8 <MX_ADC1_Init+0xdc>)
 8000e74:	f001 fb66 	bl	8002544 <HAL_ADCEx_MultiModeConfigChannel>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000e7e:	f000 f957 	bl	8001130 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e82:	2301      	movs	r3, #1
 8000e84:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e86:	2301      	movs	r3, #1
 8000e88:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <MX_ADC1_Init+0xdc>)
 8000ea0:	f001 f864 	bl	8001f6c <HAL_ADC_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000eaa:	f000 f941 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	3728      	adds	r7, #40	; 0x28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200026c4 	.word	0x200026c4

08000ebc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_USART2_UART_Init+0x58>)
 8000ec2:	4a15      	ldr	r2, [pc, #84]	; (8000f18 <MX_USART2_UART_Init+0x5c>)
 8000ec4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <MX_USART2_UART_Init+0x58>)
 8000ec8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000ecc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_USART2_UART_Init+0x58>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <MX_USART2_UART_Init+0x58>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <MX_USART2_UART_Init+0x58>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <MX_USART2_UART_Init+0x58>)
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <MX_USART2_UART_Init+0x58>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <MX_USART2_UART_Init+0x58>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <MX_USART2_UART_Init+0x58>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <MX_USART2_UART_Init+0x58>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_USART2_UART_Init+0x58>)
 8000f00:	f003 fb08 	bl	8004514 <HAL_UART_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f0a:	f000 f911 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20002720 	.word	0x20002720
 8000f18:	40004400 	.word	0x40004400

08000f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	4b2f      	ldr	r3, [pc, #188]	; (8000ff0 <MX_GPIO_Init+0xd4>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	4a2e      	ldr	r2, [pc, #184]	; (8000ff0 <MX_GPIO_Init+0xd4>)
 8000f38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f3c:	6153      	str	r3, [r2, #20]
 8000f3e:	4b2c      	ldr	r3, [pc, #176]	; (8000ff0 <MX_GPIO_Init+0xd4>)
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f4a:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <MX_GPIO_Init+0xd4>)
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	4a28      	ldr	r2, [pc, #160]	; (8000ff0 <MX_GPIO_Init+0xd4>)
 8000f50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f54:	6153      	str	r3, [r2, #20]
 8000f56:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <MX_GPIO_Init+0xd4>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <MX_GPIO_Init+0xd4>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	4a22      	ldr	r2, [pc, #136]	; (8000ff0 <MX_GPIO_Init+0xd4>)
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6c:	6153      	str	r3, [r2, #20]
 8000f6e:	4b20      	ldr	r3, [pc, #128]	; (8000ff0 <MX_GPIO_Init+0xd4>)
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <MX_GPIO_Init+0xd4>)
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ff0 <MX_GPIO_Init+0xd4>)
 8000f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f84:	6153      	str	r3, [r2, #20]
 8000f86:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <MX_GPIO_Init+0xd4>)
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2120      	movs	r1, #32
 8000f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9a:	f001 ff2b 	bl	8002df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fa4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480f      	ldr	r0, [pc, #60]	; (8000ff4 <MX_GPIO_Init+0xd8>)
 8000fb6:	f001 fd93 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fba:	2320      	movs	r3, #32
 8000fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd4:	f001 fd84 	bl	8002ae0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2105      	movs	r1, #5
 8000fdc:	2028      	movs	r0, #40	; 0x28
 8000fde:	f001 fd48 	bl	8002a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fe2:	2028      	movs	r0, #40	; 0x28
 8000fe4:	f001 fd61 	bl	8002aaa <HAL_NVIC_EnableIRQ>

}
 8000fe8:	bf00      	nop
 8000fea:	3728      	adds	r7, #40	; 0x28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	48000800 	.word	0x48000800

08000ff8 <isMessageForTask2>:

/* USER CODE BEGIN 4 */
bool isMessageForTask2(message_t msg){
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	return (msg.id.receiver & TASK2_ID);
 8001004:	897b      	ldrh	r3, [r7, #10]
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	2b00      	cmp	r3, #0
 800100c:	bf14      	ite	ne
 800100e:	2301      	movne	r3, #1
 8001010:	2300      	moveq	r3, #0
 8001012:	b2db      	uxtb	r3, r3
}
 8001014:	4618      	mov	r0, r3
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <StartMytask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMytask2 */
void StartMytask2(void *argument)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b09e      	sub	sp, #120	; 0x78
 8001024:	af02      	add	r7, sp, #8
 8001026:	6078      	str	r0, [r7, #4]
			.size = 0,
			.data_ptr = NULL,
	};


	uint8_t local_string [100] = " ";
 8001028:	2320      	movs	r3, #32
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	f107 0310 	add.w	r3, r7, #16
 8001030:	2260      	movs	r2, #96	; 0x60
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f007 fdb9 	bl	8008bac <memset>

  /* Infinite loop */
  for(;;)
  {

  	osMessageQueueGet(myQueueHandle, &received_message, NULL , osWaitForever);
 800103a:	4b38      	ldr	r3, [pc, #224]	; (800111c <StartMytask2+0xfc>)
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	2200      	movs	r2, #0
 8001044:	4936      	ldr	r1, [pc, #216]	; (8001120 <StartMytask2+0x100>)
 8001046:	f004 fc09 	bl	800585c <osMessageQueueGet>

		// Assuring I'm getting the information from the correct sender
		if(isMessageForTask2(received_message)) {
 800104a:	4b35      	ldr	r3, [pc, #212]	; (8001120 <StartMytask2+0x100>)
 800104c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001050:	f7ff ffd2 	bl	8000ff8 <isMessageForTask2>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d057      	beq.n	800110a <StartMytask2+0xea>

			switch(received_message.id.sender){
 800105a:	4b31      	ldr	r3, [pc, #196]	; (8001120 <StartMytask2+0x100>)
 800105c:	889b      	ldrh	r3, [r3, #4]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d002      	beq.n	8001068 <StartMytask2+0x48>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d026      	beq.n	80010b4 <StartMytask2+0x94>
					osMutexRelease(MymutexHandle);
					break;

				default:

					break;
 8001066:	e048      	b.n	80010fa <StartMytask2+0xda>
					osMutexAcquire(MymutexHandle, osWaitForever);
 8001068:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <StartMytask2+0x104>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	4618      	mov	r0, r3
 8001072:	f004 f8f1 	bl	8005258 <osMutexAcquire>
					snprintf((void *)local_string,sizeof(local_string), "%d - Sent from task %u - to task 2 \n\r", *((int *) received_message.data_ptr) , received_message.id.sender );
 8001076:	4b2a      	ldr	r3, [pc, #168]	; (8001120 <StartMytask2+0x100>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a28      	ldr	r2, [pc, #160]	; (8001120 <StartMytask2+0x100>)
 800107e:	8892      	ldrh	r2, [r2, #4]
 8001080:	f107 000c 	add.w	r0, r7, #12
 8001084:	9200      	str	r2, [sp, #0]
 8001086:	4a28      	ldr	r2, [pc, #160]	; (8001128 <StartMytask2+0x108>)
 8001088:	2164      	movs	r1, #100	; 0x64
 800108a:	f008 fa01 	bl	8009490 <sniprintf>
					HAL_UART_Transmit(&huart2, local_string, strlen((void *)local_string), 100);
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff f8a4 	bl	80001e0 <strlen>
 8001098:	4603      	mov	r3, r0
 800109a:	b29a      	uxth	r2, r3
 800109c:	f107 010c 	add.w	r1, r7, #12
 80010a0:	2364      	movs	r3, #100	; 0x64
 80010a2:	4822      	ldr	r0, [pc, #136]	; (800112c <StartMytask2+0x10c>)
 80010a4:	f003 fa84 	bl	80045b0 <HAL_UART_Transmit>
					osMutexRelease(MymutexHandle);
 80010a8:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <StartMytask2+0x104>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f004 f931 	bl	8005314 <osMutexRelease>
					break;
 80010b2:	e022      	b.n	80010fa <StartMytask2+0xda>
					osMutexAcquire(MymutexHandle, osWaitForever);
 80010b4:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <StartMytask2+0x104>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f04f 31ff 	mov.w	r1, #4294967295
 80010bc:	4618      	mov	r0, r3
 80010be:	f004 f8cb 	bl	8005258 <osMutexAcquire>
					memcpy(&local_string, received_message.data_ptr, received_message.size);
 80010c2:	4b17      	ldr	r3, [pc, #92]	; (8001120 <StartMytask2+0x100>)
 80010c4:	6899      	ldr	r1, [r3, #8]
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <StartMytask2+0x100>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	4618      	mov	r0, r3
 80010d0:	f007 fd5e 	bl	8008b90 <memcpy>
					HAL_UART_Transmit(&huart2, local_string, strlen((void *)local_string), 100);
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff f881 	bl	80001e0 <strlen>
 80010de:	4603      	mov	r3, r0
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	f107 010c 	add.w	r1, r7, #12
 80010e6:	2364      	movs	r3, #100	; 0x64
 80010e8:	4810      	ldr	r0, [pc, #64]	; (800112c <StartMytask2+0x10c>)
 80010ea:	f003 fa61 	bl	80045b0 <HAL_UART_Transmit>
					osMutexRelease(MymutexHandle);
 80010ee:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <StartMytask2+0x104>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f004 f90e 	bl	8005314 <osMutexRelease>
					break;
 80010f8:	bf00      	nop
			};

			memset(local_string , 0 , sizeof(local_string));
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	2264      	movs	r2, #100	; 0x64
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f007 fd52 	bl	8008bac <memset>
 8001108:	e797      	b.n	800103a <StartMytask2+0x1a>

		// Wrong destination, reintroduce the message into the queue
		} else {
			osMessageQueuePut(myQueueHandle, &received_message, 0, 0);
 800110a:	4b04      	ldr	r3, [pc, #16]	; (800111c <StartMytask2+0xfc>)
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	2300      	movs	r3, #0
 8001110:	2200      	movs	r2, #0
 8001112:	4903      	ldr	r1, [pc, #12]	; (8001120 <StartMytask2+0x100>)
 8001114:	f004 fb2e 	bl	8005774 <osMessageQueuePut>
  	osMessageQueueGet(myQueueHandle, &received_message, NULL , osWaitForever);
 8001118:	e78f      	b.n	800103a <StartMytask2+0x1a>
 800111a:	bf00      	nop
 800111c:	20002718 	.word	0x20002718
 8001120:	2000021c 	.word	0x2000021c
 8001124:	20002714 	.word	0x20002714
 8001128:	0800b954 	.word	0x0800b954
 800112c:	20002720 	.word	0x20002720

08001130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001134:	b672      	cpsid	i
}
 8001136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001138:	e7fe      	b.n	8001138 <Error_Handler+0x8>
	...

0800113c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_MspInit+0x4c>)
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	4a10      	ldr	r2, [pc, #64]	; (8001188 <HAL_MspInit+0x4c>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6193      	str	r3, [r2, #24]
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <HAL_MspInit+0x4c>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <HAL_MspInit+0x4c>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <HAL_MspInit+0x4c>)
 8001160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001164:	61d3      	str	r3, [r2, #28]
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_MspInit+0x4c>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	210f      	movs	r1, #15
 8001176:	f06f 0001 	mvn.w	r0, #1
 800117a:	f001 fc7a 	bl	8002a72 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000

0800118c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011ac:	d124      	bne.n	80011f8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_ADC_MspInit+0x74>)
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	4a13      	ldr	r2, [pc, #76]	; (8001200 <HAL_ADC_MspInit+0x74>)
 80011b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b8:	6153      	str	r3, [r2, #20]
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HAL_ADC_MspInit+0x74>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_ADC_MspInit+0x74>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <HAL_ADC_MspInit+0x74>)
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d0:	6153      	str	r3, [r2, #20]
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HAL_ADC_MspInit+0x74>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011de:	2301      	movs	r3, #1
 80011e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e2:	2303      	movs	r3, #3
 80011e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f4:	f001 fc74 	bl	8002ae0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	; 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40021000 	.word	0x40021000

08001204 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a17      	ldr	r2, [pc, #92]	; (8001280 <HAL_UART_MspInit+0x7c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d128      	bne.n	8001278 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001226:	4b17      	ldr	r3, [pc, #92]	; (8001284 <HAL_UART_MspInit+0x80>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	4a16      	ldr	r2, [pc, #88]	; (8001284 <HAL_UART_MspInit+0x80>)
 800122c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001230:	61d3      	str	r3, [r2, #28]
 8001232:	4b14      	ldr	r3, [pc, #80]	; (8001284 <HAL_UART_MspInit+0x80>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <HAL_UART_MspInit+0x80>)
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	4a10      	ldr	r2, [pc, #64]	; (8001284 <HAL_UART_MspInit+0x80>)
 8001244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001248:	6153      	str	r3, [r2, #20]
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <HAL_UART_MspInit+0x80>)
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001256:	230c      	movs	r3, #12
 8001258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001266:	2307      	movs	r3, #7
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001274:	f001 fc34 	bl	8002ae0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001278:	bf00      	nop
 800127a:	3728      	adds	r7, #40	; 0x28
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40004400 	.word	0x40004400
 8001284:	40021000 	.word	0x40021000

08001288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800128c:	e7fe      	b.n	800128c <NMI_Handler+0x4>

0800128e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <HardFault_Handler+0x4>

08001294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <MemManage_Handler+0x4>

0800129a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <BusFault_Handler+0x4>

080012a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <UsageFault_Handler+0x4>

080012a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b8:	f000 faa8 	bl	800180c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80012bc:	f006 fb1c 	bl	80078f8 <xTaskGetSchedulerState>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d001      	beq.n	80012ca <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80012c6:	f007 f9cf 	bl	8008668 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}

080012ce <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80012d2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012d6:	f001 fda5 	bl	8002e24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  releaseNewDataSemaphore();
 80012da:	f7ff fc79 	bl	8000bd0 <releaseNewDataSemaphore>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
	return 1;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <_kill>:

int _kill(int pid, int sig)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012fc:	f007 fc1e 	bl	8008b3c <__errno>
 8001300:	4603      	mov	r3, r0
 8001302:	2216      	movs	r2, #22
 8001304:	601a      	str	r2, [r3, #0]
	return -1;
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <_exit>:

void _exit (int status)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800131a:	f04f 31ff 	mov.w	r1, #4294967295
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff ffe7 	bl	80012f2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001324:	e7fe      	b.n	8001324 <_exit+0x12>

08001326 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b086      	sub	sp, #24
 800132a:	af00      	add	r7, sp, #0
 800132c:	60f8      	str	r0, [r7, #12]
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	e00a      	b.n	800134e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001338:	f3af 8000 	nop.w
 800133c:	4601      	mov	r1, r0
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	1c5a      	adds	r2, r3, #1
 8001342:	60ba      	str	r2, [r7, #8]
 8001344:	b2ca      	uxtb	r2, r1
 8001346:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	3301      	adds	r3, #1
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	429a      	cmp	r2, r3
 8001354:	dbf0      	blt.n	8001338 <_read+0x12>
	}

return len;
 8001356:	687b      	ldr	r3, [r7, #4]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	e009      	b.n	8001386 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	1c5a      	adds	r2, r3, #1
 8001376:	60ba      	str	r2, [r7, #8]
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	3301      	adds	r3, #1
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	429a      	cmp	r2, r3
 800138c:	dbf1      	blt.n	8001372 <_write+0x12>
	}
	return len;
 800138e:	687b      	ldr	r3, [r7, #4]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <_close>:

int _close(int file)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	return -1;
 80013a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013c0:	605a      	str	r2, [r3, #4]
	return 0;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <_isatty>:

int _isatty(int file)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	return 1;
 80013d8:	2301      	movs	r3, #1
}
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b085      	sub	sp, #20
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
	return 0;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001408:	4a14      	ldr	r2, [pc, #80]	; (800145c <_sbrk+0x5c>)
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <_sbrk+0x60>)
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001414:	4b13      	ldr	r3, [pc, #76]	; (8001464 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <_sbrk+0x64>)
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <_sbrk+0x68>)
 8001420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	429a      	cmp	r2, r3
 800142e:	d207      	bcs.n	8001440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001430:	f007 fb84 	bl	8008b3c <__errno>
 8001434:	4603      	mov	r3, r0
 8001436:	220c      	movs	r2, #12
 8001438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
 800143e:	e009      	b.n	8001454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <_sbrk+0x64>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001446:	4b07      	ldr	r3, [pc, #28]	; (8001464 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <_sbrk+0x64>)
 8001450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001452:	68fb      	ldr	r3, [r7, #12]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20010000 	.word	0x20010000
 8001460:	00000400 	.word	0x00000400
 8001464:	20000228 	.word	0x20000228
 8001468:	20002800 	.word	0x20002800

0800146c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <SystemInit+0x20>)
 8001472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <SystemInit+0x20>)
 8001478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800147c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <StartMytask1>:
extern UART_HandleTypeDef huart2;

void pack_formatter (message_t * msg, void * data, queueID_e destine_task, uint32_t data_size);

void StartMytask1(void *argument)
{
 8001490:	b5b0      	push	{r4, r5, r7, lr}
 8001492:	b09c      	sub	sp, #112	; 0x70
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

	unsigned char txDataBuffer[100] = "Generic info from task1\n\r";
 8001498:	4b2e      	ldr	r3, [pc, #184]	; (8001554 <StartMytask1+0xc4>)
 800149a:	f107 040c 	add.w	r4, r7, #12
 800149e:	461d      	mov	r5, r3
 80014a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014a8:	c403      	stmia	r4!, {r0, r1}
 80014aa:	8022      	strh	r2, [r4, #0]
 80014ac:	f107 0326 	add.w	r3, r7, #38	; 0x26
 80014b0:	224a      	movs	r2, #74	; 0x4a
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f007 fb79 	bl	8008bac <memset>
	};

  for(;;){

		// Wait till the uart is available
		osMutexAcquire(getMymutexHandle(), osWaitForever);
 80014ba:	f7ff fb95 	bl	8000be8 <getMymutexHandle>
 80014be:	4603      	mov	r3, r0
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295
 80014c4:	4618      	mov	r0, r3
 80014c6:	f003 fec7 	bl	8005258 <osMutexAcquire>

		// send uart message to user terminal
		HAL_UART_Transmit(&huart2, txDataBuffer, strlen((void *)txDataBuffer), 100);
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7fe fe86 	bl	80001e0 <strlen>
 80014d4:	4603      	mov	r3, r0
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	f107 010c 	add.w	r1, r7, #12
 80014dc:	2364      	movs	r3, #100	; 0x64
 80014de:	481e      	ldr	r0, [pc, #120]	; (8001558 <StartMytask1+0xc8>)
 80014e0:	f003 f866 	bl	80045b0 <HAL_UART_Transmit>

  	// Release mutex after uart usage
		releaseMymutexHandle();
 80014e4:	f7ff fb8c 	bl	8000c00 <releaseMymutexHandle>

		// package formatted data and send it to task2
		pack_formatter (&msg_sender, &incrementer_var, TASK2_ID, sizeof(incrementer_var));
 80014e8:	2304      	movs	r3, #4
 80014ea:	2202      	movs	r2, #2
 80014ec:	491b      	ldr	r1, [pc, #108]	; (800155c <StartMytask1+0xcc>)
 80014ee:	481c      	ldr	r0, [pc, #112]	; (8001560 <StartMytask1+0xd0>)
 80014f0:	f000 f83a 	bl	8001568 <pack_formatter>
		incrementer_var =  (incrementer_var >= MAX_VALUE) ? MIN_VALUE : incrementer_var+1 ;
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <StartMytask1+0xcc>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b13      	cmp	r3, #19
 80014fa:	d803      	bhi.n	8001504 <StartMytask1+0x74>
 80014fc:	4b17      	ldr	r3, [pc, #92]	; (800155c <StartMytask1+0xcc>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	e000      	b.n	8001506 <StartMytask1+0x76>
 8001504:	2301      	movs	r3, #1
 8001506:	4a15      	ldr	r2, [pc, #84]	; (800155c <StartMytask1+0xcc>)
 8001508:	6013      	str	r3, [r2, #0]
		osMessageQueuePut(getmyQueueHandle(), &msg_sender, 0, 0);
 800150a:	f7ff fb85 	bl	8000c18 <getmyQueueHandle>
 800150e:	2300      	movs	r3, #0
 8001510:	2200      	movs	r2, #0
 8001512:	4913      	ldr	r1, [pc, #76]	; (8001560 <StartMytask1+0xd0>)
 8001514:	f004 f92e 	bl	8005774 <osMessageQueuePut>

		// package formatted data and send it to task4
		pack_formatter (&msg_sender, &decrementer_var, TASK4_ID, sizeof(decrementer_var));
 8001518:	2304      	movs	r3, #4
 800151a:	2204      	movs	r2, #4
 800151c:	4911      	ldr	r1, [pc, #68]	; (8001564 <StartMytask1+0xd4>)
 800151e:	4810      	ldr	r0, [pc, #64]	; (8001560 <StartMytask1+0xd0>)
 8001520:	f000 f822 	bl	8001568 <pack_formatter>
		decrementer_var =  (decrementer_var <= MIN_VALUE) ? MAX_VALUE : decrementer_var-1 ;
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <StartMytask1+0xd4>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d903      	bls.n	8001534 <StartMytask1+0xa4>
 800152c:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <StartMytask1+0xd4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	3b01      	subs	r3, #1
 8001532:	e000      	b.n	8001536 <StartMytask1+0xa6>
 8001534:	2314      	movs	r3, #20
 8001536:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <StartMytask1+0xd4>)
 8001538:	6013      	str	r3, [r2, #0]
		osMessageQueuePut(getmyQueueHandle(), &msg_sender, 0, 0);
 800153a:	f7ff fb6d 	bl	8000c18 <getmyQueueHandle>
 800153e:	2300      	movs	r3, #0
 8001540:	2200      	movs	r2, #0
 8001542:	4907      	ldr	r1, [pc, #28]	; (8001560 <StartMytask1+0xd0>)
 8001544:	f004 f916 	bl	8005774 <osMessageQueuePut>


		osDelay(2000);
 8001548:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800154c:	f003 fdbc 	bl	80050c8 <osDelay>
		osMutexAcquire(getMymutexHandle(), osWaitForever);
 8001550:	e7b3      	b.n	80014ba <StartMytask1+0x2a>
 8001552:	bf00      	nop
 8001554:	0800b97c 	.word	0x0800b97c
 8001558:	20002720 	.word	0x20002720
 800155c:	20000010 	.word	0x20000010
 8001560:	20000004 	.word	0x20000004
 8001564:	20000014 	.word	0x20000014

08001568 <pack_formatter>:

  }

}

void pack_formatter (message_t * msg, void * data, queueID_e destine_task, uint32_t data_size){
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	4613      	mov	r3, r2
 8001576:	80fb      	strh	r3, [r7, #6]

	msg->data_ptr = data;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	609a      	str	r2, [r3, #8]
	msg->id.sender = TASK1_ID;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2201      	movs	r2, #1
 8001582:	809a      	strh	r2, [r3, #4]
	msg->id.receiver = destine_task;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	88fa      	ldrh	r2, [r7, #6]
 8001588:	80da      	strh	r2, [r3, #6]
	msg->size = data_size;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	601a      	str	r2, [r3, #0]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <StartMytask3>:

extern UART_HandleTypeDef huart2;
extern ADC_HandleTypeDef hadc1;

void StartMytask3(void *argument)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af02      	add	r7, sp, #8
 80015a2:	6078      	str	r0, [r7, #4]

	uint8_t adc_buffered_value [10] = " ";
 80015a4:	2320      	movs	r3, #32
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	809a      	strh	r2, [r3, #4]
			.size = sizeof(" - From task3 to task2\n\r") - 1,
			.id.receiver = TASK2_ID,
			.id.sender = TASK3_ID,
			.data_ptr = " - From task3 to task2\n\r"
	};
	float adc_value = 0.0f;
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	61bb      	str	r3, [r7, #24]

  while(1){

  	// Regardless the task priority, it release the adc update just after the correct external interruption
  	osSemaphoreAcquire(getNewDataSemaphore(), osWaitForever);
 80015b8:	f7ff fafe 	bl	8000bb8 <getNewDataSemaphore>
 80015bc:	4603      	mov	r3, r0
 80015be:	f04f 31ff 	mov.w	r1, #4294967295
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 ff92 	bl	80054ec <osSemaphoreAcquire>

  	// Wait till the uart is available
  	osMutexAcquire(getMymutexHandle(), osWaitForever);
 80015c8:	f7ff fb0e 	bl	8000be8 <getMymutexHandle>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f04f 31ff 	mov.w	r1, #4294967295
 80015d2:	4618      	mov	r0, r3
 80015d4:	f003 fe40 	bl	8005258 <osMutexAcquire>

  	adc_value = HAL_ADC_GetValue(&hadc1);
 80015d8:	481d      	ldr	r0, [pc, #116]	; (8001650 <StartMytask3+0xb4>)
 80015da:	f000 fc47 	bl	8001e6c <HAL_ADC_GetValue>
 80015de:	ee07 0a90 	vmov	s15, r0
 80015e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015e6:	edc7 7a06 	vstr	s15, [r7, #24]
  	snprintf((void *)adc_buffered_value, sizeof(adc_buffered_value), "%.2f", adc_value);
 80015ea:	69b8      	ldr	r0, [r7, #24]
 80015ec:	f7fe ffb4 	bl	8000558 <__aeabi_f2d>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	f107 000c 	add.w	r0, r7, #12
 80015f8:	e9cd 2300 	strd	r2, r3, [sp]
 80015fc:	4a15      	ldr	r2, [pc, #84]	; (8001654 <StartMytask3+0xb8>)
 80015fe:	210a      	movs	r1, #10
 8001600:	f007 ff46 	bl	8009490 <sniprintf>
  	HAL_UART_Transmit(&huart2, (void *)&adc_buffered_value, strlen((void *)adc_buffered_value), 100);
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe fde9 	bl	80001e0 <strlen>
 800160e:	4603      	mov	r3, r0
 8001610:	b29a      	uxth	r2, r3
 8001612:	f107 010c 	add.w	r1, r7, #12
 8001616:	2364      	movs	r3, #100	; 0x64
 8001618:	480f      	ldr	r0, [pc, #60]	; (8001658 <StartMytask3+0xbc>)
 800161a:	f002 ffc9 	bl	80045b0 <HAL_UART_Transmit>

  	// Release mutex after uart usage
  	releaseMymutexHandle();
 800161e:	f7ff faef 	bl	8000c00 <releaseMymutexHandle>

  	// Redundancy to avoid a failure during a packet sent
  	for (uint32_t try_again = 0; try_again < 3 ; try_again++){
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
 8001626:	e00c      	b.n	8001642 <StartMytask3+0xa6>
			if (osMessageQueuePut(getmyQueueHandle(), &msg_sender, 0, 0) == osOK){
 8001628:	f7ff faf6 	bl	8000c18 <getmyQueueHandle>
 800162c:	2300      	movs	r3, #0
 800162e:	2200      	movs	r2, #0
 8001630:	490a      	ldr	r1, [pc, #40]	; (800165c <StartMytask3+0xc0>)
 8001632:	f004 f89f 	bl	8005774 <osMessageQueuePut>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d006      	beq.n	800164a <StartMytask3+0xae>
  	for (uint32_t try_again = 0; try_again < 3 ; try_again++){
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	3301      	adds	r3, #1
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	2b02      	cmp	r3, #2
 8001646:	d9ef      	bls.n	8001628 <StartMytask3+0x8c>
 8001648:	e7b6      	b.n	80015b8 <StartMytask3+0x1c>
				break;
 800164a:	bf00      	nop
  	osSemaphoreAcquire(getNewDataSemaphore(), osWaitForever);
 800164c:	e7b4      	b.n	80015b8 <StartMytask3+0x1c>
 800164e:	bf00      	nop
 8001650:	200026c4 	.word	0x200026c4
 8001654:	0800b9e0 	.word	0x0800b9e0
 8001658:	20002720 	.word	0x20002720
 800165c:	20000018 	.word	0x20000018

08001660 <StartMytask4>:
bool isMessageForTask4(message_t msg);

extern UART_HandleTypeDef huart2;

void StartMytask4(void *argument)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b09e      	sub	sp, #120	; 0x78
 8001664:	af02      	add	r7, sp, #8
 8001666:	6078      	str	r0, [r7, #4]
			.id = {0},
			.size = 0,
			.data_ptr = NULL,
	};

	uint8_t local_string [100] = " ";
 8001668:	2320      	movs	r3, #32
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	2260      	movs	r2, #96	; 0x60
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f007 fa99 	bl	8008bac <memset>

  for(;;)
  {

  	osMessageQueueGet(getmyQueueHandle(), &received_message, NULL , osWaitForever);
 800167a:	f7ff facd 	bl	8000c18 <getmyQueueHandle>
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
 8001682:	2200      	movs	r2, #0
 8001684:	491c      	ldr	r1, [pc, #112]	; (80016f8 <StartMytask4+0x98>)
 8001686:	f004 f8e9 	bl	800585c <osMessageQueueGet>

		// Assuring I'm getting the information from the correct sender
		if(isMessageForTask4(received_message)) {
 800168a:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <StartMytask4+0x98>)
 800168c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001690:	f000 f838 	bl	8001704 <isMessageForTask4>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d023      	beq.n	80016e2 <StartMytask4+0x82>

			// Wait till the uart access gets free
			osMutexAcquire(getMymutexHandle(), osWaitForever);
 800169a:	f7ff faa5 	bl	8000be8 <getMymutexHandle>
 800169e:	4603      	mov	r3, r0
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295
 80016a4:	4618      	mov	r0, r3
 80016a6:	f003 fdd7 	bl	8005258 <osMutexAcquire>

			snprintf((void *)local_string,sizeof(local_string), "%d - Sent from task %u - to task 4 \n\r", *((int *) received_message.data_ptr) , received_message.id.sender );
 80016aa:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <StartMytask4+0x98>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a11      	ldr	r2, [pc, #68]	; (80016f8 <StartMytask4+0x98>)
 80016b2:	8892      	ldrh	r2, [r2, #4]
 80016b4:	f107 000c 	add.w	r0, r7, #12
 80016b8:	9200      	str	r2, [sp, #0]
 80016ba:	4a10      	ldr	r2, [pc, #64]	; (80016fc <StartMytask4+0x9c>)
 80016bc:	2164      	movs	r1, #100	; 0x64
 80016be:	f007 fee7 	bl	8009490 <sniprintf>
			HAL_UART_Transmit(&huart2, local_string, strlen((void *)local_string), 100);
 80016c2:	f107 030c 	add.w	r3, r7, #12
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe fd8a 	bl	80001e0 <strlen>
 80016cc:	4603      	mov	r3, r0
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	f107 010c 	add.w	r1, r7, #12
 80016d4:	2364      	movs	r3, #100	; 0x64
 80016d6:	480a      	ldr	r0, [pc, #40]	; (8001700 <StartMytask4+0xa0>)
 80016d8:	f002 ff6a 	bl	80045b0 <HAL_UART_Transmit>

			releaseMymutexHandle();
 80016dc:	f7ff fa90 	bl	8000c00 <releaseMymutexHandle>
 80016e0:	e006      	b.n	80016f0 <StartMytask4+0x90>

		} else {

			osMessageQueuePut(getmyQueueHandle(), &received_message, 0, 0);
 80016e2:	f7ff fa99 	bl	8000c18 <getmyQueueHandle>
 80016e6:	2300      	movs	r3, #0
 80016e8:	2200      	movs	r2, #0
 80016ea:	4903      	ldr	r1, [pc, #12]	; (80016f8 <StartMytask4+0x98>)
 80016ec:	f004 f842 	bl	8005774 <osMessageQueuePut>

		}

    osDelay(1);
 80016f0:	2001      	movs	r0, #1
 80016f2:	f003 fce9 	bl	80050c8 <osDelay>
  	osMessageQueueGet(getmyQueueHandle(), &received_message, NULL , osWaitForever);
 80016f6:	e7c0      	b.n	800167a <StartMytask4+0x1a>
 80016f8:	2000022c 	.word	0x2000022c
 80016fc:	0800ba04 	.word	0x0800ba04
 8001700:	20002720 	.word	0x20002720

08001704 <isMessageForTask4>:
  }

}

bool isMessageForTask4(message_t msg){
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	return (msg.id.receiver & TASK4_ID);
 8001710:	897b      	ldrh	r3, [r7, #10]
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	2b00      	cmp	r3, #0
 8001718:	bf14      	ite	ne
 800171a:	2301      	movne	r3, #1
 800171c:	2300      	moveq	r3, #0
 800171e:	b2db      	uxtb	r3, r3
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800172c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001764 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001730:	f7ff fe9c 	bl	800146c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001734:	480c      	ldr	r0, [pc, #48]	; (8001768 <LoopForever+0x6>)
  ldr r1, =_edata
 8001736:	490d      	ldr	r1, [pc, #52]	; (800176c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001738:	4a0d      	ldr	r2, [pc, #52]	; (8001770 <LoopForever+0xe>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800173c:	e002      	b.n	8001744 <LoopCopyDataInit>

0800173e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001742:	3304      	adds	r3, #4

08001744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001748:	d3f9      	bcc.n	800173e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174a:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <LoopForever+0x12>)
  ldr r4, =_ebss
 800174c:	4c0a      	ldr	r4, [pc, #40]	; (8001778 <LoopForever+0x16>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001750:	e001      	b.n	8001756 <LoopFillZerobss>

08001752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001754:	3204      	adds	r2, #4

08001756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001758:	d3fb      	bcc.n	8001752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800175a:	f007 f9f5 	bl	8008b48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800175e:	f7ff fa67 	bl	8000c30 <main>

08001762 <LoopForever>:

LoopForever:
    b LoopForever
 8001762:	e7fe      	b.n	8001762 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001764:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800176c:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8001770:	0800bf2c 	.word	0x0800bf2c
  ldr r2, =_sbss
 8001774:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001778:	20002800 	.word	0x20002800

0800177c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800177c:	e7fe      	b.n	800177c <ADC1_2_IRQHandler>
	...

08001780 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <HAL_Init+0x28>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <HAL_Init+0x28>)
 800178a:	f043 0310 	orr.w	r3, r3, #16
 800178e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001790:	2003      	movs	r0, #3
 8001792:	f001 f963 	bl	8002a5c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001796:	200f      	movs	r0, #15
 8001798:	f000 f808 	bl	80017ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800179c:	f7ff fcce 	bl	800113c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40022000 	.word	0x40022000

080017ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_InitTick+0x54>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_InitTick+0x58>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	4619      	mov	r1, r3
 80017be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ca:	4618      	mov	r0, r3
 80017cc:	f001 f97b 	bl	8002ac6 <HAL_SYSTICK_Config>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00e      	b.n	80017f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b0f      	cmp	r3, #15
 80017de:	d80a      	bhi.n	80017f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e0:	2200      	movs	r2, #0
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f001 f943 	bl	8002a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017ec:	4a06      	ldr	r2, [pc, #24]	; (8001808 <HAL_InitTick+0x5c>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	e000      	b.n	80017f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000000 	.word	0x20000000
 8001804:	20000028 	.word	0x20000028
 8001808:	20000024 	.word	0x20000024

0800180c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_IncTick+0x20>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_IncTick+0x24>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4413      	add	r3, r2
 800181c:	4a04      	ldr	r2, [pc, #16]	; (8001830 <HAL_IncTick+0x24>)
 800181e:	6013      	str	r3, [r2, #0]
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000028 	.word	0x20000028
 8001830:	200027ac 	.word	0x200027ac

08001834 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return uwTick;  
 8001838:	4b03      	ldr	r3, [pc, #12]	; (8001848 <HAL_GetTick+0x14>)
 800183a:	681b      	ldr	r3, [r3, #0]
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	200027ac 	.word	0x200027ac

0800184c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b09a      	sub	sp, #104	; 0x68
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e1e3      	b.n	8001c34 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f003 0310 	and.w	r3, r3, #16
 800187a:	2b00      	cmp	r3, #0
 800187c:	d176      	bne.n	800196c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	2b00      	cmp	r3, #0
 8001884:	d152      	bne.n	800192c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff fc73 	bl	800118c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d13b      	bne.n	800192c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 ff9b 	bl	80027f0 <ADC_Disable>
 80018ba:	4603      	mov	r3, r0
 80018bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	f003 0310 	and.w	r3, r3, #16
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d12f      	bne.n	800192c <HAL_ADC_Init+0xe0>
 80018cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d12b      	bne.n	800192c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018dc:	f023 0302 	bic.w	r3, r3, #2
 80018e0:	f043 0202 	orr.w	r2, r3, #2
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018f6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001906:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001908:	4b92      	ldr	r3, [pc, #584]	; (8001b54 <HAL_ADC_Init+0x308>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a92      	ldr	r2, [pc, #584]	; (8001b58 <HAL_ADC_Init+0x30c>)
 800190e:	fba2 2303 	umull	r2, r3, r2, r3
 8001912:	0c9a      	lsrs	r2, r3, #18
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800191e:	e002      	b.n	8001926 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	3b01      	subs	r3, #1
 8001924:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f9      	bne.n	8001920 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d007      	beq.n	800194a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001948:	d110      	bne.n	800196c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f023 0312 	bic.w	r3, r3, #18
 8001952:	f043 0210 	orr.w	r2, r3, #16
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	f043 0201 	orr.w	r2, r3, #1
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	2b00      	cmp	r3, #0
 8001976:	f040 8150 	bne.w	8001c1a <HAL_ADC_Init+0x3ce>
 800197a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800197e:	2b00      	cmp	r3, #0
 8001980:	f040 814b 	bne.w	8001c1a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800198e:	2b00      	cmp	r3, #0
 8001990:	f040 8143 	bne.w	8001c1a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800199c:	f043 0202 	orr.w	r2, r3, #2
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019ac:	d004      	beq.n	80019b8 <HAL_ADC_Init+0x16c>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a6a      	ldr	r2, [pc, #424]	; (8001b5c <HAL_ADC_Init+0x310>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d101      	bne.n	80019bc <HAL_ADC_Init+0x170>
 80019b8:	4b69      	ldr	r3, [pc, #420]	; (8001b60 <HAL_ADC_Init+0x314>)
 80019ba:	e000      	b.n	80019be <HAL_ADC_Init+0x172>
 80019bc:	4b69      	ldr	r3, [pc, #420]	; (8001b64 <HAL_ADC_Init+0x318>)
 80019be:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019c8:	d102      	bne.n	80019d0 <HAL_ADC_Init+0x184>
 80019ca:	4b64      	ldr	r3, [pc, #400]	; (8001b5c <HAL_ADC_Init+0x310>)
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	e01a      	b.n	8001a06 <HAL_ADC_Init+0x1ba>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a61      	ldr	r2, [pc, #388]	; (8001b5c <HAL_ADC_Init+0x310>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d103      	bne.n	80019e2 <HAL_ADC_Init+0x196>
 80019da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	e011      	b.n	8001a06 <HAL_ADC_Init+0x1ba>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a60      	ldr	r2, [pc, #384]	; (8001b68 <HAL_ADC_Init+0x31c>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d102      	bne.n	80019f2 <HAL_ADC_Init+0x1a6>
 80019ec:	4b5f      	ldr	r3, [pc, #380]	; (8001b6c <HAL_ADC_Init+0x320>)
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	e009      	b.n	8001a06 <HAL_ADC_Init+0x1ba>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a5d      	ldr	r2, [pc, #372]	; (8001b6c <HAL_ADC_Init+0x320>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d102      	bne.n	8001a02 <HAL_ADC_Init+0x1b6>
 80019fc:	4b5a      	ldr	r3, [pc, #360]	; (8001b68 <HAL_ADC_Init+0x31c>)
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	e001      	b.n	8001a06 <HAL_ADC_Init+0x1ba>
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d108      	bne.n	8001a26 <HAL_ADC_Init+0x1da>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d101      	bne.n	8001a26 <HAL_ADC_Init+0x1da>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <HAL_ADC_Init+0x1dc>
 8001a26:	2300      	movs	r3, #0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d11c      	bne.n	8001a66 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a2c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d010      	beq.n	8001a54 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d107      	bne.n	8001a4e <HAL_ADC_Init+0x202>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_ADC_Init+0x202>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <HAL_ADC_Init+0x204>
 8001a4e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d108      	bne.n	8001a66 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001a54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	431a      	orrs	r2, r3
 8001a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a64:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	7e5b      	ldrb	r3, [r3, #25]
 8001a6a:	035b      	lsls	r3, r3, #13
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a70:	2a01      	cmp	r2, #1
 8001a72:	d002      	beq.n	8001a7a <HAL_ADC_Init+0x22e>
 8001a74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a78:	e000      	b.n	8001a7c <HAL_ADC_Init+0x230>
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d11b      	bne.n	8001ad2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	7e5b      	ldrb	r3, [r3, #25]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d109      	bne.n	8001ab6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	045a      	lsls	r2, r3, #17
 8001aaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001aac:	4313      	orrs	r3, r2
 8001aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab2:	663b      	str	r3, [r7, #96]	; 0x60
 8001ab4:	e00d      	b.n	8001ad2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001abe:	f043 0220 	orr.w	r2, r3, #32
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	f043 0201 	orr.w	r2, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d054      	beq.n	8001b84 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a22      	ldr	r2, [pc, #136]	; (8001b68 <HAL_ADC_Init+0x31c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d004      	beq.n	8001aee <HAL_ADC_Init+0x2a2>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a20      	ldr	r2, [pc, #128]	; (8001b6c <HAL_ADC_Init+0x320>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d140      	bne.n	8001b70 <HAL_ADC_Init+0x324>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af2:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001af6:	d02a      	beq.n	8001b4e <HAL_ADC_Init+0x302>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b00:	d022      	beq.n	8001b48 <HAL_ADC_Init+0x2fc>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001b0a:	d01a      	beq.n	8001b42 <HAL_ADC_Init+0x2f6>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b10:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001b14:	d012      	beq.n	8001b3c <HAL_ADC_Init+0x2f0>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1a:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001b1e:	d00a      	beq.n	8001b36 <HAL_ADC_Init+0x2ea>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b24:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001b28:	d002      	beq.n	8001b30 <HAL_ADC_Init+0x2e4>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	e023      	b.n	8001b78 <HAL_ADC_Init+0x32c>
 8001b30:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b34:	e020      	b.n	8001b78 <HAL_ADC_Init+0x32c>
 8001b36:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001b3a:	e01d      	b.n	8001b78 <HAL_ADC_Init+0x32c>
 8001b3c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001b40:	e01a      	b.n	8001b78 <HAL_ADC_Init+0x32c>
 8001b42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b46:	e017      	b.n	8001b78 <HAL_ADC_Init+0x32c>
 8001b48:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001b4c:	e014      	b.n	8001b78 <HAL_ADC_Init+0x32c>
 8001b4e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001b52:	e011      	b.n	8001b78 <HAL_ADC_Init+0x32c>
 8001b54:	20000000 	.word	0x20000000
 8001b58:	431bde83 	.word	0x431bde83
 8001b5c:	50000100 	.word	0x50000100
 8001b60:	50000300 	.word	0x50000300
 8001b64:	50000700 	.word	0x50000700
 8001b68:	50000400 	.word	0x50000400
 8001b6c:	50000500 	.word	0x50000500
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b80:	4313      	orrs	r3, r2
 8001b82:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d114      	bne.n	8001bbc <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ba0:	f023 0302 	bic.w	r3, r3, #2
 8001ba4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	7e1b      	ldrb	r3, [r3, #24]
 8001baa:	039a      	lsls	r2, r3, #14
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <HAL_ADC_Init+0x3f0>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001bcc:	430b      	orrs	r3, r1
 8001bce:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d10c      	bne.n	8001bf2 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f023 010f 	bic.w	r1, r3, #15
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	1e5a      	subs	r2, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	631a      	str	r2, [r3, #48]	; 0x30
 8001bf0:	e007      	b.n	8001c02 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 020f 	bic.w	r2, r2, #15
 8001c00:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	f023 0303 	bic.w	r3, r3, #3
 8001c10:	f043 0201 	orr.w	r2, r3, #1
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	641a      	str	r2, [r3, #64]	; 0x40
 8001c18:	e00a      	b.n	8001c30 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f023 0312 	bic.w	r3, r3, #18
 8001c22:	f043 0210 	orr.w	r2, r3, #16
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001c30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3768      	adds	r7, #104	; 0x68
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	fff0c007 	.word	0xfff0c007

08001c40 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 0304 	and.w	r3, r3, #4
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f040 80f9 	bne.w	8001e4e <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_ADC_Start+0x2a>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e0f4      	b.n	8001e54 <HAL_ADC_Start+0x214>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 fd58 	bl	8002728 <ADC_Enable>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f040 80e0 	bne.w	8001e44 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c8c:	f023 0301 	bic.w	r3, r3, #1
 8001c90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ca0:	d004      	beq.n	8001cac <HAL_ADC_Start+0x6c>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a6d      	ldr	r2, [pc, #436]	; (8001e5c <HAL_ADC_Start+0x21c>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d106      	bne.n	8001cba <HAL_ADC_Start+0x7a>
 8001cac:	4b6c      	ldr	r3, [pc, #432]	; (8001e60 <HAL_ADC_Start+0x220>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d010      	beq.n	8001cda <HAL_ADC_Start+0x9a>
 8001cb8:	e005      	b.n	8001cc6 <HAL_ADC_Start+0x86>
 8001cba:	4b6a      	ldr	r3, [pc, #424]	; (8001e64 <HAL_ADC_Start+0x224>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 031f 	and.w	r3, r3, #31
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d009      	beq.n	8001cda <HAL_ADC_Start+0x9a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cce:	d004      	beq.n	8001cda <HAL_ADC_Start+0x9a>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a64      	ldr	r2, [pc, #400]	; (8001e68 <HAL_ADC_Start+0x228>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d115      	bne.n	8001d06 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d036      	beq.n	8001d62 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cfc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001d04:	e02d      	b.n	8001d62 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d1a:	d004      	beq.n	8001d26 <HAL_ADC_Start+0xe6>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a4e      	ldr	r2, [pc, #312]	; (8001e5c <HAL_ADC_Start+0x21c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d10a      	bne.n	8001d3c <HAL_ADC_Start+0xfc>
 8001d26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	bf14      	ite	ne
 8001d34:	2301      	movne	r3, #1
 8001d36:	2300      	moveq	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	e008      	b.n	8001d4e <HAL_ADC_Start+0x10e>
 8001d3c:	4b4a      	ldr	r3, [pc, #296]	; (8001e68 <HAL_ADC_Start+0x228>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	bf14      	ite	ne
 8001d48:	2301      	movne	r3, #1
 8001d4a:	2300      	moveq	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d007      	beq.n	8001d62 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d5a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d6e:	d106      	bne.n	8001d7e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d74:	f023 0206 	bic.w	r2, r3, #6
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	645a      	str	r2, [r3, #68]	; 0x44
 8001d7c:	e002      	b.n	8001d84 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	221c      	movs	r2, #28
 8001d92:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d9c:	d004      	beq.n	8001da8 <HAL_ADC_Start+0x168>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a2e      	ldr	r2, [pc, #184]	; (8001e5c <HAL_ADC_Start+0x21c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d106      	bne.n	8001db6 <HAL_ADC_Start+0x176>
 8001da8:	4b2d      	ldr	r3, [pc, #180]	; (8001e60 <HAL_ADC_Start+0x220>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d03e      	beq.n	8001e32 <HAL_ADC_Start+0x1f2>
 8001db4:	e005      	b.n	8001dc2 <HAL_ADC_Start+0x182>
 8001db6:	4b2b      	ldr	r3, [pc, #172]	; (8001e64 <HAL_ADC_Start+0x224>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 031f 	and.w	r3, r3, #31
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d037      	beq.n	8001e32 <HAL_ADC_Start+0x1f2>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dca:	d004      	beq.n	8001dd6 <HAL_ADC_Start+0x196>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a22      	ldr	r2, [pc, #136]	; (8001e5c <HAL_ADC_Start+0x21c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d106      	bne.n	8001de4 <HAL_ADC_Start+0x1a4>
 8001dd6:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <HAL_ADC_Start+0x220>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	2b05      	cmp	r3, #5
 8001de0:	d027      	beq.n	8001e32 <HAL_ADC_Start+0x1f2>
 8001de2:	e005      	b.n	8001df0 <HAL_ADC_Start+0x1b0>
 8001de4:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <HAL_ADC_Start+0x224>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	2b05      	cmp	r3, #5
 8001dee:	d020      	beq.n	8001e32 <HAL_ADC_Start+0x1f2>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001df8:	d004      	beq.n	8001e04 <HAL_ADC_Start+0x1c4>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a17      	ldr	r2, [pc, #92]	; (8001e5c <HAL_ADC_Start+0x21c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d106      	bne.n	8001e12 <HAL_ADC_Start+0x1d2>
 8001e04:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <HAL_ADC_Start+0x220>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	2b09      	cmp	r3, #9
 8001e0e:	d010      	beq.n	8001e32 <HAL_ADC_Start+0x1f2>
 8001e10:	e005      	b.n	8001e1e <HAL_ADC_Start+0x1de>
 8001e12:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_ADC_Start+0x224>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 031f 	and.w	r3, r3, #31
 8001e1a:	2b09      	cmp	r3, #9
 8001e1c:	d009      	beq.n	8001e32 <HAL_ADC_Start+0x1f2>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e26:	d004      	beq.n	8001e32 <HAL_ADC_Start+0x1f2>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a0e      	ldr	r2, [pc, #56]	; (8001e68 <HAL_ADC_Start+0x228>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d10f      	bne.n	8001e52 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 0204 	orr.w	r2, r2, #4
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	e006      	b.n	8001e52 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001e4c:	e001      	b.n	8001e52 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	50000100 	.word	0x50000100
 8001e60:	50000300 	.word	0x50000300
 8001e64:	50000700 	.word	0x50000700
 8001e68:	50000400 	.word	0x50000400

08001e6c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b084      	sub	sp, #16
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_ADCEx_Calibration_Start+0x1c>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e05f      	b.n	8001f62 <HAL_ADCEx_Calibration_Start+0xdc>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 fca0 	bl	80027f0 <ADC_Disable>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d14e      	bne.n	8001f58 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001ece:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d107      	bne.n	8001ee6 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ee4:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ef4:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001ef6:	f7ff fc9d 	bl	8001834 <HAL_GetTick>
 8001efa:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001efc:	e01c      	b.n	8001f38 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001efe:	f7ff fc99 	bl	8001834 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b0a      	cmp	r3, #10
 8001f0a:	d915      	bls.n	8001f38 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f1a:	d10d      	bne.n	8001f38 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	f023 0312 	bic.w	r3, r3, #18
 8001f24:	f043 0210 	orr.w	r2, r3, #16
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e014      	b.n	8001f62 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f46:	d0da      	beq.n	8001efe <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f023 0303 	bic.w	r3, r3, #3
 8001f50:	f043 0201 	orr.w	r2, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b09b      	sub	sp, #108	; 0x6c
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x22>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e2cb      	b.n	8002526 <HAL_ADC_ConfigChannel+0x5ba>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f040 82af 	bne.w	8002504 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d81c      	bhi.n	8001fe8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	4413      	add	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	231f      	movs	r3, #31
 8001fc4:	4093      	lsls	r3, r2
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	4019      	ands	r1, r3
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	6818      	ldr	r0, [r3, #0]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	fa00 f203 	lsl.w	r2, r0, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	631a      	str	r2, [r3, #48]	; 0x30
 8001fe6:	e063      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b09      	cmp	r3, #9
 8001fee:	d81e      	bhi.n	800202e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	3b1e      	subs	r3, #30
 8002004:	221f      	movs	r2, #31
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	4019      	ands	r1, r3
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	4413      	add	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	3b1e      	subs	r3, #30
 8002020:	fa00 f203 	lsl.w	r2, r0, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	635a      	str	r2, [r3, #52]	; 0x34
 800202c:	e040      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b0e      	cmp	r3, #14
 8002034:	d81e      	bhi.n	8002074 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	3b3c      	subs	r3, #60	; 0x3c
 800204a:	221f      	movs	r2, #31
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	4019      	ands	r1, r3
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	4413      	add	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	3b3c      	subs	r3, #60	; 0x3c
 8002066:	fa00 f203 	lsl.w	r2, r0, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	639a      	str	r2, [r3, #56]	; 0x38
 8002072:	e01d      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	3b5a      	subs	r3, #90	; 0x5a
 8002088:	221f      	movs	r2, #31
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	4019      	ands	r1, r3
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	6818      	ldr	r0, [r3, #0]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	3b5a      	subs	r3, #90	; 0x5a
 80020a4:	fa00 f203 	lsl.w	r2, r0, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f040 80e5 	bne.w	800228a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b09      	cmp	r3, #9
 80020c6:	d91c      	bls.n	8002102 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6999      	ldr	r1, [r3, #24]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	3b1e      	subs	r3, #30
 80020da:	2207      	movs	r2, #7
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	4019      	ands	r1, r3
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	6898      	ldr	r0, [r3, #8]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	3b1e      	subs	r3, #30
 80020f4:	fa00 f203 	lsl.w	r2, r0, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	619a      	str	r2, [r3, #24]
 8002100:	e019      	b.n	8002136 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6959      	ldr	r1, [r3, #20]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4613      	mov	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4413      	add	r3, r2
 8002112:	2207      	movs	r2, #7
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	4019      	ands	r1, r3
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	6898      	ldr	r0, [r3, #8]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4613      	mov	r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4413      	add	r3, r2
 800212a:	fa00 f203 	lsl.w	r2, r0, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	08db      	lsrs	r3, r3, #3
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	3b01      	subs	r3, #1
 8002154:	2b03      	cmp	r3, #3
 8002156:	d84f      	bhi.n	80021f8 <HAL_ADC_ConfigChannel+0x28c>
 8002158:	a201      	add	r2, pc, #4	; (adr r2, 8002160 <HAL_ADC_ConfigChannel+0x1f4>)
 800215a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215e:	bf00      	nop
 8002160:	08002171 	.word	0x08002171
 8002164:	08002193 	.word	0x08002193
 8002168:	080021b5 	.word	0x080021b5
 800216c:	080021d7 	.word	0x080021d7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002176:	4b9f      	ldr	r3, [pc, #636]	; (80023f4 <HAL_ADC_ConfigChannel+0x488>)
 8002178:	4013      	ands	r3, r2
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	0691      	lsls	r1, r2, #26
 8002180:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002182:	430a      	orrs	r2, r1
 8002184:	431a      	orrs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800218e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002190:	e07e      	b.n	8002290 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002198:	4b96      	ldr	r3, [pc, #600]	; (80023f4 <HAL_ADC_ConfigChannel+0x488>)
 800219a:	4013      	ands	r3, r2
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	0691      	lsls	r1, r2, #26
 80021a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021a4:	430a      	orrs	r2, r1
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021b0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80021b2:	e06d      	b.n	8002290 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80021ba:	4b8e      	ldr	r3, [pc, #568]	; (80023f4 <HAL_ADC_ConfigChannel+0x488>)
 80021bc:	4013      	ands	r3, r2
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	0691      	lsls	r1, r2, #26
 80021c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021c6:	430a      	orrs	r2, r1
 80021c8:	431a      	orrs	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021d2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80021d4:	e05c      	b.n	8002290 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021dc:	4b85      	ldr	r3, [pc, #532]	; (80023f4 <HAL_ADC_ConfigChannel+0x488>)
 80021de:	4013      	ands	r3, r2
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	6812      	ldr	r2, [r2, #0]
 80021e4:	0691      	lsls	r1, r2, #26
 80021e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021e8:	430a      	orrs	r2, r1
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021f4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80021f6:	e04b      	b.n	8002290 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	069b      	lsls	r3, r3, #26
 8002208:	429a      	cmp	r2, r3
 800220a:	d107      	bne.n	800221c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800221a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002222:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	069b      	lsls	r3, r3, #26
 800222c:	429a      	cmp	r2, r3
 800222e:	d107      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800223e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002246:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	069b      	lsls	r3, r3, #26
 8002250:	429a      	cmp	r2, r3
 8002252:	d107      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002262:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800226a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	069b      	lsls	r3, r3, #26
 8002274:	429a      	cmp	r2, r3
 8002276:	d10a      	bne.n	800228e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002286:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002288:	e001      	b.n	800228e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800228a:	bf00      	nop
 800228c:	e000      	b.n	8002290 <HAL_ADC_ConfigChannel+0x324>
      break;
 800228e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d108      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x344>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x344>
 80022ac:	2301      	movs	r3, #1
 80022ae:	e000      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x346>
 80022b0:	2300      	movs	r3, #0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f040 8131 	bne.w	800251a <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d00f      	beq.n	80022e0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2201      	movs	r2, #1
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	400a      	ands	r2, r1
 80022da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80022de:	e049      	b.n	8002374 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2201      	movs	r2, #1
 80022ee:	409a      	lsls	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b09      	cmp	r3, #9
 8002300:	d91c      	bls.n	800233c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6999      	ldr	r1, [r3, #24]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4613      	mov	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4413      	add	r3, r2
 8002312:	3b1b      	subs	r3, #27
 8002314:	2207      	movs	r2, #7
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	4019      	ands	r1, r3
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	6898      	ldr	r0, [r3, #8]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	4613      	mov	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4413      	add	r3, r2
 800232c:	3b1b      	subs	r3, #27
 800232e:	fa00 f203 	lsl.w	r2, r0, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	619a      	str	r2, [r3, #24]
 800233a:	e01b      	b.n	8002374 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6959      	ldr	r1, [r3, #20]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	4613      	mov	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4413      	add	r3, r2
 800234e:	2207      	movs	r2, #7
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	4019      	ands	r1, r3
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	6898      	ldr	r0, [r3, #8]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	4613      	mov	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4413      	add	r3, r2
 8002368:	fa00 f203 	lsl.w	r2, r0, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800237c:	d004      	beq.n	8002388 <HAL_ADC_ConfigChannel+0x41c>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a1d      	ldr	r2, [pc, #116]	; (80023f8 <HAL_ADC_ConfigChannel+0x48c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d101      	bne.n	800238c <HAL_ADC_ConfigChannel+0x420>
 8002388:	4b1c      	ldr	r3, [pc, #112]	; (80023fc <HAL_ADC_ConfigChannel+0x490>)
 800238a:	e000      	b.n	800238e <HAL_ADC_ConfigChannel+0x422>
 800238c:	4b1c      	ldr	r3, [pc, #112]	; (8002400 <HAL_ADC_ConfigChannel+0x494>)
 800238e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b10      	cmp	r3, #16
 8002396:	d105      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d015      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80023a8:	2b11      	cmp	r3, #17
 80023aa:	d105      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80023ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00b      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80023bc:	2b12      	cmp	r3, #18
 80023be:	f040 80ac 	bne.w	800251a <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80023c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f040 80a5 	bne.w	800251a <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023d8:	d102      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x474>
 80023da:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <HAL_ADC_ConfigChannel+0x48c>)
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	e023      	b.n	8002428 <HAL_ADC_ConfigChannel+0x4bc>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a04      	ldr	r2, [pc, #16]	; (80023f8 <HAL_ADC_ConfigChannel+0x48c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d10c      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x498>
 80023ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	e01a      	b.n	8002428 <HAL_ADC_ConfigChannel+0x4bc>
 80023f2:	bf00      	nop
 80023f4:	83fff000 	.word	0x83fff000
 80023f8:	50000100 	.word	0x50000100
 80023fc:	50000300 	.word	0x50000300
 8002400:	50000700 	.word	0x50000700
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a4a      	ldr	r2, [pc, #296]	; (8002534 <HAL_ADC_ConfigChannel+0x5c8>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d102      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x4a8>
 800240e:	4b4a      	ldr	r3, [pc, #296]	; (8002538 <HAL_ADC_ConfigChannel+0x5cc>)
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	e009      	b.n	8002428 <HAL_ADC_ConfigChannel+0x4bc>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a47      	ldr	r2, [pc, #284]	; (8002538 <HAL_ADC_ConfigChannel+0x5cc>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d102      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x4b8>
 800241e:	4b45      	ldr	r3, [pc, #276]	; (8002534 <HAL_ADC_ConfigChannel+0x5c8>)
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	e001      	b.n	8002428 <HAL_ADC_ConfigChannel+0x4bc>
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b01      	cmp	r3, #1
 8002434:	d108      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x4dc>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x4dc>
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <HAL_ADC_ConfigChannel+0x4de>
 8002448:	2300      	movs	r3, #0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d150      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800244e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002450:	2b00      	cmp	r3, #0
 8002452:	d010      	beq.n	8002476 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b01      	cmp	r3, #1
 800245e:	d107      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x504>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x504>
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <HAL_ADC_ConfigChannel+0x506>
 8002470:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002472:	2b00      	cmp	r3, #0
 8002474:	d13c      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b10      	cmp	r3, #16
 800247c:	d11d      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x54e>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002486:	d118      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002490:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002492:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002494:	4b29      	ldr	r3, [pc, #164]	; (800253c <HAL_ADC_ConfigChannel+0x5d0>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a29      	ldr	r2, [pc, #164]	; (8002540 <HAL_ADC_ConfigChannel+0x5d4>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	0c9a      	lsrs	r2, r3, #18
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024aa:	e002      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f9      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024b8:	e02e      	b.n	8002518 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2b11      	cmp	r3, #17
 80024c0:	d10b      	bne.n	80024da <HAL_ADC_ConfigChannel+0x56e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024ca:	d106      	bne.n	80024da <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80024cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80024d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024d6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024d8:	e01e      	b.n	8002518 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b12      	cmp	r3, #18
 80024e0:	d11a      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80024e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ec:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024ee:	e013      	b.n	8002518 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	f043 0220 	orr.w	r2, r3, #32
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002502:	e00a      	b.n	800251a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	f043 0220 	orr.w	r2, r3, #32
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002516:	e000      	b.n	800251a <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002518:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002522:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002526:	4618      	mov	r0, r3
 8002528:	376c      	adds	r7, #108	; 0x6c
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	50000400 	.word	0x50000400
 8002538:	50000500 	.word	0x50000500
 800253c:	20000000 	.word	0x20000000
 8002540:	431bde83 	.word	0x431bde83

08002544 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002544:	b480      	push	{r7}
 8002546:	b099      	sub	sp, #100	; 0x64
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800255c:	d102      	bne.n	8002564 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800255e:	4b6d      	ldr	r3, [pc, #436]	; (8002714 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	e01a      	b.n	800259a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a6a      	ldr	r2, [pc, #424]	; (8002714 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d103      	bne.n	8002576 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800256e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	e011      	b.n	800259a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a67      	ldr	r2, [pc, #412]	; (8002718 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d102      	bne.n	8002586 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002580:	4b66      	ldr	r3, [pc, #408]	; (800271c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	e009      	b.n	800259a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a64      	ldr	r2, [pc, #400]	; (800271c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d102      	bne.n	8002596 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002590:	4b61      	ldr	r3, [pc, #388]	; (8002718 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	e001      	b.n	800259a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002596:	2300      	movs	r3, #0
 8002598:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0b0      	b.n	8002706 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e0a9      	b.n	8002706 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f040 808d 	bne.w	80026e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f040 8086 	bne.w	80026e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025e0:	d004      	beq.n	80025ec <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a4b      	ldr	r2, [pc, #300]	; (8002714 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d101      	bne.n	80025f0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80025ec:	4b4c      	ldr	r3, [pc, #304]	; (8002720 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80025ee:	e000      	b.n	80025f2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80025f0:	4b4c      	ldr	r3, [pc, #304]	; (8002724 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80025f2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d040      	beq.n	800267e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80025fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800260e:	035b      	lsls	r3, r3, #13
 8002610:	430b      	orrs	r3, r1
 8002612:	431a      	orrs	r2, r3
 8002614:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002616:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d108      	bne.n	8002638 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002634:	2301      	movs	r3, #1
 8002636:	e000      	b.n	800263a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002638:	2300      	movs	r3, #0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d15c      	bne.n	80026f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	2b01      	cmp	r3, #1
 8002648:	d107      	bne.n	800265a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b01      	cmp	r3, #1
 8002654:	d101      	bne.n	800265a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800265a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800265c:	2b00      	cmp	r3, #0
 800265e:	d14b      	bne.n	80026f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002660:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002668:	f023 030f 	bic.w	r3, r3, #15
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	6811      	ldr	r1, [r2, #0]
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	6892      	ldr	r2, [r2, #8]
 8002674:	430a      	orrs	r2, r1
 8002676:	431a      	orrs	r2, r3
 8002678:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800267a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800267c:	e03c      	b.n	80026f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800267e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002686:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002688:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d108      	bne.n	80026aa <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80026aa:	2300      	movs	r3, #0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d123      	bne.n	80026f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d107      	bne.n	80026cc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80026cc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d112      	bne.n	80026f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80026d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80026da:	f023 030f 	bic.w	r3, r3, #15
 80026de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026e0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80026e2:	e009      	b.n	80026f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	f043 0220 	orr.w	r2, r3, #32
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80026f6:	e000      	b.n	80026fa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80026f8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002702:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002706:	4618      	mov	r0, r3
 8002708:	3764      	adds	r7, #100	; 0x64
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	50000100 	.word	0x50000100
 8002718:	50000400 	.word	0x50000400
 800271c:	50000500 	.word	0x50000500
 8002720:	50000300 	.word	0x50000300
 8002724:	50000700 	.word	0x50000700

08002728 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	2b01      	cmp	r3, #1
 8002740:	d108      	bne.n	8002754 <ADC_Enable+0x2c>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <ADC_Enable+0x2c>
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <ADC_Enable+0x2e>
 8002754:	2300      	movs	r3, #0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d143      	bne.n	80027e2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	4b22      	ldr	r3, [pc, #136]	; (80027ec <ADC_Enable+0xc4>)
 8002762:	4013      	ands	r3, r2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00d      	beq.n	8002784 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	f043 0210 	orr.w	r2, r3, #16
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002778:	f043 0201 	orr.w	r2, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e02f      	b.n	80027e4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0201 	orr.w	r2, r2, #1
 8002792:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002794:	f7ff f84e 	bl	8001834 <HAL_GetTick>
 8002798:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800279a:	e01b      	b.n	80027d4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800279c:	f7ff f84a 	bl	8001834 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d914      	bls.n	80027d4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d00d      	beq.n	80027d4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f043 0210 	orr.w	r2, r3, #16
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c8:	f043 0201 	orr.w	r2, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e007      	b.n	80027e4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d1dc      	bne.n	800279c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	8000003f 	.word	0x8000003f

080027f0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b01      	cmp	r3, #1
 8002808:	d108      	bne.n	800281c <ADC_Disable+0x2c>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <ADC_Disable+0x2c>
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <ADC_Disable+0x2e>
 800281c:	2300      	movs	r3, #0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d047      	beq.n	80028b2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 030d 	and.w	r3, r3, #13
 800282c:	2b01      	cmp	r3, #1
 800282e:	d10f      	bne.n	8002850 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0202 	orr.w	r2, r2, #2
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2203      	movs	r2, #3
 8002846:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002848:	f7fe fff4 	bl	8001834 <HAL_GetTick>
 800284c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800284e:	e029      	b.n	80028a4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	f043 0210 	orr.w	r2, r3, #16
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002860:	f043 0201 	orr.w	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e023      	b.n	80028b4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800286c:	f7fe ffe2 	bl	8001834 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d914      	bls.n	80028a4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b01      	cmp	r3, #1
 8002886:	d10d      	bne.n	80028a4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	f043 0210 	orr.w	r2, r3, #16
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002898:	f043 0201 	orr.w	r2, r3, #1
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e007      	b.n	80028b4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d0dc      	beq.n	800286c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <__NVIC_SetPriorityGrouping+0x44>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028d8:	4013      	ands	r3, r2
 80028da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ee:	4a04      	ldr	r2, [pc, #16]	; (8002900 <__NVIC_SetPriorityGrouping+0x44>)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	60d3      	str	r3, [r2, #12]
}
 80028f4:	bf00      	nop
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002908:	4b04      	ldr	r3, [pc, #16]	; (800291c <__NVIC_GetPriorityGrouping+0x18>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	0a1b      	lsrs	r3, r3, #8
 800290e:	f003 0307 	and.w	r3, r3, #7
}
 8002912:	4618      	mov	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	2b00      	cmp	r3, #0
 8002930:	db0b      	blt.n	800294a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	f003 021f 	and.w	r2, r3, #31
 8002938:	4907      	ldr	r1, [pc, #28]	; (8002958 <__NVIC_EnableIRQ+0x38>)
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	2001      	movs	r0, #1
 8002942:	fa00 f202 	lsl.w	r2, r0, r2
 8002946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000e100 	.word	0xe000e100

0800295c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	6039      	str	r1, [r7, #0]
 8002966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296c:	2b00      	cmp	r3, #0
 800296e:	db0a      	blt.n	8002986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	b2da      	uxtb	r2, r3
 8002974:	490c      	ldr	r1, [pc, #48]	; (80029a8 <__NVIC_SetPriority+0x4c>)
 8002976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297a:	0112      	lsls	r2, r2, #4
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	440b      	add	r3, r1
 8002980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002984:	e00a      	b.n	800299c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	b2da      	uxtb	r2, r3
 800298a:	4908      	ldr	r1, [pc, #32]	; (80029ac <__NVIC_SetPriority+0x50>)
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	3b04      	subs	r3, #4
 8002994:	0112      	lsls	r2, r2, #4
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	440b      	add	r3, r1
 800299a:	761a      	strb	r2, [r3, #24]
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000e100 	.word	0xe000e100
 80029ac:	e000ed00 	.word	0xe000ed00

080029b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b089      	sub	sp, #36	; 0x24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f1c3 0307 	rsb	r3, r3, #7
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	bf28      	it	cs
 80029ce:	2304      	movcs	r3, #4
 80029d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3304      	adds	r3, #4
 80029d6:	2b06      	cmp	r3, #6
 80029d8:	d902      	bls.n	80029e0 <NVIC_EncodePriority+0x30>
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3b03      	subs	r3, #3
 80029de:	e000      	b.n	80029e2 <NVIC_EncodePriority+0x32>
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e4:	f04f 32ff 	mov.w	r2, #4294967295
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43da      	mvns	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	401a      	ands	r2, r3
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f8:	f04f 31ff 	mov.w	r1, #4294967295
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002a02:	43d9      	mvns	r1, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a08:	4313      	orrs	r3, r2
         );
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3724      	adds	r7, #36	; 0x24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
	...

08002a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a28:	d301      	bcc.n	8002a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e00f      	b.n	8002a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a2e:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <SysTick_Config+0x40>)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a36:	210f      	movs	r1, #15
 8002a38:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3c:	f7ff ff8e 	bl	800295c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <SysTick_Config+0x40>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a46:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <SysTick_Config+0x40>)
 8002a48:	2207      	movs	r2, #7
 8002a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	e000e010 	.word	0xe000e010

08002a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff ff29 	bl	80028bc <__NVIC_SetPriorityGrouping>
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b086      	sub	sp, #24
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	4603      	mov	r3, r0
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
 8002a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a84:	f7ff ff3e 	bl	8002904 <__NVIC_GetPriorityGrouping>
 8002a88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	68b9      	ldr	r1, [r7, #8]
 8002a8e:	6978      	ldr	r0, [r7, #20]
 8002a90:	f7ff ff8e 	bl	80029b0 <NVIC_EncodePriority>
 8002a94:	4602      	mov	r2, r0
 8002a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff ff5d 	bl	800295c <__NVIC_SetPriority>
}
 8002aa2:	bf00      	nop
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff ff31 	bl	8002920 <__NVIC_EnableIRQ>
}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff ffa2 	bl	8002a18 <SysTick_Config>
 8002ad4:	4603      	mov	r3, r0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aee:	e160      	b.n	8002db2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	2101      	movs	r1, #1
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	fa01 f303 	lsl.w	r3, r1, r3
 8002afc:	4013      	ands	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 8152 	beq.w	8002dac <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d005      	beq.n	8002b20 <HAL_GPIO_Init+0x40>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d130      	bne.n	8002b82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	2203      	movs	r2, #3
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4013      	ands	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b56:	2201      	movs	r2, #1
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4013      	ands	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	091b      	lsrs	r3, r3, #4
 8002b6c:	f003 0201 	and.w	r2, r3, #1
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d017      	beq.n	8002bbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	2203      	movs	r2, #3
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d123      	bne.n	8002c12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	08da      	lsrs	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3208      	adds	r2, #8
 8002bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	220f      	movs	r2, #15
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4013      	ands	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	691a      	ldr	r2, [r3, #16]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	08da      	lsrs	r2, r3, #3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3208      	adds	r2, #8
 8002c0c:	6939      	ldr	r1, [r7, #16]
 8002c0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 0203 	and.w	r2, r3, #3
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80ac 	beq.w	8002dac <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c54:	4b5e      	ldr	r3, [pc, #376]	; (8002dd0 <HAL_GPIO_Init+0x2f0>)
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	4a5d      	ldr	r2, [pc, #372]	; (8002dd0 <HAL_GPIO_Init+0x2f0>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6193      	str	r3, [r2, #24]
 8002c60:	4b5b      	ldr	r3, [pc, #364]	; (8002dd0 <HAL_GPIO_Init+0x2f0>)
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c6c:	4a59      	ldr	r2, [pc, #356]	; (8002dd4 <HAL_GPIO_Init+0x2f4>)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	089b      	lsrs	r3, r3, #2
 8002c72:	3302      	adds	r3, #2
 8002c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f003 0303 	and.w	r3, r3, #3
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	220f      	movs	r2, #15
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c96:	d025      	beq.n	8002ce4 <HAL_GPIO_Init+0x204>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a4f      	ldr	r2, [pc, #316]	; (8002dd8 <HAL_GPIO_Init+0x2f8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d01f      	beq.n	8002ce0 <HAL_GPIO_Init+0x200>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a4e      	ldr	r2, [pc, #312]	; (8002ddc <HAL_GPIO_Init+0x2fc>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d019      	beq.n	8002cdc <HAL_GPIO_Init+0x1fc>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a4d      	ldr	r2, [pc, #308]	; (8002de0 <HAL_GPIO_Init+0x300>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d013      	beq.n	8002cd8 <HAL_GPIO_Init+0x1f8>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a4c      	ldr	r2, [pc, #304]	; (8002de4 <HAL_GPIO_Init+0x304>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d00d      	beq.n	8002cd4 <HAL_GPIO_Init+0x1f4>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a4b      	ldr	r2, [pc, #300]	; (8002de8 <HAL_GPIO_Init+0x308>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d007      	beq.n	8002cd0 <HAL_GPIO_Init+0x1f0>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a4a      	ldr	r2, [pc, #296]	; (8002dec <HAL_GPIO_Init+0x30c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d101      	bne.n	8002ccc <HAL_GPIO_Init+0x1ec>
 8002cc8:	2306      	movs	r3, #6
 8002cca:	e00c      	b.n	8002ce6 <HAL_GPIO_Init+0x206>
 8002ccc:	2307      	movs	r3, #7
 8002cce:	e00a      	b.n	8002ce6 <HAL_GPIO_Init+0x206>
 8002cd0:	2305      	movs	r3, #5
 8002cd2:	e008      	b.n	8002ce6 <HAL_GPIO_Init+0x206>
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	e006      	b.n	8002ce6 <HAL_GPIO_Init+0x206>
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e004      	b.n	8002ce6 <HAL_GPIO_Init+0x206>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e002      	b.n	8002ce6 <HAL_GPIO_Init+0x206>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <HAL_GPIO_Init+0x206>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	f002 0203 	and.w	r2, r2, #3
 8002cec:	0092      	lsls	r2, r2, #2
 8002cee:	4093      	lsls	r3, r2
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cf6:	4937      	ldr	r1, [pc, #220]	; (8002dd4 <HAL_GPIO_Init+0x2f4>)
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	089b      	lsrs	r3, r3, #2
 8002cfc:	3302      	adds	r3, #2
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d04:	4b3a      	ldr	r3, [pc, #232]	; (8002df0 <HAL_GPIO_Init+0x310>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d28:	4a31      	ldr	r2, [pc, #196]	; (8002df0 <HAL_GPIO_Init+0x310>)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d2e:	4b30      	ldr	r3, [pc, #192]	; (8002df0 <HAL_GPIO_Init+0x310>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	43db      	mvns	r3, r3
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d52:	4a27      	ldr	r2, [pc, #156]	; (8002df0 <HAL_GPIO_Init+0x310>)
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d58:	4b25      	ldr	r3, [pc, #148]	; (8002df0 <HAL_GPIO_Init+0x310>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	43db      	mvns	r3, r3
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4013      	ands	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d7c:	4a1c      	ldr	r2, [pc, #112]	; (8002df0 <HAL_GPIO_Init+0x310>)
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d82:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <HAL_GPIO_Init+0x310>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002da6:	4a12      	ldr	r2, [pc, #72]	; (8002df0 <HAL_GPIO_Init+0x310>)
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	3301      	adds	r3, #1
 8002db0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f47f ae97 	bne.w	8002af0 <HAL_GPIO_Init+0x10>
  }
}
 8002dc2:	bf00      	nop
 8002dc4:	bf00      	nop
 8002dc6:	371c      	adds	r7, #28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40010000 	.word	0x40010000
 8002dd8:	48000400 	.word	0x48000400
 8002ddc:	48000800 	.word	0x48000800
 8002de0:	48000c00 	.word	0x48000c00
 8002de4:	48001000 	.word	0x48001000
 8002de8:	48001400 	.word	0x48001400
 8002dec:	48001800 	.word	0x48001800
 8002df0:	40010400 	.word	0x40010400

08002df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	807b      	strh	r3, [r7, #2]
 8002e00:	4613      	mov	r3, r2
 8002e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e04:	787b      	ldrb	r3, [r7, #1]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e0a:	887a      	ldrh	r2, [r7, #2]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e10:	e002      	b.n	8002e18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e12:	887a      	ldrh	r2, [r7, #2]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e2e:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	88fb      	ldrh	r3, [r7, #6]
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d006      	beq.n	8002e48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e3a:	4a05      	ldr	r2, [pc, #20]	; (8002e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e3c:	88fb      	ldrh	r3, [r7, #6]
 8002e3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e40:	88fb      	ldrh	r3, [r7, #6]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 f806 	bl	8002e54 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e48:	bf00      	nop
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40010400 	.word	0x40010400

08002e54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
	...

08002e6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	1d3b      	adds	r3, r7, #4
 8002e76:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e78:	1d3b      	adds	r3, r7, #4
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d102      	bne.n	8002e86 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	f000 bf01 	b.w	8003c88 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 8160 	beq.w	8003156 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e96:	4bae      	ldr	r3, [pc, #696]	; (8003150 <HAL_RCC_OscConfig+0x2e4>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d00c      	beq.n	8002ebc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ea2:	4bab      	ldr	r3, [pc, #684]	; (8003150 <HAL_RCC_OscConfig+0x2e4>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d159      	bne.n	8002f62 <HAL_RCC_OscConfig+0xf6>
 8002eae:	4ba8      	ldr	r3, [pc, #672]	; (8003150 <HAL_RCC_OscConfig+0x2e4>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eba:	d152      	bne.n	8002f62 <HAL_RCC_OscConfig+0xf6>
 8002ebc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ec0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002ec8:	fa93 f3a3 	rbit	r3, r3
 8002ecc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ed0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed4:	fab3 f383 	clz	r3, r3
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d102      	bne.n	8002eee <HAL_RCC_OscConfig+0x82>
 8002ee8:	4b99      	ldr	r3, [pc, #612]	; (8003150 <HAL_RCC_OscConfig+0x2e4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	e015      	b.n	8002f1a <HAL_RCC_OscConfig+0xae>
 8002eee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ef2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002f02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f06:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002f0a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002f0e:	fa93 f3a3 	rbit	r3, r3
 8002f12:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002f16:	4b8e      	ldr	r3, [pc, #568]	; (8003150 <HAL_RCC_OscConfig+0x2e4>)
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f1e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002f22:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002f26:	fa92 f2a2 	rbit	r2, r2
 8002f2a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002f2e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002f32:	fab2 f282 	clz	r2, r2
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	f042 0220 	orr.w	r2, r2, #32
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	f002 021f 	and.w	r2, r2, #31
 8002f42:	2101      	movs	r1, #1
 8002f44:	fa01 f202 	lsl.w	r2, r1, r2
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 8102 	beq.w	8003154 <HAL_RCC_OscConfig+0x2e8>
 8002f50:	1d3b      	adds	r3, r7, #4
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f040 80fc 	bne.w	8003154 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	f000 be93 	b.w	8003c88 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f62:	1d3b      	adds	r3, r7, #4
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f6c:	d106      	bne.n	8002f7c <HAL_RCC_OscConfig+0x110>
 8002f6e:	4b78      	ldr	r3, [pc, #480]	; (8003150 <HAL_RCC_OscConfig+0x2e4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a77      	ldr	r2, [pc, #476]	; (8003150 <HAL_RCC_OscConfig+0x2e4>)
 8002f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e030      	b.n	8002fde <HAL_RCC_OscConfig+0x172>
 8002f7c:	1d3b      	adds	r3, r7, #4
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10c      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x134>
 8002f86:	4b72      	ldr	r3, [pc, #456]	; (8003150 <HAL_RCC_OscConfig+0x2e4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a71      	ldr	r2, [pc, #452]	; (8003150 <HAL_RCC_OscConfig+0x2e4>)
 8002f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	4b6f      	ldr	r3, [pc, #444]	; (8003150 <HAL_RCC_OscConfig+0x2e4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a6e      	ldr	r2, [pc, #440]	; (8003150 <HAL_RCC_OscConfig+0x2e4>)
 8002f98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	e01e      	b.n	8002fde <HAL_RCC_OscConfig+0x172>
 8002fa0:	1d3b      	adds	r3, r7, #4
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002faa:	d10c      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x15a>
 8002fac:	4b68      	ldr	r3, [pc, #416]	; (8003150 <HAL_RCC_OscConfig+0x2e4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a67      	ldr	r2, [pc, #412]	; (8003150 <HAL_RCC_OscConfig+0x2e4>)
 8002fb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	4b65      	ldr	r3, [pc, #404]	; (8003150 <HAL_RCC_OscConfig+0x2e4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a64      	ldr	r2, [pc, #400]	; (8003150 <HAL_RCC_OscConfig+0x2e4>)
 8002fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	e00b      	b.n	8002fde <HAL_RCC_OscConfig+0x172>
 8002fc6:	4b62      	ldr	r3, [pc, #392]	; (8003150 <HAL_RCC_OscConfig+0x2e4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a61      	ldr	r2, [pc, #388]	; (8003150 <HAL_RCC_OscConfig+0x2e4>)
 8002fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	4b5f      	ldr	r3, [pc, #380]	; (8003150 <HAL_RCC_OscConfig+0x2e4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a5e      	ldr	r2, [pc, #376]	; (8003150 <HAL_RCC_OscConfig+0x2e4>)
 8002fd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fdc:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fde:	1d3b      	adds	r3, r7, #4
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d059      	beq.n	800309c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f7fe fc24 	bl	8001834 <HAL_GetTick>
 8002fec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff0:	e00a      	b.n	8003008 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ff2:	f7fe fc1f 	bl	8001834 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b64      	cmp	r3, #100	; 0x64
 8003000:	d902      	bls.n	8003008 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	f000 be40 	b.w	8003c88 <HAL_RCC_OscConfig+0xe1c>
 8003008:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800300c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003010:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003014:	fa93 f3a3 	rbit	r3, r3
 8003018:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800301c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003020:	fab3 f383 	clz	r3, r3
 8003024:	b2db      	uxtb	r3, r3
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b01      	cmp	r3, #1
 8003032:	d102      	bne.n	800303a <HAL_RCC_OscConfig+0x1ce>
 8003034:	4b46      	ldr	r3, [pc, #280]	; (8003150 <HAL_RCC_OscConfig+0x2e4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	e015      	b.n	8003066 <HAL_RCC_OscConfig+0x1fa>
 800303a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800303e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800304e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003052:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003056:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800305a:	fa93 f3a3 	rbit	r3, r3
 800305e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003062:	4b3b      	ldr	r3, [pc, #236]	; (8003150 <HAL_RCC_OscConfig+0x2e4>)
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800306a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800306e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003072:	fa92 f2a2 	rbit	r2, r2
 8003076:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800307a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800307e:	fab2 f282 	clz	r2, r2
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	f042 0220 	orr.w	r2, r2, #32
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	f002 021f 	and.w	r2, r2, #31
 800308e:	2101      	movs	r1, #1
 8003090:	fa01 f202 	lsl.w	r2, r1, r2
 8003094:	4013      	ands	r3, r2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0ab      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x186>
 800309a:	e05c      	b.n	8003156 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fe fbca 	bl	8001834 <HAL_GetTick>
 80030a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a4:	e00a      	b.n	80030bc <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a6:	f7fe fbc5 	bl	8001834 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b64      	cmp	r3, #100	; 0x64
 80030b4:	d902      	bls.n	80030bc <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	f000 bde6 	b.w	8003c88 <HAL_RCC_OscConfig+0xe1c>
 80030bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030c0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80030c8:	fa93 f3a3 	rbit	r3, r3
 80030cc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80030d0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d4:	fab3 f383 	clz	r3, r3
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	f043 0301 	orr.w	r3, r3, #1
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d102      	bne.n	80030ee <HAL_RCC_OscConfig+0x282>
 80030e8:	4b19      	ldr	r3, [pc, #100]	; (8003150 <HAL_RCC_OscConfig+0x2e4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	e015      	b.n	800311a <HAL_RCC_OscConfig+0x2ae>
 80030ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030f2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80030fa:	fa93 f3a3 	rbit	r3, r3
 80030fe:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003102:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003106:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800310a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800310e:	fa93 f3a3 	rbit	r3, r3
 8003112:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003116:	4b0e      	ldr	r3, [pc, #56]	; (8003150 <HAL_RCC_OscConfig+0x2e4>)
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800311e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003122:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003126:	fa92 f2a2 	rbit	r2, r2
 800312a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800312e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003132:	fab2 f282 	clz	r2, r2
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	f042 0220 	orr.w	r2, r2, #32
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	f002 021f 	and.w	r2, r2, #31
 8003142:	2101      	movs	r1, #1
 8003144:	fa01 f202 	lsl.w	r2, r1, r2
 8003148:	4013      	ands	r3, r2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1ab      	bne.n	80030a6 <HAL_RCC_OscConfig+0x23a>
 800314e:	e002      	b.n	8003156 <HAL_RCC_OscConfig+0x2ea>
 8003150:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003156:	1d3b      	adds	r3, r7, #4
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 8170 	beq.w	8003446 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003166:	4bd0      	ldr	r3, [pc, #832]	; (80034a8 <HAL_RCC_OscConfig+0x63c>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00c      	beq.n	800318c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003172:	4bcd      	ldr	r3, [pc, #820]	; (80034a8 <HAL_RCC_OscConfig+0x63c>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b08      	cmp	r3, #8
 800317c:	d16d      	bne.n	800325a <HAL_RCC_OscConfig+0x3ee>
 800317e:	4bca      	ldr	r3, [pc, #808]	; (80034a8 <HAL_RCC_OscConfig+0x63c>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800318a:	d166      	bne.n	800325a <HAL_RCC_OscConfig+0x3ee>
 800318c:	2302      	movs	r3, #2
 800318e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003196:	fa93 f3a3 	rbit	r3, r3
 800319a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800319e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a2:	fab3 f383 	clz	r3, r3
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	095b      	lsrs	r3, r3, #5
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d102      	bne.n	80031bc <HAL_RCC_OscConfig+0x350>
 80031b6:	4bbc      	ldr	r3, [pc, #752]	; (80034a8 <HAL_RCC_OscConfig+0x63c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	e013      	b.n	80031e4 <HAL_RCC_OscConfig+0x378>
 80031bc:	2302      	movs	r3, #2
 80031be:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80031c6:	fa93 f3a3 	rbit	r3, r3
 80031ca:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80031ce:	2302      	movs	r3, #2
 80031d0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80031d4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80031d8:	fa93 f3a3 	rbit	r3, r3
 80031dc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80031e0:	4bb1      	ldr	r3, [pc, #708]	; (80034a8 <HAL_RCC_OscConfig+0x63c>)
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	2202      	movs	r2, #2
 80031e6:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80031ea:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80031ee:	fa92 f2a2 	rbit	r2, r2
 80031f2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80031f6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80031fa:	fab2 f282 	clz	r2, r2
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	f042 0220 	orr.w	r2, r2, #32
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	f002 021f 	and.w	r2, r2, #31
 800320a:	2101      	movs	r1, #1
 800320c:	fa01 f202 	lsl.w	r2, r1, r2
 8003210:	4013      	ands	r3, r2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d007      	beq.n	8003226 <HAL_RCC_OscConfig+0x3ba>
 8003216:	1d3b      	adds	r3, r7, #4
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d002      	beq.n	8003226 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	f000 bd31 	b.w	8003c88 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003226:	4ba0      	ldr	r3, [pc, #640]	; (80034a8 <HAL_RCC_OscConfig+0x63c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800322e:	1d3b      	adds	r3, r7, #4
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	21f8      	movs	r1, #248	; 0xf8
 8003236:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800323e:	fa91 f1a1 	rbit	r1, r1
 8003242:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003246:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800324a:	fab1 f181 	clz	r1, r1
 800324e:	b2c9      	uxtb	r1, r1
 8003250:	408b      	lsls	r3, r1
 8003252:	4995      	ldr	r1, [pc, #596]	; (80034a8 <HAL_RCC_OscConfig+0x63c>)
 8003254:	4313      	orrs	r3, r2
 8003256:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003258:	e0f5      	b.n	8003446 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800325a:	1d3b      	adds	r3, r7, #4
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 8085 	beq.w	8003370 <HAL_RCC_OscConfig+0x504>
 8003266:	2301      	movs	r3, #1
 8003268:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003270:	fa93 f3a3 	rbit	r3, r3
 8003274:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003278:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800327c:	fab3 f383 	clz	r3, r3
 8003280:	b2db      	uxtb	r3, r3
 8003282:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003286:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	461a      	mov	r2, r3
 800328e:	2301      	movs	r3, #1
 8003290:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003292:	f7fe facf 	bl	8001834 <HAL_GetTick>
 8003296:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800329c:	f7fe faca 	bl	8001834 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d902      	bls.n	80032b2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	f000 bceb 	b.w	8003c88 <HAL_RCC_OscConfig+0xe1c>
 80032b2:	2302      	movs	r3, #2
 80032b4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80032bc:	fa93 f3a3 	rbit	r3, r3
 80032c0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80032c4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c8:	fab3 f383 	clz	r3, r3
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d102      	bne.n	80032e2 <HAL_RCC_OscConfig+0x476>
 80032dc:	4b72      	ldr	r3, [pc, #456]	; (80034a8 <HAL_RCC_OscConfig+0x63c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	e013      	b.n	800330a <HAL_RCC_OscConfig+0x49e>
 80032e2:	2302      	movs	r3, #2
 80032e4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80032ec:	fa93 f3a3 	rbit	r3, r3
 80032f0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80032f4:	2302      	movs	r3, #2
 80032f6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80032fa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80032fe:	fa93 f3a3 	rbit	r3, r3
 8003302:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003306:	4b68      	ldr	r3, [pc, #416]	; (80034a8 <HAL_RCC_OscConfig+0x63c>)
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	2202      	movs	r2, #2
 800330c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003310:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003314:	fa92 f2a2 	rbit	r2, r2
 8003318:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800331c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003320:	fab2 f282 	clz	r2, r2
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	f042 0220 	orr.w	r2, r2, #32
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	f002 021f 	and.w	r2, r2, #31
 8003330:	2101      	movs	r1, #1
 8003332:	fa01 f202 	lsl.w	r2, r1, r2
 8003336:	4013      	ands	r3, r2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0af      	beq.n	800329c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333c:	4b5a      	ldr	r3, [pc, #360]	; (80034a8 <HAL_RCC_OscConfig+0x63c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003344:	1d3b      	adds	r3, r7, #4
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	21f8      	movs	r1, #248	; 0xf8
 800334c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003350:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003354:	fa91 f1a1 	rbit	r1, r1
 8003358:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800335c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003360:	fab1 f181 	clz	r1, r1
 8003364:	b2c9      	uxtb	r1, r1
 8003366:	408b      	lsls	r3, r1
 8003368:	494f      	ldr	r1, [pc, #316]	; (80034a8 <HAL_RCC_OscConfig+0x63c>)
 800336a:	4313      	orrs	r3, r2
 800336c:	600b      	str	r3, [r1, #0]
 800336e:	e06a      	b.n	8003446 <HAL_RCC_OscConfig+0x5da>
 8003370:	2301      	movs	r3, #1
 8003372:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003376:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800337a:	fa93 f3a3 	rbit	r3, r3
 800337e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003382:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003386:	fab3 f383 	clz	r3, r3
 800338a:	b2db      	uxtb	r3, r3
 800338c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003390:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	461a      	mov	r2, r3
 8003398:	2300      	movs	r3, #0
 800339a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7fe fa4a 	bl	8001834 <HAL_GetTick>
 80033a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a4:	e00a      	b.n	80033bc <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033a6:	f7fe fa45 	bl	8001834 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d902      	bls.n	80033bc <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	f000 bc66 	b.w	8003c88 <HAL_RCC_OscConfig+0xe1c>
 80033bc:	2302      	movs	r3, #2
 80033be:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80033c6:	fa93 f3a3 	rbit	r3, r3
 80033ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80033ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d2:	fab3 f383 	clz	r3, r3
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	095b      	lsrs	r3, r3, #5
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d102      	bne.n	80033ec <HAL_RCC_OscConfig+0x580>
 80033e6:	4b30      	ldr	r3, [pc, #192]	; (80034a8 <HAL_RCC_OscConfig+0x63c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	e013      	b.n	8003414 <HAL_RCC_OscConfig+0x5a8>
 80033ec:	2302      	movs	r3, #2
 80033ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80033f6:	fa93 f3a3 	rbit	r3, r3
 80033fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80033fe:	2302      	movs	r3, #2
 8003400:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003404:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003408:	fa93 f3a3 	rbit	r3, r3
 800340c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003410:	4b25      	ldr	r3, [pc, #148]	; (80034a8 <HAL_RCC_OscConfig+0x63c>)
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	2202      	movs	r2, #2
 8003416:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800341a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800341e:	fa92 f2a2 	rbit	r2, r2
 8003422:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003426:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800342a:	fab2 f282 	clz	r2, r2
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	f042 0220 	orr.w	r2, r2, #32
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	f002 021f 	and.w	r2, r2, #31
 800343a:	2101      	movs	r1, #1
 800343c:	fa01 f202 	lsl.w	r2, r1, r2
 8003440:	4013      	ands	r3, r2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1af      	bne.n	80033a6 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003446:	1d3b      	adds	r3, r7, #4
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0308 	and.w	r3, r3, #8
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 80da 	beq.w	800360a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003456:	1d3b      	adds	r3, r7, #4
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d069      	beq.n	8003534 <HAL_RCC_OscConfig+0x6c8>
 8003460:	2301      	movs	r3, #1
 8003462:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003472:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003476:	fab3 f383 	clz	r3, r3
 800347a:	b2db      	uxtb	r3, r3
 800347c:	461a      	mov	r2, r3
 800347e:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <HAL_RCC_OscConfig+0x640>)
 8003480:	4413      	add	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	461a      	mov	r2, r3
 8003486:	2301      	movs	r3, #1
 8003488:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348a:	f7fe f9d3 	bl	8001834 <HAL_GetTick>
 800348e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003492:	e00d      	b.n	80034b0 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003494:	f7fe f9ce 	bl	8001834 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d905      	bls.n	80034b0 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e3ef      	b.n	8003c88 <HAL_RCC_OscConfig+0xe1c>
 80034a8:	40021000 	.word	0x40021000
 80034ac:	10908120 	.word	0x10908120
 80034b0:	2302      	movs	r3, #2
 80034b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034ba:	fa93 f2a3 	rbit	r2, r3
 80034be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80034c8:	2202      	movs	r2, #2
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	fa93 f2a3 	rbit	r2, r3
 80034d6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80034e0:	2202      	movs	r2, #2
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	fa93 f2a3 	rbit	r2, r3
 80034ee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80034f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f4:	4ba4      	ldr	r3, [pc, #656]	; (8003788 <HAL_RCC_OscConfig+0x91c>)
 80034f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034f8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80034fc:	2102      	movs	r1, #2
 80034fe:	6019      	str	r1, [r3, #0]
 8003500:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	fa93 f1a3 	rbit	r1, r3
 800350a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800350e:	6019      	str	r1, [r3, #0]
  return result;
 8003510:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	fab3 f383 	clz	r3, r3
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003520:	b2db      	uxtb	r3, r3
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	2101      	movs	r1, #1
 8003528:	fa01 f303 	lsl.w	r3, r1, r3
 800352c:	4013      	ands	r3, r2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0b0      	beq.n	8003494 <HAL_RCC_OscConfig+0x628>
 8003532:	e06a      	b.n	800360a <HAL_RCC_OscConfig+0x79e>
 8003534:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003538:	2201      	movs	r2, #1
 800353a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	fa93 f2a3 	rbit	r2, r3
 8003546:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800354a:	601a      	str	r2, [r3, #0]
  return result;
 800354c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003550:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003552:	fab3 f383 	clz	r3, r3
 8003556:	b2db      	uxtb	r3, r3
 8003558:	461a      	mov	r2, r3
 800355a:	4b8c      	ldr	r3, [pc, #560]	; (800378c <HAL_RCC_OscConfig+0x920>)
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	461a      	mov	r2, r3
 8003562:	2300      	movs	r3, #0
 8003564:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003566:	f7fe f965 	bl	8001834 <HAL_GetTick>
 800356a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800356e:	e009      	b.n	8003584 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003570:	f7fe f960 	bl	8001834 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e381      	b.n	8003c88 <HAL_RCC_OscConfig+0xe1c>
 8003584:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003588:	2202      	movs	r2, #2
 800358a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	fa93 f2a3 	rbit	r2, r3
 8003596:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80035a0:	2202      	movs	r2, #2
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	fa93 f2a3 	rbit	r2, r3
 80035ae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80035b8:	2202      	movs	r2, #2
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	fa93 f2a3 	rbit	r2, r3
 80035c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80035ca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035cc:	4b6e      	ldr	r3, [pc, #440]	; (8003788 <HAL_RCC_OscConfig+0x91c>)
 80035ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80035d4:	2102      	movs	r1, #2
 80035d6:	6019      	str	r1, [r3, #0]
 80035d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	fa93 f1a3 	rbit	r1, r3
 80035e2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80035e6:	6019      	str	r1, [r3, #0]
  return result;
 80035e8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	fab3 f383 	clz	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	f003 031f 	and.w	r3, r3, #31
 80035fe:	2101      	movs	r1, #1
 8003600:	fa01 f303 	lsl.w	r3, r1, r3
 8003604:	4013      	ands	r3, r2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1b2      	bne.n	8003570 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800360a:	1d3b      	adds	r3, r7, #4
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 8157 	beq.w	80038c8 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800361a:	2300      	movs	r3, #0
 800361c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003620:	4b59      	ldr	r3, [pc, #356]	; (8003788 <HAL_RCC_OscConfig+0x91c>)
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d112      	bne.n	8003652 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800362c:	4b56      	ldr	r3, [pc, #344]	; (8003788 <HAL_RCC_OscConfig+0x91c>)
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	4a55      	ldr	r2, [pc, #340]	; (8003788 <HAL_RCC_OscConfig+0x91c>)
 8003632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003636:	61d3      	str	r3, [r2, #28]
 8003638:	4b53      	ldr	r3, [pc, #332]	; (8003788 <HAL_RCC_OscConfig+0x91c>)
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003640:	f107 030c 	add.w	r3, r7, #12
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	f107 030c 	add.w	r3, r7, #12
 800364a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800364c:	2301      	movs	r3, #1
 800364e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003652:	4b4f      	ldr	r3, [pc, #316]	; (8003790 <HAL_RCC_OscConfig+0x924>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d11a      	bne.n	8003694 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800365e:	4b4c      	ldr	r3, [pc, #304]	; (8003790 <HAL_RCC_OscConfig+0x924>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a4b      	ldr	r2, [pc, #300]	; (8003790 <HAL_RCC_OscConfig+0x924>)
 8003664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003668:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800366a:	f7fe f8e3 	bl	8001834 <HAL_GetTick>
 800366e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003672:	e009      	b.n	8003688 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003674:	f7fe f8de 	bl	8001834 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b64      	cmp	r3, #100	; 0x64
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e2ff      	b.n	8003c88 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003688:	4b41      	ldr	r3, [pc, #260]	; (8003790 <HAL_RCC_OscConfig+0x924>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0ef      	beq.n	8003674 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003694:	1d3b      	adds	r3, r7, #4
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d106      	bne.n	80036ac <HAL_RCC_OscConfig+0x840>
 800369e:	4b3a      	ldr	r3, [pc, #232]	; (8003788 <HAL_RCC_OscConfig+0x91c>)
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	4a39      	ldr	r2, [pc, #228]	; (8003788 <HAL_RCC_OscConfig+0x91c>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	6213      	str	r3, [r2, #32]
 80036aa:	e02f      	b.n	800370c <HAL_RCC_OscConfig+0x8a0>
 80036ac:	1d3b      	adds	r3, r7, #4
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCC_OscConfig+0x864>
 80036b6:	4b34      	ldr	r3, [pc, #208]	; (8003788 <HAL_RCC_OscConfig+0x91c>)
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	4a33      	ldr	r2, [pc, #204]	; (8003788 <HAL_RCC_OscConfig+0x91c>)
 80036bc:	f023 0301 	bic.w	r3, r3, #1
 80036c0:	6213      	str	r3, [r2, #32]
 80036c2:	4b31      	ldr	r3, [pc, #196]	; (8003788 <HAL_RCC_OscConfig+0x91c>)
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	4a30      	ldr	r2, [pc, #192]	; (8003788 <HAL_RCC_OscConfig+0x91c>)
 80036c8:	f023 0304 	bic.w	r3, r3, #4
 80036cc:	6213      	str	r3, [r2, #32]
 80036ce:	e01d      	b.n	800370c <HAL_RCC_OscConfig+0x8a0>
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b05      	cmp	r3, #5
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCC_OscConfig+0x888>
 80036da:	4b2b      	ldr	r3, [pc, #172]	; (8003788 <HAL_RCC_OscConfig+0x91c>)
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	4a2a      	ldr	r2, [pc, #168]	; (8003788 <HAL_RCC_OscConfig+0x91c>)
 80036e0:	f043 0304 	orr.w	r3, r3, #4
 80036e4:	6213      	str	r3, [r2, #32]
 80036e6:	4b28      	ldr	r3, [pc, #160]	; (8003788 <HAL_RCC_OscConfig+0x91c>)
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	4a27      	ldr	r2, [pc, #156]	; (8003788 <HAL_RCC_OscConfig+0x91c>)
 80036ec:	f043 0301 	orr.w	r3, r3, #1
 80036f0:	6213      	str	r3, [r2, #32]
 80036f2:	e00b      	b.n	800370c <HAL_RCC_OscConfig+0x8a0>
 80036f4:	4b24      	ldr	r3, [pc, #144]	; (8003788 <HAL_RCC_OscConfig+0x91c>)
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	4a23      	ldr	r2, [pc, #140]	; (8003788 <HAL_RCC_OscConfig+0x91c>)
 80036fa:	f023 0301 	bic.w	r3, r3, #1
 80036fe:	6213      	str	r3, [r2, #32]
 8003700:	4b21      	ldr	r3, [pc, #132]	; (8003788 <HAL_RCC_OscConfig+0x91c>)
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	4a20      	ldr	r2, [pc, #128]	; (8003788 <HAL_RCC_OscConfig+0x91c>)
 8003706:	f023 0304 	bic.w	r3, r3, #4
 800370a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800370c:	1d3b      	adds	r3, r7, #4
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d06a      	beq.n	80037ec <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003716:	f7fe f88d 	bl	8001834 <HAL_GetTick>
 800371a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371e:	e00b      	b.n	8003738 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003720:	f7fe f888 	bl	8001834 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003730:	4293      	cmp	r3, r2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e2a7      	b.n	8003c88 <HAL_RCC_OscConfig+0xe1c>
 8003738:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800373c:	2202      	movs	r2, #2
 800373e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003740:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	fa93 f2a3 	rbit	r2, r3
 800374a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003754:	2202      	movs	r2, #2
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	fa93 f2a3 	rbit	r2, r3
 8003762:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003766:	601a      	str	r2, [r3, #0]
  return result;
 8003768:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800376c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800376e:	fab3 f383 	clz	r3, r3
 8003772:	b2db      	uxtb	r3, r3
 8003774:	095b      	lsrs	r3, r3, #5
 8003776:	b2db      	uxtb	r3, r3
 8003778:	f043 0302 	orr.w	r3, r3, #2
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d108      	bne.n	8003794 <HAL_RCC_OscConfig+0x928>
 8003782:	4b01      	ldr	r3, [pc, #4]	; (8003788 <HAL_RCC_OscConfig+0x91c>)
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	e013      	b.n	80037b0 <HAL_RCC_OscConfig+0x944>
 8003788:	40021000 	.word	0x40021000
 800378c:	10908120 	.word	0x10908120
 8003790:	40007000 	.word	0x40007000
 8003794:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003798:	2202      	movs	r2, #2
 800379a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	fa93 f2a3 	rbit	r2, r3
 80037a6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	4bc0      	ldr	r3, [pc, #768]	; (8003ab0 <HAL_RCC_OscConfig+0xc44>)
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80037b4:	2102      	movs	r1, #2
 80037b6:	6011      	str	r1, [r2, #0]
 80037b8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80037bc:	6812      	ldr	r2, [r2, #0]
 80037be:	fa92 f1a2 	rbit	r1, r2
 80037c2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80037c6:	6011      	str	r1, [r2, #0]
  return result;
 80037c8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	fab2 f282 	clz	r2, r2
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	f002 021f 	and.w	r2, r2, #31
 80037de:	2101      	movs	r1, #1
 80037e0:	fa01 f202 	lsl.w	r2, r1, r2
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d09a      	beq.n	8003720 <HAL_RCC_OscConfig+0x8b4>
 80037ea:	e063      	b.n	80038b4 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ec:	f7fe f822 	bl	8001834 <HAL_GetTick>
 80037f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f4:	e00b      	b.n	800380e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037f6:	f7fe f81d 	bl	8001834 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	f241 3288 	movw	r2, #5000	; 0x1388
 8003806:	4293      	cmp	r3, r2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e23c      	b.n	8003c88 <HAL_RCC_OscConfig+0xe1c>
 800380e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003812:	2202      	movs	r2, #2
 8003814:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003816:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	fa93 f2a3 	rbit	r2, r3
 8003820:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800382a:	2202      	movs	r2, #2
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	fa93 f2a3 	rbit	r2, r3
 8003838:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800383c:	601a      	str	r2, [r3, #0]
  return result;
 800383e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003842:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003844:	fab3 f383 	clz	r3, r3
 8003848:	b2db      	uxtb	r3, r3
 800384a:	095b      	lsrs	r3, r3, #5
 800384c:	b2db      	uxtb	r3, r3
 800384e:	f043 0302 	orr.w	r3, r3, #2
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d102      	bne.n	800385e <HAL_RCC_OscConfig+0x9f2>
 8003858:	4b95      	ldr	r3, [pc, #596]	; (8003ab0 <HAL_RCC_OscConfig+0xc44>)
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	e00d      	b.n	800387a <HAL_RCC_OscConfig+0xa0e>
 800385e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003862:	2202      	movs	r2, #2
 8003864:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003866:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	fa93 f2a3 	rbit	r2, r3
 8003870:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	4b8e      	ldr	r3, [pc, #568]	; (8003ab0 <HAL_RCC_OscConfig+0xc44>)
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800387e:	2102      	movs	r1, #2
 8003880:	6011      	str	r1, [r2, #0]
 8003882:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	fa92 f1a2 	rbit	r1, r2
 800388c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003890:	6011      	str	r1, [r2, #0]
  return result;
 8003892:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	fab2 f282 	clz	r2, r2
 800389c:	b2d2      	uxtb	r2, r2
 800389e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	f002 021f 	and.w	r2, r2, #31
 80038a8:	2101      	movs	r1, #1
 80038aa:	fa01 f202 	lsl.w	r2, r1, r2
 80038ae:	4013      	ands	r3, r2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1a0      	bne.n	80037f6 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038b4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d105      	bne.n	80038c8 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038bc:	4b7c      	ldr	r3, [pc, #496]	; (8003ab0 <HAL_RCC_OscConfig+0xc44>)
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	4a7b      	ldr	r2, [pc, #492]	; (8003ab0 <HAL_RCC_OscConfig+0xc44>)
 80038c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c8:	1d3b      	adds	r3, r7, #4
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 81d9 	beq.w	8003c86 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038d4:	4b76      	ldr	r3, [pc, #472]	; (8003ab0 <HAL_RCC_OscConfig+0xc44>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f003 030c 	and.w	r3, r3, #12
 80038dc:	2b08      	cmp	r3, #8
 80038de:	f000 81a6 	beq.w	8003c2e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038e2:	1d3b      	adds	r3, r7, #4
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	f040 811e 	bne.w	8003b2a <HAL_RCC_OscConfig+0xcbe>
 80038ee:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80038f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	fa93 f2a3 	rbit	r2, r3
 8003902:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003906:	601a      	str	r2, [r3, #0]
  return result;
 8003908:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800390c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390e:	fab3 f383 	clz	r3, r3
 8003912:	b2db      	uxtb	r3, r3
 8003914:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003918:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	461a      	mov	r2, r3
 8003920:	2300      	movs	r3, #0
 8003922:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003924:	f7fd ff86 	bl	8001834 <HAL_GetTick>
 8003928:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800392c:	e009      	b.n	8003942 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800392e:	f7fd ff81 	bl	8001834 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e1a2      	b.n	8003c88 <HAL_RCC_OscConfig+0xe1c>
 8003942:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003946:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800394a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	fa93 f2a3 	rbit	r2, r3
 8003956:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800395a:	601a      	str	r2, [r3, #0]
  return result;
 800395c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003960:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003962:	fab3 f383 	clz	r3, r3
 8003966:	b2db      	uxtb	r3, r3
 8003968:	095b      	lsrs	r3, r3, #5
 800396a:	b2db      	uxtb	r3, r3
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b01      	cmp	r3, #1
 8003974:	d102      	bne.n	800397c <HAL_RCC_OscConfig+0xb10>
 8003976:	4b4e      	ldr	r3, [pc, #312]	; (8003ab0 <HAL_RCC_OscConfig+0xc44>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	e01b      	b.n	80039b4 <HAL_RCC_OscConfig+0xb48>
 800397c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003980:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003984:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003986:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	fa93 f2a3 	rbit	r2, r3
 8003990:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800399a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	fa93 f2a3 	rbit	r2, r3
 80039aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	4b3f      	ldr	r3, [pc, #252]	; (8003ab0 <HAL_RCC_OscConfig+0xc44>)
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80039b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80039bc:	6011      	str	r1, [r2, #0]
 80039be:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	fa92 f1a2 	rbit	r1, r2
 80039c8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80039cc:	6011      	str	r1, [r2, #0]
  return result;
 80039ce:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	fab2 f282 	clz	r2, r2
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	f042 0220 	orr.w	r2, r2, #32
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	f002 021f 	and.w	r2, r2, #31
 80039e4:	2101      	movs	r1, #1
 80039e6:	fa01 f202 	lsl.w	r2, r1, r2
 80039ea:	4013      	ands	r3, r2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d19e      	bne.n	800392e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039f0:	4b2f      	ldr	r3, [pc, #188]	; (8003ab0 <HAL_RCC_OscConfig+0xc44>)
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	f023 020f 	bic.w	r2, r3, #15
 80039f8:	1d3b      	adds	r3, r7, #4
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	492c      	ldr	r1, [pc, #176]	; (8003ab0 <HAL_RCC_OscConfig+0xc44>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003a04:	4b2a      	ldr	r3, [pc, #168]	; (8003ab0 <HAL_RCC_OscConfig+0xc44>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003a0c:	1d3b      	adds	r3, r7, #4
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6a19      	ldr	r1, [r3, #32]
 8003a12:	1d3b      	adds	r3, r7, #4
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	4925      	ldr	r1, [pc, #148]	; (8003ab0 <HAL_RCC_OscConfig+0xc44>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	604b      	str	r3, [r1, #4]
 8003a20:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003a24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	fa93 f2a3 	rbit	r2, r3
 8003a34:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a38:	601a      	str	r2, [r3, #0]
  return result;
 8003a3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a3e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a40:	fab3 f383 	clz	r3, r3
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	461a      	mov	r2, r3
 8003a52:	2301      	movs	r3, #1
 8003a54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a56:	f7fd feed 	bl	8001834 <HAL_GetTick>
 8003a5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a5e:	e009      	b.n	8003a74 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a60:	f7fd fee8 	bl	8001834 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e109      	b.n	8003c88 <HAL_RCC_OscConfig+0xe1c>
 8003a74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	fa93 f2a3 	rbit	r2, r3
 8003a88:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a8c:	601a      	str	r2, [r3, #0]
  return result;
 8003a8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a92:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a94:	fab3 f383 	clz	r3, r3
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d105      	bne.n	8003ab4 <HAL_RCC_OscConfig+0xc48>
 8003aa8:	4b01      	ldr	r3, [pc, #4]	; (8003ab0 <HAL_RCC_OscConfig+0xc44>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	e01e      	b.n	8003aec <HAL_RCC_OscConfig+0xc80>
 8003aae:	bf00      	nop
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ab8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	fa93 f2a3 	rbit	r2, r3
 8003ac8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003ad2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	fa93 f2a3 	rbit	r2, r3
 8003ae2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	4b6a      	ldr	r3, [pc, #424]	; (8003c94 <HAL_RCC_OscConfig+0xe28>)
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003af0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003af4:	6011      	str	r1, [r2, #0]
 8003af6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	fa92 f1a2 	rbit	r1, r2
 8003b00:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003b04:	6011      	str	r1, [r2, #0]
  return result;
 8003b06:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003b0a:	6812      	ldr	r2, [r2, #0]
 8003b0c:	fab2 f282 	clz	r2, r2
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	f042 0220 	orr.w	r2, r2, #32
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	f002 021f 	and.w	r2, r2, #31
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d09b      	beq.n	8003a60 <HAL_RCC_OscConfig+0xbf4>
 8003b28:	e0ad      	b.n	8003c86 <HAL_RCC_OscConfig+0xe1a>
 8003b2a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	fa93 f2a3 	rbit	r2, r3
 8003b3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b42:	601a      	str	r2, [r3, #0]
  return result;
 8003b44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b48:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4a:	fab3 f383 	clz	r3, r3
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b60:	f7fd fe68 	bl	8001834 <HAL_GetTick>
 8003b64:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b68:	e009      	b.n	8003b7e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6a:	f7fd fe63 	bl	8001834 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e084      	b.n	8003c88 <HAL_RCC_OscConfig+0xe1c>
 8003b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	fa93 f2a3 	rbit	r2, r3
 8003b92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b96:	601a      	str	r2, [r3, #0]
  return result;
 8003b98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b9e:	fab3 f383 	clz	r3, r3
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	095b      	lsrs	r3, r3, #5
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d102      	bne.n	8003bb8 <HAL_RCC_OscConfig+0xd4c>
 8003bb2:	4b38      	ldr	r3, [pc, #224]	; (8003c94 <HAL_RCC_OscConfig+0xe28>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	e01b      	b.n	8003bf0 <HAL_RCC_OscConfig+0xd84>
 8003bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	fa93 f2a3 	rbit	r2, r3
 8003bcc:	f107 0320 	add.w	r3, r7, #32
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	f107 031c 	add.w	r3, r7, #28
 8003bd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	f107 031c 	add.w	r3, r7, #28
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	fa93 f2a3 	rbit	r2, r3
 8003be6:	f107 0318 	add.w	r3, r7, #24
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	4b29      	ldr	r3, [pc, #164]	; (8003c94 <HAL_RCC_OscConfig+0xe28>)
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	f107 0214 	add.w	r2, r7, #20
 8003bf4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003bf8:	6011      	str	r1, [r2, #0]
 8003bfa:	f107 0214 	add.w	r2, r7, #20
 8003bfe:	6812      	ldr	r2, [r2, #0]
 8003c00:	fa92 f1a2 	rbit	r1, r2
 8003c04:	f107 0210 	add.w	r2, r7, #16
 8003c08:	6011      	str	r1, [r2, #0]
  return result;
 8003c0a:	f107 0210 	add.w	r2, r7, #16
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	fab2 f282 	clz	r2, r2
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	f042 0220 	orr.w	r2, r2, #32
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	f002 021f 	and.w	r2, r2, #31
 8003c20:	2101      	movs	r1, #1
 8003c22:	fa01 f202 	lsl.w	r2, r1, r2
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d19e      	bne.n	8003b6a <HAL_RCC_OscConfig+0xcfe>
 8003c2c:	e02b      	b.n	8003c86 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c2e:	1d3b      	adds	r3, r7, #4
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e025      	b.n	8003c88 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c3c:	4b15      	ldr	r3, [pc, #84]	; (8003c94 <HAL_RCC_OscConfig+0xe28>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003c44:	4b13      	ldr	r3, [pc, #76]	; (8003c94 <HAL_RCC_OscConfig+0xe28>)
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c4c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003c50:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003c54:	1d3b      	adds	r3, r7, #4
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d111      	bne.n	8003c82 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003c5e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003c62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c66:	1d3b      	adds	r3, r7, #4
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d108      	bne.n	8003c82 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003c70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c74:	f003 020f 	and.w	r2, r3, #15
 8003c78:	1d3b      	adds	r3, r7, #4
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d001      	beq.n	8003c86 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40021000 	.word	0x40021000

08003c98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b09e      	sub	sp, #120	; 0x78
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e162      	b.n	8003f76 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb0:	4b90      	ldr	r3, [pc, #576]	; (8003ef4 <HAL_RCC_ClockConfig+0x25c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d910      	bls.n	8003ce0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cbe:	4b8d      	ldr	r3, [pc, #564]	; (8003ef4 <HAL_RCC_ClockConfig+0x25c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f023 0207 	bic.w	r2, r3, #7
 8003cc6:	498b      	ldr	r1, [pc, #556]	; (8003ef4 <HAL_RCC_ClockConfig+0x25c>)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cce:	4b89      	ldr	r3, [pc, #548]	; (8003ef4 <HAL_RCC_ClockConfig+0x25c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d001      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e14a      	b.n	8003f76 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d008      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cec:	4b82      	ldr	r3, [pc, #520]	; (8003ef8 <HAL_RCC_ClockConfig+0x260>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	497f      	ldr	r1, [pc, #508]	; (8003ef8 <HAL_RCC_ClockConfig+0x260>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 80dc 	beq.w	8003ec4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d13c      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xf6>
 8003d14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d18:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d1c:	fa93 f3a3 	rbit	r3, r3
 8003d20:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d24:	fab3 f383 	clz	r3, r3
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	095b      	lsrs	r3, r3, #5
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d102      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xa6>
 8003d38:	4b6f      	ldr	r3, [pc, #444]	; (8003ef8 <HAL_RCC_ClockConfig+0x260>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	e00f      	b.n	8003d5e <HAL_RCC_ClockConfig+0xc6>
 8003d3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d42:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d46:	fa93 f3a3 	rbit	r3, r3
 8003d4a:	667b      	str	r3, [r7, #100]	; 0x64
 8003d4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d50:	663b      	str	r3, [r7, #96]	; 0x60
 8003d52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d54:	fa93 f3a3 	rbit	r3, r3
 8003d58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d5a:	4b67      	ldr	r3, [pc, #412]	; (8003ef8 <HAL_RCC_ClockConfig+0x260>)
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d62:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d66:	fa92 f2a2 	rbit	r2, r2
 8003d6a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003d6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d6e:	fab2 f282 	clz	r2, r2
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	f042 0220 	orr.w	r2, r2, #32
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	f002 021f 	and.w	r2, r2, #31
 8003d7e:	2101      	movs	r1, #1
 8003d80:	fa01 f202 	lsl.w	r2, r1, r2
 8003d84:	4013      	ands	r3, r2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d17b      	bne.n	8003e82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e0f3      	b.n	8003f76 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d13c      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x178>
 8003d96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d9a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d9e:	fa93 f3a3 	rbit	r3, r3
 8003da2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da6:	fab3 f383 	clz	r3, r3
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	f043 0301 	orr.w	r3, r3, #1
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d102      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x128>
 8003dba:	4b4f      	ldr	r3, [pc, #316]	; (8003ef8 <HAL_RCC_ClockConfig+0x260>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	e00f      	b.n	8003de0 <HAL_RCC_ClockConfig+0x148>
 8003dc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dc4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dc8:	fa93 f3a3 	rbit	r3, r3
 8003dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8003dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dd2:	643b      	str	r3, [r7, #64]	; 0x40
 8003dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dd6:	fa93 f3a3 	rbit	r3, r3
 8003dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ddc:	4b46      	ldr	r3, [pc, #280]	; (8003ef8 <HAL_RCC_ClockConfig+0x260>)
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003de4:	63ba      	str	r2, [r7, #56]	; 0x38
 8003de6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003de8:	fa92 f2a2 	rbit	r2, r2
 8003dec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003df0:	fab2 f282 	clz	r2, r2
 8003df4:	b2d2      	uxtb	r2, r2
 8003df6:	f042 0220 	orr.w	r2, r2, #32
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	f002 021f 	and.w	r2, r2, #31
 8003e00:	2101      	movs	r1, #1
 8003e02:	fa01 f202 	lsl.w	r2, r1, r2
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d13a      	bne.n	8003e82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0b2      	b.n	8003f76 <HAL_RCC_ClockConfig+0x2de>
 8003e10:	2302      	movs	r3, #2
 8003e12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e16:	fa93 f3a3 	rbit	r3, r3
 8003e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e1e:	fab3 f383 	clz	r3, r3
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	095b      	lsrs	r3, r3, #5
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d102      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x1a0>
 8003e32:	4b31      	ldr	r3, [pc, #196]	; (8003ef8 <HAL_RCC_ClockConfig+0x260>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	e00d      	b.n	8003e54 <HAL_RCC_ClockConfig+0x1bc>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3e:	fa93 f3a3 	rbit	r3, r3
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24
 8003e44:	2302      	movs	r3, #2
 8003e46:	623b      	str	r3, [r7, #32]
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	fa93 f3a3 	rbit	r3, r3
 8003e4e:	61fb      	str	r3, [r7, #28]
 8003e50:	4b29      	ldr	r3, [pc, #164]	; (8003ef8 <HAL_RCC_ClockConfig+0x260>)
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	2202      	movs	r2, #2
 8003e56:	61ba      	str	r2, [r7, #24]
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	fa92 f2a2 	rbit	r2, r2
 8003e5e:	617a      	str	r2, [r7, #20]
  return result;
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	fab2 f282 	clz	r2, r2
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	f042 0220 	orr.w	r2, r2, #32
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	f002 021f 	and.w	r2, r2, #31
 8003e72:	2101      	movs	r1, #1
 8003e74:	fa01 f202 	lsl.w	r2, r1, r2
 8003e78:	4013      	ands	r3, r2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e079      	b.n	8003f76 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e82:	4b1d      	ldr	r3, [pc, #116]	; (8003ef8 <HAL_RCC_ClockConfig+0x260>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f023 0203 	bic.w	r2, r3, #3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	491a      	ldr	r1, [pc, #104]	; (8003ef8 <HAL_RCC_ClockConfig+0x260>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e94:	f7fd fcce 	bl	8001834 <HAL_GetTick>
 8003e98:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e9c:	f7fd fcca 	bl	8001834 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e061      	b.n	8003f76 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb2:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <HAL_RCC_ClockConfig+0x260>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f003 020c 	and.w	r2, r3, #12
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d1eb      	bne.n	8003e9c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <HAL_RCC_ClockConfig+0x25c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d214      	bcs.n	8003efc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed2:	4b08      	ldr	r3, [pc, #32]	; (8003ef4 <HAL_RCC_ClockConfig+0x25c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f023 0207 	bic.w	r2, r3, #7
 8003eda:	4906      	ldr	r1, [pc, #24]	; (8003ef4 <HAL_RCC_ClockConfig+0x25c>)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee2:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <HAL_RCC_ClockConfig+0x25c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d005      	beq.n	8003efc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e040      	b.n	8003f76 <HAL_RCC_ClockConfig+0x2de>
 8003ef4:	40022000 	.word	0x40022000
 8003ef8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f08:	4b1d      	ldr	r3, [pc, #116]	; (8003f80 <HAL_RCC_ClockConfig+0x2e8>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	491a      	ldr	r1, [pc, #104]	; (8003f80 <HAL_RCC_ClockConfig+0x2e8>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d009      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f26:	4b16      	ldr	r3, [pc, #88]	; (8003f80 <HAL_RCC_ClockConfig+0x2e8>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4912      	ldr	r1, [pc, #72]	; (8003f80 <HAL_RCC_ClockConfig+0x2e8>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003f3a:	f000 f829 	bl	8003f90 <HAL_RCC_GetSysClockFreq>
 8003f3e:	4601      	mov	r1, r0
 8003f40:	4b0f      	ldr	r3, [pc, #60]	; (8003f80 <HAL_RCC_ClockConfig+0x2e8>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f48:	22f0      	movs	r2, #240	; 0xf0
 8003f4a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	fa92 f2a2 	rbit	r2, r2
 8003f52:	60fa      	str	r2, [r7, #12]
  return result;
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	fab2 f282 	clz	r2, r2
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	40d3      	lsrs	r3, r2
 8003f5e:	4a09      	ldr	r2, [pc, #36]	; (8003f84 <HAL_RCC_ClockConfig+0x2ec>)
 8003f60:	5cd3      	ldrb	r3, [r2, r3]
 8003f62:	fa21 f303 	lsr.w	r3, r1, r3
 8003f66:	4a08      	ldr	r2, [pc, #32]	; (8003f88 <HAL_RCC_ClockConfig+0x2f0>)
 8003f68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003f6a:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <HAL_RCC_ClockConfig+0x2f4>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fd fc1c 	bl	80017ac <HAL_InitTick>
  
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3778      	adds	r7, #120	; 0x78
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40021000 	.word	0x40021000
 8003f84:	0800bb0c 	.word	0x0800bb0c
 8003f88:	20000000 	.word	0x20000000
 8003f8c:	20000024 	.word	0x20000024

08003f90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60bb      	str	r3, [r7, #8]
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003faa:	4b1f      	ldr	r3, [pc, #124]	; (8004028 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f003 030c 	and.w	r3, r3, #12
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d002      	beq.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x30>
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	d003      	beq.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x36>
 8003fbe:	e029      	b.n	8004014 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fc0:	4b1a      	ldr	r3, [pc, #104]	; (800402c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fc2:	613b      	str	r3, [r7, #16]
      break;
 8003fc4:	e029      	b.n	800401a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	0c9b      	lsrs	r3, r3, #18
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	4a18      	ldr	r2, [pc, #96]	; (8004030 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003fd0:	5cd3      	ldrb	r3, [r2, r3]
 8003fd2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003fd4:	4b14      	ldr	r3, [pc, #80]	; (8004028 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	4a15      	ldr	r2, [pc, #84]	; (8004034 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003fde:	5cd3      	ldrb	r3, [r2, r3]
 8003fe0:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003fec:	4a0f      	ldr	r2, [pc, #60]	; (800402c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	fb02 f303 	mul.w	r3, r2, r3
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	e007      	b.n	800400e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ffe:	4a0b      	ldr	r2, [pc, #44]	; (800402c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	fbb2 f2f3 	udiv	r2, r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	fb02 f303 	mul.w	r3, r2, r3
 800400c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	613b      	str	r3, [r7, #16]
      break;
 8004012:	e002      	b.n	800401a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004014:	4b05      	ldr	r3, [pc, #20]	; (800402c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004016:	613b      	str	r3, [r7, #16]
      break;
 8004018:	bf00      	nop
    }
  }
  return sysclockfreq;
 800401a:	693b      	ldr	r3, [r7, #16]
}
 800401c:	4618      	mov	r0, r3
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	40021000 	.word	0x40021000
 800402c:	007a1200 	.word	0x007a1200
 8004030:	0800bb24 	.word	0x0800bb24
 8004034:	0800bb34 	.word	0x0800bb34

08004038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800403c:	4b03      	ldr	r3, [pc, #12]	; (800404c <HAL_RCC_GetHCLKFreq+0x14>)
 800403e:	681b      	ldr	r3, [r3, #0]
}
 8004040:	4618      	mov	r0, r3
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	20000000 	.word	0x20000000

08004050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004056:	f7ff ffef 	bl	8004038 <HAL_RCC_GetHCLKFreq>
 800405a:	4601      	mov	r1, r0
 800405c:	4b0b      	ldr	r3, [pc, #44]	; (800408c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004064:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004068:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	fa92 f2a2 	rbit	r2, r2
 8004070:	603a      	str	r2, [r7, #0]
  return result;
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	fab2 f282 	clz	r2, r2
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	40d3      	lsrs	r3, r2
 800407c:	4a04      	ldr	r2, [pc, #16]	; (8004090 <HAL_RCC_GetPCLK1Freq+0x40>)
 800407e:	5cd3      	ldrb	r3, [r2, r3]
 8004080:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004084:	4618      	mov	r0, r3
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40021000 	.word	0x40021000
 8004090:	0800bb1c 	.word	0x0800bb1c

08004094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800409a:	f7ff ffcd 	bl	8004038 <HAL_RCC_GetHCLKFreq>
 800409e:	4601      	mov	r1, r0
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80040a8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80040ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	fa92 f2a2 	rbit	r2, r2
 80040b4:	603a      	str	r2, [r7, #0]
  return result;
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	fab2 f282 	clz	r2, r2
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	40d3      	lsrs	r3, r2
 80040c0:	4a04      	ldr	r2, [pc, #16]	; (80040d4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80040c2:	5cd3      	ldrb	r3, [r2, r3]
 80040c4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80040c8:	4618      	mov	r0, r3
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40021000 	.word	0x40021000
 80040d4:	0800bb1c 	.word	0x0800bb1c

080040d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b092      	sub	sp, #72	; 0x48
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80040e8:	2300      	movs	r3, #0
 80040ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 80d4 	beq.w	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040fc:	4b4e      	ldr	r3, [pc, #312]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10e      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004108:	4b4b      	ldr	r3, [pc, #300]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	4a4a      	ldr	r2, [pc, #296]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800410e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004112:	61d3      	str	r3, [r2, #28]
 8004114:	4b48      	ldr	r3, [pc, #288]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004120:	2301      	movs	r3, #1
 8004122:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004126:	4b45      	ldr	r3, [pc, #276]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412e:	2b00      	cmp	r3, #0
 8004130:	d118      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004132:	4b42      	ldr	r3, [pc, #264]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a41      	ldr	r2, [pc, #260]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800413c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800413e:	f7fd fb79 	bl	8001834 <HAL_GetTick>
 8004142:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004144:	e008      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004146:	f7fd fb75 	bl	8001834 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b64      	cmp	r3, #100	; 0x64
 8004152:	d901      	bls.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e1d6      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004158:	4b38      	ldr	r3, [pc, #224]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f0      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004164:	4b34      	ldr	r3, [pc, #208]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800416c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800416e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 8084 	beq.w	800427e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004180:	429a      	cmp	r2, r3
 8004182:	d07c      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004184:	4b2c      	ldr	r3, [pc, #176]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800418c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800418e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004192:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004196:	fa93 f3a3 	rbit	r3, r3
 800419a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800419c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800419e:	fab3 f383 	clz	r3, r3
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	461a      	mov	r2, r3
 80041a6:	4b26      	ldr	r3, [pc, #152]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041a8:	4413      	add	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	461a      	mov	r2, r3
 80041ae:	2301      	movs	r3, #1
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ba:	fa93 f3a3 	rbit	r3, r3
 80041be:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80041c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041c2:	fab3 f383 	clz	r3, r3
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	461a      	mov	r2, r3
 80041ca:	4b1d      	ldr	r3, [pc, #116]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041cc:	4413      	add	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	461a      	mov	r2, r3
 80041d2:	2300      	movs	r3, #0
 80041d4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041d6:	4a18      	ldr	r2, [pc, #96]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041da:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d04b      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e6:	f7fd fb25 	bl	8001834 <HAL_GetTick>
 80041ea:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ec:	e00a      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ee:	f7fd fb21 	bl	8001834 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d901      	bls.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e180      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004204:	2302      	movs	r3, #2
 8004206:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420a:	fa93 f3a3 	rbit	r3, r3
 800420e:	627b      	str	r3, [r7, #36]	; 0x24
 8004210:	2302      	movs	r3, #2
 8004212:	623b      	str	r3, [r7, #32]
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	fa93 f3a3 	rbit	r3, r3
 800421a:	61fb      	str	r3, [r7, #28]
  return result;
 800421c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421e:	fab3 f383 	clz	r3, r3
 8004222:	b2db      	uxtb	r3, r3
 8004224:	095b      	lsrs	r3, r3, #5
 8004226:	b2db      	uxtb	r3, r3
 8004228:	f043 0302 	orr.w	r3, r3, #2
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d108      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004232:	4b01      	ldr	r3, [pc, #4]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	e00d      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004238:	40021000 	.word	0x40021000
 800423c:	40007000 	.word	0x40007000
 8004240:	10908100 	.word	0x10908100
 8004244:	2302      	movs	r3, #2
 8004246:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	fa93 f3a3 	rbit	r3, r3
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	4ba0      	ldr	r3, [pc, #640]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	2202      	movs	r2, #2
 8004256:	613a      	str	r2, [r7, #16]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	fa92 f2a2 	rbit	r2, r2
 800425e:	60fa      	str	r2, [r7, #12]
  return result;
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	fab2 f282 	clz	r2, r2
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	f002 021f 	and.w	r2, r2, #31
 8004272:	2101      	movs	r1, #1
 8004274:	fa01 f202 	lsl.w	r2, r1, r2
 8004278:	4013      	ands	r3, r2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0b7      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800427e:	4b95      	ldr	r3, [pc, #596]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	4992      	ldr	r1, [pc, #584]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800428c:	4313      	orrs	r3, r2
 800428e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004290:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004294:	2b01      	cmp	r3, #1
 8004296:	d105      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004298:	4b8e      	ldr	r3, [pc, #568]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	4a8d      	ldr	r2, [pc, #564]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800429e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d008      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042b0:	4b88      	ldr	r3, [pc, #544]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b4:	f023 0203 	bic.w	r2, r3, #3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	4985      	ldr	r1, [pc, #532]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d008      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042ce:	4b81      	ldr	r3, [pc, #516]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	497e      	ldr	r1, [pc, #504]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042ec:	4b79      	ldr	r3, [pc, #484]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	4976      	ldr	r1, [pc, #472]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0320 	and.w	r3, r3, #32
 8004306:	2b00      	cmp	r3, #0
 8004308:	d008      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800430a:	4b72      	ldr	r3, [pc, #456]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	f023 0210 	bic.w	r2, r3, #16
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	496f      	ldr	r1, [pc, #444]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004318:	4313      	orrs	r3, r2
 800431a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d008      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004328:	4b6a      	ldr	r3, [pc, #424]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004334:	4967      	ldr	r1, [pc, #412]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004336:	4313      	orrs	r3, r2
 8004338:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004342:	2b00      	cmp	r3, #0
 8004344:	d008      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004346:	4b63      	ldr	r3, [pc, #396]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434a:	f023 0220 	bic.w	r2, r3, #32
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	4960      	ldr	r1, [pc, #384]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004354:	4313      	orrs	r3, r2
 8004356:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d008      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004364:	4b5b      	ldr	r3, [pc, #364]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	4958      	ldr	r1, [pc, #352]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004372:	4313      	orrs	r3, r2
 8004374:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	2b00      	cmp	r3, #0
 8004380:	d008      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004382:	4b54      	ldr	r3, [pc, #336]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004386:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	4951      	ldr	r1, [pc, #324]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004390:	4313      	orrs	r3, r2
 8004392:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043a0:	4b4c      	ldr	r3, [pc, #304]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	4949      	ldr	r1, [pc, #292]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d008      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043be:	4b45      	ldr	r3, [pc, #276]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	4942      	ldr	r1, [pc, #264]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d008      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80043dc:	4b3d      	ldr	r3, [pc, #244]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e8:	493a      	ldr	r1, [pc, #232]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d008      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80043fa:	4b36      	ldr	r3, [pc, #216]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fe:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	4933      	ldr	r1, [pc, #204]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004408:	4313      	orrs	r3, r2
 800440a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d008      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004418:	4b2e      	ldr	r3, [pc, #184]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004424:	492b      	ldr	r1, [pc, #172]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004426:	4313      	orrs	r3, r2
 8004428:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d008      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004436:	4b27      	ldr	r3, [pc, #156]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	4924      	ldr	r1, [pc, #144]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004444:	4313      	orrs	r3, r2
 8004446:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d008      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004454:	4b1f      	ldr	r3, [pc, #124]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004458:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	491c      	ldr	r1, [pc, #112]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004462:	4313      	orrs	r3, r2
 8004464:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d008      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004472:	4b18      	ldr	r3, [pc, #96]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447e:	4915      	ldr	r1, [pc, #84]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004480:	4313      	orrs	r3, r2
 8004482:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d008      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004490:	4b10      	ldr	r3, [pc, #64]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004494:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449c:	490d      	ldr	r1, [pc, #52]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d008      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80044ae:	4b09      	ldr	r3, [pc, #36]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ba:	4906      	ldr	r1, [pc, #24]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00c      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80044cc:	4b01      	ldr	r3, [pc, #4]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	e002      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80044d2:	bf00      	nop
 80044d4:	40021000 	.word	0x40021000
 80044d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e0:	490b      	ldr	r1, [pc, #44]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d008      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80044f2:	4b07      	ldr	r3, [pc, #28]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fe:	4904      	ldr	r1, [pc, #16]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004500:	4313      	orrs	r3, r2
 8004502:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3748      	adds	r7, #72	; 0x48
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	40021000 	.word	0x40021000

08004514 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e040      	b.n	80045a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800452a:	2b00      	cmp	r3, #0
 800452c:	d106      	bne.n	800453c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7fc fe64 	bl	8001204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2224      	movs	r2, #36	; 0x24
 8004540:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0201 	bic.w	r2, r2, #1
 8004550:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fa86 	bl	8004a6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f8af 	bl	80046c4 <UART_SetConfig>
 8004566:	4603      	mov	r3, r0
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e01b      	b.n	80045a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800457e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800458e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0201 	orr.w	r2, r2, #1
 800459e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 fb05 	bl	8004bb0 <UART_CheckIdleState>
 80045a6:	4603      	mov	r3, r0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3708      	adds	r7, #8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b08a      	sub	sp, #40	; 0x28
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	4613      	mov	r3, r2
 80045be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045c4:	2b20      	cmp	r3, #32
 80045c6:	d178      	bne.n	80046ba <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <HAL_UART_Transmit+0x24>
 80045ce:	88fb      	ldrh	r3, [r7, #6]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e071      	b.n	80046bc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2221      	movs	r2, #33	; 0x21
 80045e4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045e6:	f7fd f925 	bl	8001834 <HAL_GetTick>
 80045ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	88fa      	ldrh	r2, [r7, #6]
 80045f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	88fa      	ldrh	r2, [r7, #6]
 80045f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004604:	d108      	bne.n	8004618 <HAL_UART_Transmit+0x68>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d104      	bne.n	8004618 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800460e:	2300      	movs	r3, #0
 8004610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	61bb      	str	r3, [r7, #24]
 8004616:	e003      	b.n	8004620 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800461c:	2300      	movs	r3, #0
 800461e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004620:	e030      	b.n	8004684 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	2200      	movs	r2, #0
 800462a:	2180      	movs	r1, #128	; 0x80
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 fb67 	bl	8004d00 <UART_WaitOnFlagUntilTimeout>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d004      	beq.n	8004642 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2220      	movs	r2, #32
 800463c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e03c      	b.n	80046bc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10b      	bne.n	8004660 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	881a      	ldrh	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004654:	b292      	uxth	r2, r2
 8004656:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	3302      	adds	r3, #2
 800465c:	61bb      	str	r3, [r7, #24]
 800465e:	e008      	b.n	8004672 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	781a      	ldrb	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	b292      	uxth	r2, r2
 800466a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	3301      	adds	r3, #1
 8004670:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800468a:	b29b      	uxth	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1c8      	bne.n	8004622 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2200      	movs	r2, #0
 8004698:	2140      	movs	r1, #64	; 0x40
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 fb30 	bl	8004d00 <UART_WaitOnFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d004      	beq.n	80046b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2220      	movs	r2, #32
 80046aa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e005      	b.n	80046bc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2220      	movs	r2, #32
 80046b4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	e000      	b.n	80046bc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80046ba:	2302      	movs	r3, #2
  }
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3720      	adds	r7, #32
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	4baa      	ldr	r3, [pc, #680]	; (8004998 <UART_SetConfig+0x2d4>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6812      	ldr	r2, [r2, #0]
 80046f6:	6979      	ldr	r1, [r7, #20]
 80046f8:	430b      	orrs	r3, r1
 80046fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	4313      	orrs	r3, r2
 8004720:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	430a      	orrs	r2, r1
 8004734:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a98      	ldr	r2, [pc, #608]	; (800499c <UART_SetConfig+0x2d8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d120      	bne.n	8004782 <UART_SetConfig+0xbe>
 8004740:	4b97      	ldr	r3, [pc, #604]	; (80049a0 <UART_SetConfig+0x2dc>)
 8004742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004744:	f003 0303 	and.w	r3, r3, #3
 8004748:	2b03      	cmp	r3, #3
 800474a:	d817      	bhi.n	800477c <UART_SetConfig+0xb8>
 800474c:	a201      	add	r2, pc, #4	; (adr r2, 8004754 <UART_SetConfig+0x90>)
 800474e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004752:	bf00      	nop
 8004754:	08004765 	.word	0x08004765
 8004758:	08004771 	.word	0x08004771
 800475c:	08004777 	.word	0x08004777
 8004760:	0800476b 	.word	0x0800476b
 8004764:	2301      	movs	r3, #1
 8004766:	77fb      	strb	r3, [r7, #31]
 8004768:	e0b5      	b.n	80048d6 <UART_SetConfig+0x212>
 800476a:	2302      	movs	r3, #2
 800476c:	77fb      	strb	r3, [r7, #31]
 800476e:	e0b2      	b.n	80048d6 <UART_SetConfig+0x212>
 8004770:	2304      	movs	r3, #4
 8004772:	77fb      	strb	r3, [r7, #31]
 8004774:	e0af      	b.n	80048d6 <UART_SetConfig+0x212>
 8004776:	2308      	movs	r3, #8
 8004778:	77fb      	strb	r3, [r7, #31]
 800477a:	e0ac      	b.n	80048d6 <UART_SetConfig+0x212>
 800477c:	2310      	movs	r3, #16
 800477e:	77fb      	strb	r3, [r7, #31]
 8004780:	e0a9      	b.n	80048d6 <UART_SetConfig+0x212>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a87      	ldr	r2, [pc, #540]	; (80049a4 <UART_SetConfig+0x2e0>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d124      	bne.n	80047d6 <UART_SetConfig+0x112>
 800478c:	4b84      	ldr	r3, [pc, #528]	; (80049a0 <UART_SetConfig+0x2dc>)
 800478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004790:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004794:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004798:	d011      	beq.n	80047be <UART_SetConfig+0xfa>
 800479a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800479e:	d817      	bhi.n	80047d0 <UART_SetConfig+0x10c>
 80047a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047a4:	d011      	beq.n	80047ca <UART_SetConfig+0x106>
 80047a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047aa:	d811      	bhi.n	80047d0 <UART_SetConfig+0x10c>
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <UART_SetConfig+0xf4>
 80047b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b4:	d006      	beq.n	80047c4 <UART_SetConfig+0x100>
 80047b6:	e00b      	b.n	80047d0 <UART_SetConfig+0x10c>
 80047b8:	2300      	movs	r3, #0
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e08b      	b.n	80048d6 <UART_SetConfig+0x212>
 80047be:	2302      	movs	r3, #2
 80047c0:	77fb      	strb	r3, [r7, #31]
 80047c2:	e088      	b.n	80048d6 <UART_SetConfig+0x212>
 80047c4:	2304      	movs	r3, #4
 80047c6:	77fb      	strb	r3, [r7, #31]
 80047c8:	e085      	b.n	80048d6 <UART_SetConfig+0x212>
 80047ca:	2308      	movs	r3, #8
 80047cc:	77fb      	strb	r3, [r7, #31]
 80047ce:	e082      	b.n	80048d6 <UART_SetConfig+0x212>
 80047d0:	2310      	movs	r3, #16
 80047d2:	77fb      	strb	r3, [r7, #31]
 80047d4:	e07f      	b.n	80048d6 <UART_SetConfig+0x212>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a73      	ldr	r2, [pc, #460]	; (80049a8 <UART_SetConfig+0x2e4>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d124      	bne.n	800482a <UART_SetConfig+0x166>
 80047e0:	4b6f      	ldr	r3, [pc, #444]	; (80049a0 <UART_SetConfig+0x2dc>)
 80047e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80047e8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80047ec:	d011      	beq.n	8004812 <UART_SetConfig+0x14e>
 80047ee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80047f2:	d817      	bhi.n	8004824 <UART_SetConfig+0x160>
 80047f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80047f8:	d011      	beq.n	800481e <UART_SetConfig+0x15a>
 80047fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80047fe:	d811      	bhi.n	8004824 <UART_SetConfig+0x160>
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <UART_SetConfig+0x148>
 8004804:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004808:	d006      	beq.n	8004818 <UART_SetConfig+0x154>
 800480a:	e00b      	b.n	8004824 <UART_SetConfig+0x160>
 800480c:	2300      	movs	r3, #0
 800480e:	77fb      	strb	r3, [r7, #31]
 8004810:	e061      	b.n	80048d6 <UART_SetConfig+0x212>
 8004812:	2302      	movs	r3, #2
 8004814:	77fb      	strb	r3, [r7, #31]
 8004816:	e05e      	b.n	80048d6 <UART_SetConfig+0x212>
 8004818:	2304      	movs	r3, #4
 800481a:	77fb      	strb	r3, [r7, #31]
 800481c:	e05b      	b.n	80048d6 <UART_SetConfig+0x212>
 800481e:	2308      	movs	r3, #8
 8004820:	77fb      	strb	r3, [r7, #31]
 8004822:	e058      	b.n	80048d6 <UART_SetConfig+0x212>
 8004824:	2310      	movs	r3, #16
 8004826:	77fb      	strb	r3, [r7, #31]
 8004828:	e055      	b.n	80048d6 <UART_SetConfig+0x212>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a5f      	ldr	r2, [pc, #380]	; (80049ac <UART_SetConfig+0x2e8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d124      	bne.n	800487e <UART_SetConfig+0x1ba>
 8004834:	4b5a      	ldr	r3, [pc, #360]	; (80049a0 <UART_SetConfig+0x2dc>)
 8004836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004838:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800483c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004840:	d011      	beq.n	8004866 <UART_SetConfig+0x1a2>
 8004842:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004846:	d817      	bhi.n	8004878 <UART_SetConfig+0x1b4>
 8004848:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800484c:	d011      	beq.n	8004872 <UART_SetConfig+0x1ae>
 800484e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004852:	d811      	bhi.n	8004878 <UART_SetConfig+0x1b4>
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <UART_SetConfig+0x19c>
 8004858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800485c:	d006      	beq.n	800486c <UART_SetConfig+0x1a8>
 800485e:	e00b      	b.n	8004878 <UART_SetConfig+0x1b4>
 8004860:	2300      	movs	r3, #0
 8004862:	77fb      	strb	r3, [r7, #31]
 8004864:	e037      	b.n	80048d6 <UART_SetConfig+0x212>
 8004866:	2302      	movs	r3, #2
 8004868:	77fb      	strb	r3, [r7, #31]
 800486a:	e034      	b.n	80048d6 <UART_SetConfig+0x212>
 800486c:	2304      	movs	r3, #4
 800486e:	77fb      	strb	r3, [r7, #31]
 8004870:	e031      	b.n	80048d6 <UART_SetConfig+0x212>
 8004872:	2308      	movs	r3, #8
 8004874:	77fb      	strb	r3, [r7, #31]
 8004876:	e02e      	b.n	80048d6 <UART_SetConfig+0x212>
 8004878:	2310      	movs	r3, #16
 800487a:	77fb      	strb	r3, [r7, #31]
 800487c:	e02b      	b.n	80048d6 <UART_SetConfig+0x212>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a4b      	ldr	r2, [pc, #300]	; (80049b0 <UART_SetConfig+0x2ec>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d124      	bne.n	80048d2 <UART_SetConfig+0x20e>
 8004888:	4b45      	ldr	r3, [pc, #276]	; (80049a0 <UART_SetConfig+0x2dc>)
 800488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004890:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004894:	d011      	beq.n	80048ba <UART_SetConfig+0x1f6>
 8004896:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800489a:	d817      	bhi.n	80048cc <UART_SetConfig+0x208>
 800489c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048a0:	d011      	beq.n	80048c6 <UART_SetConfig+0x202>
 80048a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048a6:	d811      	bhi.n	80048cc <UART_SetConfig+0x208>
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <UART_SetConfig+0x1f0>
 80048ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048b0:	d006      	beq.n	80048c0 <UART_SetConfig+0x1fc>
 80048b2:	e00b      	b.n	80048cc <UART_SetConfig+0x208>
 80048b4:	2300      	movs	r3, #0
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e00d      	b.n	80048d6 <UART_SetConfig+0x212>
 80048ba:	2302      	movs	r3, #2
 80048bc:	77fb      	strb	r3, [r7, #31]
 80048be:	e00a      	b.n	80048d6 <UART_SetConfig+0x212>
 80048c0:	2304      	movs	r3, #4
 80048c2:	77fb      	strb	r3, [r7, #31]
 80048c4:	e007      	b.n	80048d6 <UART_SetConfig+0x212>
 80048c6:	2308      	movs	r3, #8
 80048c8:	77fb      	strb	r3, [r7, #31]
 80048ca:	e004      	b.n	80048d6 <UART_SetConfig+0x212>
 80048cc:	2310      	movs	r3, #16
 80048ce:	77fb      	strb	r3, [r7, #31]
 80048d0:	e001      	b.n	80048d6 <UART_SetConfig+0x212>
 80048d2:	2310      	movs	r3, #16
 80048d4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048de:	d16b      	bne.n	80049b8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80048e0:	7ffb      	ldrb	r3, [r7, #31]
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d827      	bhi.n	8004936 <UART_SetConfig+0x272>
 80048e6:	a201      	add	r2, pc, #4	; (adr r2, 80048ec <UART_SetConfig+0x228>)
 80048e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ec:	08004911 	.word	0x08004911
 80048f0:	08004919 	.word	0x08004919
 80048f4:	08004921 	.word	0x08004921
 80048f8:	08004937 	.word	0x08004937
 80048fc:	08004927 	.word	0x08004927
 8004900:	08004937 	.word	0x08004937
 8004904:	08004937 	.word	0x08004937
 8004908:	08004937 	.word	0x08004937
 800490c:	0800492f 	.word	0x0800492f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004910:	f7ff fb9e 	bl	8004050 <HAL_RCC_GetPCLK1Freq>
 8004914:	61b8      	str	r0, [r7, #24]
        break;
 8004916:	e013      	b.n	8004940 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004918:	f7ff fbbc 	bl	8004094 <HAL_RCC_GetPCLK2Freq>
 800491c:	61b8      	str	r0, [r7, #24]
        break;
 800491e:	e00f      	b.n	8004940 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004920:	4b24      	ldr	r3, [pc, #144]	; (80049b4 <UART_SetConfig+0x2f0>)
 8004922:	61bb      	str	r3, [r7, #24]
        break;
 8004924:	e00c      	b.n	8004940 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004926:	f7ff fb33 	bl	8003f90 <HAL_RCC_GetSysClockFreq>
 800492a:	61b8      	str	r0, [r7, #24]
        break;
 800492c:	e008      	b.n	8004940 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004932:	61bb      	str	r3, [r7, #24]
        break;
 8004934:	e004      	b.n	8004940 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	77bb      	strb	r3, [r7, #30]
        break;
 800493e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 8084 	beq.w	8004a50 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	005a      	lsls	r2, r3, #1
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	085b      	lsrs	r3, r3, #1
 8004952:	441a      	add	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	fbb2 f3f3 	udiv	r3, r2, r3
 800495c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	2b0f      	cmp	r3, #15
 8004962:	d916      	bls.n	8004992 <UART_SetConfig+0x2ce>
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800496a:	d212      	bcs.n	8004992 <UART_SetConfig+0x2ce>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	b29b      	uxth	r3, r3
 8004970:	f023 030f 	bic.w	r3, r3, #15
 8004974:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	085b      	lsrs	r3, r3, #1
 800497a:	b29b      	uxth	r3, r3
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	b29a      	uxth	r2, r3
 8004982:	89fb      	ldrh	r3, [r7, #14]
 8004984:	4313      	orrs	r3, r2
 8004986:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	89fa      	ldrh	r2, [r7, #14]
 800498e:	60da      	str	r2, [r3, #12]
 8004990:	e05e      	b.n	8004a50 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	77bb      	strb	r3, [r7, #30]
 8004996:	e05b      	b.n	8004a50 <UART_SetConfig+0x38c>
 8004998:	efff69f3 	.word	0xefff69f3
 800499c:	40013800 	.word	0x40013800
 80049a0:	40021000 	.word	0x40021000
 80049a4:	40004400 	.word	0x40004400
 80049a8:	40004800 	.word	0x40004800
 80049ac:	40004c00 	.word	0x40004c00
 80049b0:	40005000 	.word	0x40005000
 80049b4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 80049b8:	7ffb      	ldrb	r3, [r7, #31]
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	d827      	bhi.n	8004a0e <UART_SetConfig+0x34a>
 80049be:	a201      	add	r2, pc, #4	; (adr r2, 80049c4 <UART_SetConfig+0x300>)
 80049c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c4:	080049e9 	.word	0x080049e9
 80049c8:	080049f1 	.word	0x080049f1
 80049cc:	080049f9 	.word	0x080049f9
 80049d0:	08004a0f 	.word	0x08004a0f
 80049d4:	080049ff 	.word	0x080049ff
 80049d8:	08004a0f 	.word	0x08004a0f
 80049dc:	08004a0f 	.word	0x08004a0f
 80049e0:	08004a0f 	.word	0x08004a0f
 80049e4:	08004a07 	.word	0x08004a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049e8:	f7ff fb32 	bl	8004050 <HAL_RCC_GetPCLK1Freq>
 80049ec:	61b8      	str	r0, [r7, #24]
        break;
 80049ee:	e013      	b.n	8004a18 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049f0:	f7ff fb50 	bl	8004094 <HAL_RCC_GetPCLK2Freq>
 80049f4:	61b8      	str	r0, [r7, #24]
        break;
 80049f6:	e00f      	b.n	8004a18 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049f8:	4b1b      	ldr	r3, [pc, #108]	; (8004a68 <UART_SetConfig+0x3a4>)
 80049fa:	61bb      	str	r3, [r7, #24]
        break;
 80049fc:	e00c      	b.n	8004a18 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049fe:	f7ff fac7 	bl	8003f90 <HAL_RCC_GetSysClockFreq>
 8004a02:	61b8      	str	r0, [r7, #24]
        break;
 8004a04:	e008      	b.n	8004a18 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a0a:	61bb      	str	r3, [r7, #24]
        break;
 8004a0c:	e004      	b.n	8004a18 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	77bb      	strb	r3, [r7, #30]
        break;
 8004a16:	bf00      	nop
    }

    if (pclk != 0U)
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d018      	beq.n	8004a50 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	085a      	lsrs	r2, r3, #1
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	441a      	add	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	2b0f      	cmp	r3, #15
 8004a36:	d909      	bls.n	8004a4c <UART_SetConfig+0x388>
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a3e:	d205      	bcs.n	8004a4c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	60da      	str	r2, [r3, #12]
 8004a4a:	e001      	b.n	8004a50 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004a5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3720      	adds	r7, #32
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	007a1200 	.word	0x007a1200

08004a6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	f003 0308 	and.w	r3, r3, #8
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00a      	beq.n	8004ada <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	f003 0310 	and.w	r3, r3, #16
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00a      	beq.n	8004b1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	f003 0320 	and.w	r3, r3, #32
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01a      	beq.n	8004b82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b6a:	d10a      	bne.n	8004b82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	605a      	str	r2, [r3, #4]
  }
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b098      	sub	sp, #96	; 0x60
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bc0:	f7fc fe38 	bl	8001834 <HAL_GetTick>
 8004bc4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d12e      	bne.n	8004c32 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f88c 	bl	8004d00 <UART_WaitOnFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d021      	beq.n	8004c32 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c02:	653b      	str	r3, [r7, #80]	; 0x50
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c0c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c0e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c14:	e841 2300 	strex	r3, r2, [r1]
 8004c18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e6      	bne.n	8004bee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2220      	movs	r2, #32
 8004c24:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e062      	b.n	8004cf8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d149      	bne.n	8004cd4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f856 	bl	8004d00 <UART_WaitOnFlagUntilTimeout>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d03c      	beq.n	8004cd4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	e853 3f00 	ldrex	r3, [r3]
 8004c66:	623b      	str	r3, [r7, #32]
   return(result);
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	461a      	mov	r2, r3
 8004c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c78:	633b      	str	r3, [r7, #48]	; 0x30
 8004c7a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c80:	e841 2300 	strex	r3, r2, [r1]
 8004c84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1e6      	bne.n	8004c5a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3308      	adds	r3, #8
 8004c92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	e853 3f00 	ldrex	r3, [r3]
 8004c9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0301 	bic.w	r3, r3, #1
 8004ca2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3308      	adds	r3, #8
 8004caa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cac:	61fa      	str	r2, [r7, #28]
 8004cae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb0:	69b9      	ldr	r1, [r7, #24]
 8004cb2:	69fa      	ldr	r2, [r7, #28]
 8004cb4:	e841 2300 	strex	r3, r2, [r1]
 8004cb8:	617b      	str	r3, [r7, #20]
   return(result);
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1e5      	bne.n	8004c8c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e011      	b.n	8004cf8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3758      	adds	r7, #88	; 0x58
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	603b      	str	r3, [r7, #0]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d10:	e04f      	b.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d18:	d04b      	beq.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d1a:	f7fc fd8b 	bl	8001834 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d302      	bcc.n	8004d30 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e04e      	b.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0304 	and.w	r3, r3, #4
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d037      	beq.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b80      	cmp	r3, #128	; 0x80
 8004d46:	d034      	beq.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2b40      	cmp	r3, #64	; 0x40
 8004d4c:	d031      	beq.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	f003 0308 	and.w	r3, r3, #8
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d110      	bne.n	8004d7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2208      	movs	r2, #8
 8004d62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 f838 	bl	8004dda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2208      	movs	r2, #8
 8004d6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e029      	b.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d8c:	d111      	bne.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 f81e 	bl	8004dda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e00f      	b.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	69da      	ldr	r2, [r3, #28]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	bf0c      	ite	eq
 8004dc2:	2301      	moveq	r3, #1
 8004dc4:	2300      	movne	r3, #0
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	461a      	mov	r2, r3
 8004dca:	79fb      	ldrb	r3, [r7, #7]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d0a0      	beq.n	8004d12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b095      	sub	sp, #84	; 0x54
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dea:	e853 3f00 	ldrex	r3, [r3]
 8004dee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004df6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e00:	643b      	str	r3, [r7, #64]	; 0x40
 8004e02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e08:	e841 2300 	strex	r3, r2, [r1]
 8004e0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e6      	bne.n	8004de2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3308      	adds	r3, #8
 8004e1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	e853 3f00 	ldrex	r3, [r3]
 8004e22:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f023 0301 	bic.w	r3, r3, #1
 8004e2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3308      	adds	r3, #8
 8004e32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e3c:	e841 2300 	strex	r3, r2, [r1]
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e5      	bne.n	8004e14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d118      	bne.n	8004e82 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f023 0310 	bic.w	r3, r3, #16
 8004e64:	647b      	str	r3, [r7, #68]	; 0x44
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e6e:	61bb      	str	r3, [r7, #24]
 8004e70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e72:	6979      	ldr	r1, [r7, #20]
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e6      	bne.n	8004e50 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e96:	bf00      	nop
 8004e98:	3754      	adds	r7, #84	; 0x54
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eaa:	f3ef 8305 	mrs	r3, IPSR
 8004eae:	60bb      	str	r3, [r7, #8]
  return(result);
 8004eb0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10f      	bne.n	8004ed6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eba:	607b      	str	r3, [r7, #4]
  return(result);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d109      	bne.n	8004ed6 <osKernelInitialize+0x32>
 8004ec2:	4b11      	ldr	r3, [pc, #68]	; (8004f08 <osKernelInitialize+0x64>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d109      	bne.n	8004ede <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004eca:	f3ef 8311 	mrs	r3, BASEPRI
 8004ece:	603b      	str	r3, [r7, #0]
  return(result);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004ed6:	f06f 0305 	mvn.w	r3, #5
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	e00c      	b.n	8004ef8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ede:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <osKernelInitialize+0x64>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d105      	bne.n	8004ef2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004ee6:	4b08      	ldr	r3, [pc, #32]	; (8004f08 <osKernelInitialize+0x64>)
 8004ee8:	2201      	movs	r2, #1
 8004eea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004eec:	2300      	movs	r3, #0
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	e002      	b.n	8004ef8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	20000238 	.word	0x20000238

08004f0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f12:	f3ef 8305 	mrs	r3, IPSR
 8004f16:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f18:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10f      	bne.n	8004f3e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f22:	607b      	str	r3, [r7, #4]
  return(result);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d109      	bne.n	8004f3e <osKernelStart+0x32>
 8004f2a:	4b11      	ldr	r3, [pc, #68]	; (8004f70 <osKernelStart+0x64>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d109      	bne.n	8004f46 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f32:	f3ef 8311 	mrs	r3, BASEPRI
 8004f36:	603b      	str	r3, [r7, #0]
  return(result);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004f3e:	f06f 0305 	mvn.w	r3, #5
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	e00e      	b.n	8004f64 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f46:	4b0a      	ldr	r3, [pc, #40]	; (8004f70 <osKernelStart+0x64>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d107      	bne.n	8004f5e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004f4e:	4b08      	ldr	r3, [pc, #32]	; (8004f70 <osKernelStart+0x64>)
 8004f50:	2202      	movs	r2, #2
 8004f52:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004f54:	f002 f86e 	bl	8007034 <vTaskStartScheduler>
      stat = osOK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	e002      	b.n	8004f64 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004f64:	68fb      	ldr	r3, [r7, #12]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20000238 	.word	0x20000238

08004f74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b092      	sub	sp, #72	; 0x48
 8004f78:	af04      	add	r7, sp, #16
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004f80:	2300      	movs	r3, #0
 8004f82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f84:	f3ef 8305 	mrs	r3, IPSR
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f040 8094 	bne.w	80050ba <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f92:	f3ef 8310 	mrs	r3, PRIMASK
 8004f96:	623b      	str	r3, [r7, #32]
  return(result);
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f040 808d 	bne.w	80050ba <osThreadNew+0x146>
 8004fa0:	4b48      	ldr	r3, [pc, #288]	; (80050c4 <osThreadNew+0x150>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d106      	bne.n	8004fb6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004fa8:	f3ef 8311 	mrs	r3, BASEPRI
 8004fac:	61fb      	str	r3, [r7, #28]
  return(result);
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f040 8082 	bne.w	80050ba <osThreadNew+0x146>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d07e      	beq.n	80050ba <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004fbc:	2380      	movs	r3, #128	; 0x80
 8004fbe:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004fc0:	2318      	movs	r3, #24
 8004fc2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004fc8:	f107 031b 	add.w	r3, r7, #27
 8004fcc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004fce:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d045      	beq.n	8005066 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <osThreadNew+0x74>
        name = attr->name;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d008      	beq.n	800500e <osThreadNew+0x9a>
 8004ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffe:	2b38      	cmp	r3, #56	; 0x38
 8005000:	d805      	bhi.n	800500e <osThreadNew+0x9a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <osThreadNew+0x9e>
        return (NULL);
 800500e:	2300      	movs	r3, #0
 8005010:	e054      	b.n	80050bc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	089b      	lsrs	r3, r3, #2
 8005020:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00e      	beq.n	8005048 <osThreadNew+0xd4>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	2b5b      	cmp	r3, #91	; 0x5b
 8005030:	d90a      	bls.n	8005048 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005036:	2b00      	cmp	r3, #0
 8005038:	d006      	beq.n	8005048 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <osThreadNew+0xd4>
        mem = 1;
 8005042:	2301      	movs	r3, #1
 8005044:	62bb      	str	r3, [r7, #40]	; 0x28
 8005046:	e010      	b.n	800506a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10c      	bne.n	800506a <osThreadNew+0xf6>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d108      	bne.n	800506a <osThreadNew+0xf6>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d104      	bne.n	800506a <osThreadNew+0xf6>
          mem = 0;
 8005060:	2300      	movs	r3, #0
 8005062:	62bb      	str	r3, [r7, #40]	; 0x28
 8005064:	e001      	b.n	800506a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005066:	2300      	movs	r3, #0
 8005068:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506c:	2b01      	cmp	r3, #1
 800506e:	d110      	bne.n	8005092 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005078:	9202      	str	r2, [sp, #8]
 800507a:	9301      	str	r3, [sp, #4]
 800507c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005084:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f001 fe08 	bl	8006c9c <xTaskCreateStatic>
 800508c:	4603      	mov	r3, r0
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	e013      	b.n	80050ba <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005094:	2b00      	cmp	r3, #0
 8005096:	d110      	bne.n	80050ba <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509a:	b29a      	uxth	r2, r3
 800509c:	f107 0314 	add.w	r3, r7, #20
 80050a0:	9301      	str	r3, [sp, #4]
 80050a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f001 fe52 	bl	8006d54 <xTaskCreate>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d001      	beq.n	80050ba <osThreadNew+0x146>
          hTask = NULL;
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80050ba:	697b      	ldr	r3, [r7, #20]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3738      	adds	r7, #56	; 0x38
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	20000238 	.word	0x20000238

080050c8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050d0:	f3ef 8305 	mrs	r3, IPSR
 80050d4:	613b      	str	r3, [r7, #16]
  return(result);
 80050d6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10f      	bne.n	80050fc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050dc:	f3ef 8310 	mrs	r3, PRIMASK
 80050e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d109      	bne.n	80050fc <osDelay+0x34>
 80050e8:	4b0d      	ldr	r3, [pc, #52]	; (8005120 <osDelay+0x58>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d109      	bne.n	8005104 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80050f0:	f3ef 8311 	mrs	r3, BASEPRI
 80050f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <osDelay+0x3c>
    stat = osErrorISR;
 80050fc:	f06f 0305 	mvn.w	r3, #5
 8005100:	617b      	str	r3, [r7, #20]
 8005102:	e007      	b.n	8005114 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005104:	2300      	movs	r3, #0
 8005106:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <osDelay+0x4c>
      vTaskDelay(ticks);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f001 ff5c 	bl	8006fcc <vTaskDelay>
    }
  }

  return (stat);
 8005114:	697b      	ldr	r3, [r7, #20]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	20000238 	.word	0x20000238

08005124 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005124:	b580      	push	{r7, lr}
 8005126:	b08a      	sub	sp, #40	; 0x28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800512c:	2300      	movs	r3, #0
 800512e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005130:	f3ef 8305 	mrs	r3, IPSR
 8005134:	613b      	str	r3, [r7, #16]
  return(result);
 8005136:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8005138:	2b00      	cmp	r3, #0
 800513a:	f040 8085 	bne.w	8005248 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800513e:	f3ef 8310 	mrs	r3, PRIMASK
 8005142:	60fb      	str	r3, [r7, #12]
  return(result);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d17e      	bne.n	8005248 <osMutexNew+0x124>
 800514a:	4b42      	ldr	r3, [pc, #264]	; (8005254 <osMutexNew+0x130>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b02      	cmp	r3, #2
 8005150:	d105      	bne.n	800515e <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005152:	f3ef 8311 	mrs	r3, BASEPRI
 8005156:	60bb      	str	r3, [r7, #8]
  return(result);
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d174      	bne.n	8005248 <osMutexNew+0x124>
    if (attr != NULL) {
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <osMutexNew+0x48>
      type = attr->attr_bits;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	623b      	str	r3, [r7, #32]
 800516a:	e001      	b.n	8005170 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <osMutexNew+0x5c>
      rmtx = 1U;
 800517a:	2301      	movs	r3, #1
 800517c:	61fb      	str	r3, [r7, #28]
 800517e:	e001      	b.n	8005184 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	f003 0308 	and.w	r3, r3, #8
 800518a:	2b00      	cmp	r3, #0
 800518c:	d15c      	bne.n	8005248 <osMutexNew+0x124>
      mem = -1;
 800518e:	f04f 33ff 	mov.w	r3, #4294967295
 8005192:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d015      	beq.n	80051c6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d006      	beq.n	80051b0 <osMutexNew+0x8c>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	2b4f      	cmp	r3, #79	; 0x4f
 80051a8:	d902      	bls.n	80051b0 <osMutexNew+0x8c>
          mem = 1;
 80051aa:	2301      	movs	r3, #1
 80051ac:	61bb      	str	r3, [r7, #24]
 80051ae:	e00c      	b.n	80051ca <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d108      	bne.n	80051ca <osMutexNew+0xa6>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d104      	bne.n	80051ca <osMutexNew+0xa6>
            mem = 0;
 80051c0:	2300      	movs	r3, #0
 80051c2:	61bb      	str	r3, [r7, #24]
 80051c4:	e001      	b.n	80051ca <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80051c6:	2300      	movs	r3, #0
 80051c8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d112      	bne.n	80051f6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d007      	beq.n	80051e6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	4619      	mov	r1, r3
 80051dc:	2004      	movs	r0, #4
 80051de:	f000 fe09 	bl	8005df4 <xQueueCreateMutexStatic>
 80051e2:	6278      	str	r0, [r7, #36]	; 0x24
 80051e4:	e016      	b.n	8005214 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	4619      	mov	r1, r3
 80051ec:	2001      	movs	r0, #1
 80051ee:	f000 fe01 	bl	8005df4 <xQueueCreateMutexStatic>
 80051f2:	6278      	str	r0, [r7, #36]	; 0x24
 80051f4:	e00e      	b.n	8005214 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10b      	bne.n	8005214 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d004      	beq.n	800520c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8005202:	2004      	movs	r0, #4
 8005204:	f000 fdde 	bl	8005dc4 <xQueueCreateMutex>
 8005208:	6278      	str	r0, [r7, #36]	; 0x24
 800520a:	e003      	b.n	8005214 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800520c:	2001      	movs	r0, #1
 800520e:	f000 fdd9 	bl	8005dc4 <xQueueCreateMutex>
 8005212:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00c      	beq.n	8005234 <osMutexNew+0x110>
        if (attr != NULL) {
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <osMutexNew+0x104>
          name = attr->name;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	617b      	str	r3, [r7, #20]
 8005226:	e001      	b.n	800522c <osMutexNew+0x108>
        } else {
          name = NULL;
 8005228:	2300      	movs	r3, #0
 800522a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800522c:	6979      	ldr	r1, [r7, #20]
 800522e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005230:	f001 fcac 	bl	8006b8c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	2b00      	cmp	r3, #0
 8005238:	d006      	beq.n	8005248 <osMutexNew+0x124>
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	f043 0301 	orr.w	r3, r3, #1
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800524a:	4618      	mov	r0, r3
 800524c:	3728      	adds	r7, #40	; 0x28
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	20000238 	.word	0x20000238

08005258 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f023 0301 	bic.w	r3, r3, #1
 8005268:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8005272:	2300      	movs	r3, #0
 8005274:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005276:	f3ef 8305 	mrs	r3, IPSR
 800527a:	613b      	str	r3, [r7, #16]
  return(result);
 800527c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10f      	bne.n	80052a2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005282:	f3ef 8310 	mrs	r3, PRIMASK
 8005286:	60fb      	str	r3, [r7, #12]
  return(result);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d109      	bne.n	80052a2 <osMutexAcquire+0x4a>
 800528e:	4b20      	ldr	r3, [pc, #128]	; (8005310 <osMutexAcquire+0xb8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b02      	cmp	r3, #2
 8005294:	d109      	bne.n	80052aa <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005296:	f3ef 8311 	mrs	r3, BASEPRI
 800529a:	60bb      	str	r3, [r7, #8]
  return(result);
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <osMutexAcquire+0x52>
    stat = osErrorISR;
 80052a2:	f06f 0305 	mvn.w	r3, #5
 80052a6:	61fb      	str	r3, [r7, #28]
 80052a8:	e02c      	b.n	8005304 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d103      	bne.n	80052b8 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80052b0:	f06f 0303 	mvn.w	r3, #3
 80052b4:	61fb      	str	r3, [r7, #28]
 80052b6:	e025      	b.n	8005304 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d011      	beq.n	80052e2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80052be:	6839      	ldr	r1, [r7, #0]
 80052c0:	69b8      	ldr	r0, [r7, #24]
 80052c2:	f000 fde6 	bl	8005e92 <xQueueTakeMutexRecursive>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d01b      	beq.n	8005304 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80052d2:	f06f 0301 	mvn.w	r3, #1
 80052d6:	61fb      	str	r3, [r7, #28]
 80052d8:	e014      	b.n	8005304 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80052da:	f06f 0302 	mvn.w	r3, #2
 80052de:	61fb      	str	r3, [r7, #28]
 80052e0:	e010      	b.n	8005304 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80052e2:	6839      	ldr	r1, [r7, #0]
 80052e4:	69b8      	ldr	r0, [r7, #24]
 80052e6:	f001 f979 	bl	80065dc <xQueueSemaphoreTake>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d009      	beq.n	8005304 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80052f6:	f06f 0301 	mvn.w	r3, #1
 80052fa:	61fb      	str	r3, [r7, #28]
 80052fc:	e002      	b.n	8005304 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80052fe:	f06f 0302 	mvn.w	r3, #2
 8005302:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005304:	69fb      	ldr	r3, [r7, #28]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3720      	adds	r7, #32
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	20000238 	.word	0x20000238

08005314 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005314:	b580      	push	{r7, lr}
 8005316:	b088      	sub	sp, #32
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f023 0301 	bic.w	r3, r3, #1
 8005322:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800532c:	2300      	movs	r3, #0
 800532e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005330:	f3ef 8305 	mrs	r3, IPSR
 8005334:	613b      	str	r3, [r7, #16]
  return(result);
 8005336:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10f      	bne.n	800535c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800533c:	f3ef 8310 	mrs	r3, PRIMASK
 8005340:	60fb      	str	r3, [r7, #12]
  return(result);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d109      	bne.n	800535c <osMutexRelease+0x48>
 8005348:	4b19      	ldr	r3, [pc, #100]	; (80053b0 <osMutexRelease+0x9c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b02      	cmp	r3, #2
 800534e:	d109      	bne.n	8005364 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005350:	f3ef 8311 	mrs	r3, BASEPRI
 8005354:	60bb      	str	r3, [r7, #8]
  return(result);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d003      	beq.n	8005364 <osMutexRelease+0x50>
    stat = osErrorISR;
 800535c:	f06f 0305 	mvn.w	r3, #5
 8005360:	61fb      	str	r3, [r7, #28]
 8005362:	e01f      	b.n	80053a4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d103      	bne.n	8005372 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800536a:	f06f 0303 	mvn.w	r3, #3
 800536e:	61fb      	str	r3, [r7, #28]
 8005370:	e018      	b.n	80053a4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d009      	beq.n	800538c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005378:	69b8      	ldr	r0, [r7, #24]
 800537a:	f000 fd56 	bl	8005e2a <xQueueGiveMutexRecursive>
 800537e:	4603      	mov	r3, r0
 8005380:	2b01      	cmp	r3, #1
 8005382:	d00f      	beq.n	80053a4 <osMutexRelease+0x90>
        stat = osErrorResource;
 8005384:	f06f 0302 	mvn.w	r3, #2
 8005388:	61fb      	str	r3, [r7, #28]
 800538a:	e00b      	b.n	80053a4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800538c:	2300      	movs	r3, #0
 800538e:	2200      	movs	r2, #0
 8005390:	2100      	movs	r1, #0
 8005392:	69b8      	ldr	r0, [r7, #24]
 8005394:	f000 fe1e 	bl	8005fd4 <xQueueGenericSend>
 8005398:	4603      	mov	r3, r0
 800539a:	2b01      	cmp	r3, #1
 800539c:	d002      	beq.n	80053a4 <osMutexRelease+0x90>
        stat = osErrorResource;
 800539e:	f06f 0302 	mvn.w	r3, #2
 80053a2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80053a4:	69fb      	ldr	r3, [r7, #28]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3720      	adds	r7, #32
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	20000238 	.word	0x20000238

080053b4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08c      	sub	sp, #48	; 0x30
 80053b8:	af02      	add	r7, sp, #8
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80053c0:	2300      	movs	r3, #0
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053c4:	f3ef 8305 	mrs	r3, IPSR
 80053c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80053ca:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f040 8086 	bne.w	80054de <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053d2:	f3ef 8310 	mrs	r3, PRIMASK
 80053d6:	617b      	str	r3, [r7, #20]
  return(result);
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d17f      	bne.n	80054de <osSemaphoreNew+0x12a>
 80053de:	4b42      	ldr	r3, [pc, #264]	; (80054e8 <osSemaphoreNew+0x134>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d105      	bne.n	80053f2 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053e6:	f3ef 8311 	mrs	r3, BASEPRI
 80053ea:	613b      	str	r3, [r7, #16]
  return(result);
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d175      	bne.n	80054de <osSemaphoreNew+0x12a>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d072      	beq.n	80054de <osSemaphoreNew+0x12a>
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d86e      	bhi.n	80054de <osSemaphoreNew+0x12a>
    mem = -1;
 8005400:	f04f 33ff 	mov.w	r3, #4294967295
 8005404:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d015      	beq.n	8005438 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d006      	beq.n	8005422 <osSemaphoreNew+0x6e>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	2b4f      	cmp	r3, #79	; 0x4f
 800541a:	d902      	bls.n	8005422 <osSemaphoreNew+0x6e>
        mem = 1;
 800541c:	2301      	movs	r3, #1
 800541e:	623b      	str	r3, [r7, #32]
 8005420:	e00c      	b.n	800543c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d108      	bne.n	800543c <osSemaphoreNew+0x88>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d104      	bne.n	800543c <osSemaphoreNew+0x88>
          mem = 0;
 8005432:	2300      	movs	r3, #0
 8005434:	623b      	str	r3, [r7, #32]
 8005436:	e001      	b.n	800543c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8005438:	2300      	movs	r3, #0
 800543a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005442:	d04c      	beq.n	80054de <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d128      	bne.n	800549c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d10a      	bne.n	8005466 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	2203      	movs	r2, #3
 8005456:	9200      	str	r2, [sp, #0]
 8005458:	2200      	movs	r2, #0
 800545a:	2100      	movs	r1, #0
 800545c:	2001      	movs	r0, #1
 800545e:	f000 fbbf 	bl	8005be0 <xQueueGenericCreateStatic>
 8005462:	6278      	str	r0, [r7, #36]	; 0x24
 8005464:	e005      	b.n	8005472 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8005466:	2203      	movs	r2, #3
 8005468:	2100      	movs	r1, #0
 800546a:	2001      	movs	r0, #1
 800546c:	f000 fc2f 	bl	8005cce <xQueueGenericCreate>
 8005470:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	2b00      	cmp	r3, #0
 8005476:	d022      	beq.n	80054be <osSemaphoreNew+0x10a>
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d01f      	beq.n	80054be <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800547e:	2300      	movs	r3, #0
 8005480:	2200      	movs	r2, #0
 8005482:	2100      	movs	r1, #0
 8005484:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005486:	f000 fda5 	bl	8005fd4 <xQueueGenericSend>
 800548a:	4603      	mov	r3, r0
 800548c:	2b01      	cmp	r3, #1
 800548e:	d016      	beq.n	80054be <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8005490:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005492:	f001 fa2f 	bl	80068f4 <vQueueDelete>
            hSemaphore = NULL;
 8005496:	2300      	movs	r3, #0
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
 800549a:	e010      	b.n	80054be <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d108      	bne.n	80054b4 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	461a      	mov	r2, r3
 80054a8:	68b9      	ldr	r1, [r7, #8]
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f000 fd27 	bl	8005efe <xQueueCreateCountingSemaphoreStatic>
 80054b0:	6278      	str	r0, [r7, #36]	; 0x24
 80054b2:	e004      	b.n	80054be <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80054b4:	68b9      	ldr	r1, [r7, #8]
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 fd58 	bl	8005f6c <xQueueCreateCountingSemaphore>
 80054bc:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00c      	beq.n	80054de <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <osSemaphoreNew+0x11e>
          name = attr->name;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	61fb      	str	r3, [r7, #28]
 80054d0:	e001      	b.n	80054d6 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80054d6:	69f9      	ldr	r1, [r7, #28]
 80054d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054da:	f001 fb57 	bl	8006b8c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3728      	adds	r7, #40	; 0x28
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	20000238 	.word	0x20000238

080054ec <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b088      	sub	sp, #32
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d103      	bne.n	800550c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005504:	f06f 0303 	mvn.w	r3, #3
 8005508:	61fb      	str	r3, [r7, #28]
 800550a:	e04b      	b.n	80055a4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800550c:	f3ef 8305 	mrs	r3, IPSR
 8005510:	617b      	str	r3, [r7, #20]
  return(result);
 8005512:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10f      	bne.n	8005538 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005518:	f3ef 8310 	mrs	r3, PRIMASK
 800551c:	613b      	str	r3, [r7, #16]
  return(result);
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d109      	bne.n	8005538 <osSemaphoreAcquire+0x4c>
 8005524:	4b22      	ldr	r3, [pc, #136]	; (80055b0 <osSemaphoreAcquire+0xc4>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b02      	cmp	r3, #2
 800552a:	d128      	bne.n	800557e <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800552c:	f3ef 8311 	mrs	r3, BASEPRI
 8005530:	60fb      	str	r3, [r7, #12]
  return(result);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d022      	beq.n	800557e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800553e:	f06f 0303 	mvn.w	r3, #3
 8005542:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005544:	e02d      	b.n	80055a2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8005546:	2300      	movs	r3, #0
 8005548:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800554a:	f107 0308 	add.w	r3, r7, #8
 800554e:	461a      	mov	r2, r3
 8005550:	2100      	movs	r1, #0
 8005552:	69b8      	ldr	r0, [r7, #24]
 8005554:	f001 f94e 	bl	80067f4 <xQueueReceiveFromISR>
 8005558:	4603      	mov	r3, r0
 800555a:	2b01      	cmp	r3, #1
 800555c:	d003      	beq.n	8005566 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800555e:	f06f 0302 	mvn.w	r3, #2
 8005562:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005564:	e01d      	b.n	80055a2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01a      	beq.n	80055a2 <osSemaphoreAcquire+0xb6>
 800556c:	4b11      	ldr	r3, [pc, #68]	; (80055b4 <osSemaphoreAcquire+0xc8>)
 800556e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800557c:	e011      	b.n	80055a2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800557e:	6839      	ldr	r1, [r7, #0]
 8005580:	69b8      	ldr	r0, [r7, #24]
 8005582:	f001 f82b 	bl	80065dc <xQueueSemaphoreTake>
 8005586:	4603      	mov	r3, r0
 8005588:	2b01      	cmp	r3, #1
 800558a:	d00b      	beq.n	80055a4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8005592:	f06f 0301 	mvn.w	r3, #1
 8005596:	61fb      	str	r3, [r7, #28]
 8005598:	e004      	b.n	80055a4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800559a:	f06f 0302 	mvn.w	r3, #2
 800559e:	61fb      	str	r3, [r7, #28]
 80055a0:	e000      	b.n	80055a4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80055a2:	bf00      	nop
      }
    }
  }

  return (stat);
 80055a4:	69fb      	ldr	r3, [r7, #28]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3720      	adds	r7, #32
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20000238 	.word	0x20000238
 80055b4:	e000ed04 	.word	0xe000ed04

080055b8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80055c4:	2300      	movs	r3, #0
 80055c6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d103      	bne.n	80055d6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80055ce:	f06f 0303 	mvn.w	r3, #3
 80055d2:	61fb      	str	r3, [r7, #28]
 80055d4:	e03e      	b.n	8005654 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055d6:	f3ef 8305 	mrs	r3, IPSR
 80055da:	617b      	str	r3, [r7, #20]
  return(result);
 80055dc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10f      	bne.n	8005602 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055e2:	f3ef 8310 	mrs	r3, PRIMASK
 80055e6:	613b      	str	r3, [r7, #16]
  return(result);
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d109      	bne.n	8005602 <osSemaphoreRelease+0x4a>
 80055ee:	4b1c      	ldr	r3, [pc, #112]	; (8005660 <osSemaphoreRelease+0xa8>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d120      	bne.n	8005638 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055f6:	f3ef 8311 	mrs	r3, BASEPRI
 80055fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d01a      	beq.n	8005638 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8005602:	2300      	movs	r3, #0
 8005604:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005606:	f107 0308 	add.w	r3, r7, #8
 800560a:	4619      	mov	r1, r3
 800560c:	69b8      	ldr	r0, [r7, #24]
 800560e:	f000 fe77 	bl	8006300 <xQueueGiveFromISR>
 8005612:	4603      	mov	r3, r0
 8005614:	2b01      	cmp	r3, #1
 8005616:	d003      	beq.n	8005620 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8005618:	f06f 0302 	mvn.w	r3, #2
 800561c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800561e:	e018      	b.n	8005652 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d015      	beq.n	8005652 <osSemaphoreRelease+0x9a>
 8005626:	4b0f      	ldr	r3, [pc, #60]	; (8005664 <osSemaphoreRelease+0xac>)
 8005628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005636:	e00c      	b.n	8005652 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005638:	2300      	movs	r3, #0
 800563a:	2200      	movs	r2, #0
 800563c:	2100      	movs	r1, #0
 800563e:	69b8      	ldr	r0, [r7, #24]
 8005640:	f000 fcc8 	bl	8005fd4 <xQueueGenericSend>
 8005644:	4603      	mov	r3, r0
 8005646:	2b01      	cmp	r3, #1
 8005648:	d004      	beq.n	8005654 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800564a:	f06f 0302 	mvn.w	r3, #2
 800564e:	61fb      	str	r3, [r7, #28]
 8005650:	e000      	b.n	8005654 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005652:	bf00      	nop
    }
  }

  return (stat);
 8005654:	69fb      	ldr	r3, [r7, #28]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3720      	adds	r7, #32
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20000238 	.word	0x20000238
 8005664:	e000ed04 	.word	0xe000ed04

08005668 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005668:	b580      	push	{r7, lr}
 800566a:	b08c      	sub	sp, #48	; 0x30
 800566c:	af02      	add	r7, sp, #8
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005674:	2300      	movs	r3, #0
 8005676:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005678:	f3ef 8305 	mrs	r3, IPSR
 800567c:	61bb      	str	r3, [r7, #24]
  return(result);
 800567e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005680:	2b00      	cmp	r3, #0
 8005682:	d16f      	bne.n	8005764 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005684:	f3ef 8310 	mrs	r3, PRIMASK
 8005688:	617b      	str	r3, [r7, #20]
  return(result);
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d169      	bne.n	8005764 <osMessageQueueNew+0xfc>
 8005690:	4b37      	ldr	r3, [pc, #220]	; (8005770 <osMessageQueueNew+0x108>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b02      	cmp	r3, #2
 8005696:	d105      	bne.n	80056a4 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005698:	f3ef 8311 	mrs	r3, BASEPRI
 800569c:	613b      	str	r3, [r7, #16]
  return(result);
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d15f      	bne.n	8005764 <osMessageQueueNew+0xfc>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d05c      	beq.n	8005764 <osMessageQueueNew+0xfc>
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d059      	beq.n	8005764 <osMessageQueueNew+0xfc>
    mem = -1;
 80056b0:	f04f 33ff 	mov.w	r3, #4294967295
 80056b4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d029      	beq.n	8005710 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d012      	beq.n	80056ea <osMessageQueueNew+0x82>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	2b4f      	cmp	r3, #79	; 0x4f
 80056ca:	d90e      	bls.n	80056ea <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00a      	beq.n	80056ea <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	695a      	ldr	r2, [r3, #20]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	68b9      	ldr	r1, [r7, #8]
 80056dc:	fb01 f303 	mul.w	r3, r1, r3
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d302      	bcc.n	80056ea <osMessageQueueNew+0x82>
        mem = 1;
 80056e4:	2301      	movs	r3, #1
 80056e6:	623b      	str	r3, [r7, #32]
 80056e8:	e014      	b.n	8005714 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d110      	bne.n	8005714 <osMessageQueueNew+0xac>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10c      	bne.n	8005714 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d108      	bne.n	8005714 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d104      	bne.n	8005714 <osMessageQueueNew+0xac>
          mem = 0;
 800570a:	2300      	movs	r3, #0
 800570c:	623b      	str	r3, [r7, #32]
 800570e:	e001      	b.n	8005714 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005710:	2300      	movs	r3, #0
 8005712:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d10b      	bne.n	8005732 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691a      	ldr	r2, [r3, #16]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	2100      	movs	r1, #0
 8005724:	9100      	str	r1, [sp, #0]
 8005726:	68b9      	ldr	r1, [r7, #8]
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 fa59 	bl	8005be0 <xQueueGenericCreateStatic>
 800572e:	6278      	str	r0, [r7, #36]	; 0x24
 8005730:	e008      	b.n	8005744 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d105      	bne.n	8005744 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005738:	2200      	movs	r2, #0
 800573a:	68b9      	ldr	r1, [r7, #8]
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 fac6 	bl	8005cce <xQueueGenericCreate>
 8005742:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00c      	beq.n	8005764 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <osMessageQueueNew+0xf0>
        name = attr->name;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	61fb      	str	r3, [r7, #28]
 8005756:	e001      	b.n	800575c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005758:	2300      	movs	r3, #0
 800575a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800575c:	69f9      	ldr	r1, [r7, #28]
 800575e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005760:	f001 fa14 	bl	8006b8c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005766:	4618      	mov	r0, r3
 8005768:	3728      	adds	r7, #40	; 0x28
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	20000238 	.word	0x20000238

08005774 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005774:	b580      	push	{r7, lr}
 8005776:	b08a      	sub	sp, #40	; 0x28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	603b      	str	r3, [r7, #0]
 8005780:	4613      	mov	r3, r2
 8005782:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005788:	2300      	movs	r3, #0
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800578c:	f3ef 8305 	mrs	r3, IPSR
 8005790:	61fb      	str	r3, [r7, #28]
  return(result);
 8005792:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10f      	bne.n	80057b8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005798:	f3ef 8310 	mrs	r3, PRIMASK
 800579c:	61bb      	str	r3, [r7, #24]
  return(result);
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d109      	bne.n	80057b8 <osMessageQueuePut+0x44>
 80057a4:	4b2b      	ldr	r3, [pc, #172]	; (8005854 <osMessageQueuePut+0xe0>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d12e      	bne.n	800580a <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057ac:	f3ef 8311 	mrs	r3, BASEPRI
 80057b0:	617b      	str	r3, [r7, #20]
  return(result);
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d028      	beq.n	800580a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d005      	beq.n	80057ca <osMessageQueuePut+0x56>
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <osMessageQueuePut+0x56>
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80057ca:	f06f 0303 	mvn.w	r3, #3
 80057ce:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80057d0:	e039      	b.n	8005846 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80057d2:	2300      	movs	r3, #0
 80057d4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80057d6:	f107 0210 	add.w	r2, r7, #16
 80057da:	2300      	movs	r3, #0
 80057dc:	68b9      	ldr	r1, [r7, #8]
 80057de:	6a38      	ldr	r0, [r7, #32]
 80057e0:	f000 fcf6 	bl	80061d0 <xQueueGenericSendFromISR>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d003      	beq.n	80057f2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80057ea:	f06f 0302 	mvn.w	r3, #2
 80057ee:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80057f0:	e029      	b.n	8005846 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d026      	beq.n	8005846 <osMessageQueuePut+0xd2>
 80057f8:	4b17      	ldr	r3, [pc, #92]	; (8005858 <osMessageQueuePut+0xe4>)
 80057fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005808:	e01d      	b.n	8005846 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <osMessageQueuePut+0xa2>
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d103      	bne.n	800581e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8005816:	f06f 0303 	mvn.w	r3, #3
 800581a:	627b      	str	r3, [r7, #36]	; 0x24
 800581c:	e014      	b.n	8005848 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800581e:	2300      	movs	r3, #0
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	68b9      	ldr	r1, [r7, #8]
 8005824:	6a38      	ldr	r0, [r7, #32]
 8005826:	f000 fbd5 	bl	8005fd4 <xQueueGenericSend>
 800582a:	4603      	mov	r3, r0
 800582c:	2b01      	cmp	r3, #1
 800582e:	d00b      	beq.n	8005848 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8005836:	f06f 0301 	mvn.w	r3, #1
 800583a:	627b      	str	r3, [r7, #36]	; 0x24
 800583c:	e004      	b.n	8005848 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800583e:	f06f 0302 	mvn.w	r3, #2
 8005842:	627b      	str	r3, [r7, #36]	; 0x24
 8005844:	e000      	b.n	8005848 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005846:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800584a:	4618      	mov	r0, r3
 800584c:	3728      	adds	r7, #40	; 0x28
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	20000238 	.word	0x20000238
 8005858:	e000ed04 	.word	0xe000ed04

0800585c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800585c:	b580      	push	{r7, lr}
 800585e:	b08a      	sub	sp, #40	; 0x28
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800586e:	2300      	movs	r3, #0
 8005870:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005872:	f3ef 8305 	mrs	r3, IPSR
 8005876:	61fb      	str	r3, [r7, #28]
  return(result);
 8005878:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10f      	bne.n	800589e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800587e:	f3ef 8310 	mrs	r3, PRIMASK
 8005882:	61bb      	str	r3, [r7, #24]
  return(result);
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d109      	bne.n	800589e <osMessageQueueGet+0x42>
 800588a:	4b2b      	ldr	r3, [pc, #172]	; (8005938 <osMessageQueueGet+0xdc>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b02      	cmp	r3, #2
 8005890:	d12e      	bne.n	80058f0 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005892:	f3ef 8311 	mrs	r3, BASEPRI
 8005896:	617b      	str	r3, [r7, #20]
  return(result);
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d028      	beq.n	80058f0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d005      	beq.n	80058b0 <osMessageQueueGet+0x54>
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d002      	beq.n	80058b0 <osMessageQueueGet+0x54>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80058b0:	f06f 0303 	mvn.w	r3, #3
 80058b4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80058b6:	e038      	b.n	800592a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80058b8:	2300      	movs	r3, #0
 80058ba:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80058bc:	f107 0310 	add.w	r3, r7, #16
 80058c0:	461a      	mov	r2, r3
 80058c2:	68b9      	ldr	r1, [r7, #8]
 80058c4:	6a38      	ldr	r0, [r7, #32]
 80058c6:	f000 ff95 	bl	80067f4 <xQueueReceiveFromISR>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d003      	beq.n	80058d8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80058d0:	f06f 0302 	mvn.w	r3, #2
 80058d4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80058d6:	e028      	b.n	800592a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d025      	beq.n	800592a <osMessageQueueGet+0xce>
 80058de:	4b17      	ldr	r3, [pc, #92]	; (800593c <osMessageQueueGet+0xe0>)
 80058e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058e4:	601a      	str	r2, [r3, #0]
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80058ee:	e01c      	b.n	800592a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80058f0:	6a3b      	ldr	r3, [r7, #32]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <osMessageQueueGet+0xa0>
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d103      	bne.n	8005904 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80058fc:	f06f 0303 	mvn.w	r3, #3
 8005900:	627b      	str	r3, [r7, #36]	; 0x24
 8005902:	e013      	b.n	800592c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	68b9      	ldr	r1, [r7, #8]
 8005908:	6a38      	ldr	r0, [r7, #32]
 800590a:	f000 fd87 	bl	800641c <xQueueReceive>
 800590e:	4603      	mov	r3, r0
 8005910:	2b01      	cmp	r3, #1
 8005912:	d00b      	beq.n	800592c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800591a:	f06f 0301 	mvn.w	r3, #1
 800591e:	627b      	str	r3, [r7, #36]	; 0x24
 8005920:	e004      	b.n	800592c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8005922:	f06f 0302 	mvn.w	r3, #2
 8005926:	627b      	str	r3, [r7, #36]	; 0x24
 8005928:	e000      	b.n	800592c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800592a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800592e:	4618      	mov	r0, r3
 8005930:	3728      	adds	r7, #40	; 0x28
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20000238 	.word	0x20000238
 800593c:	e000ed04 	.word	0xe000ed04

08005940 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4a07      	ldr	r2, [pc, #28]	; (800596c <vApplicationGetIdleTaskMemory+0x2c>)
 8005950:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	4a06      	ldr	r2, [pc, #24]	; (8005970 <vApplicationGetIdleTaskMemory+0x30>)
 8005956:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2280      	movs	r2, #128	; 0x80
 800595c:	601a      	str	r2, [r3, #0]
}
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	2000023c 	.word	0x2000023c
 8005970:	20000298 	.word	0x20000298

08005974 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4a07      	ldr	r2, [pc, #28]	; (80059a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005984:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	4a06      	ldr	r2, [pc, #24]	; (80059a4 <vApplicationGetTimerTaskMemory+0x30>)
 800598a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005992:	601a      	str	r2, [r3, #0]
}
 8005994:	bf00      	nop
 8005996:	3714      	adds	r7, #20
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	20000498 	.word	0x20000498
 80059a4:	200004f4 	.word	0x200004f4

080059a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f103 0208 	add.w	r2, r3, #8
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f04f 32ff 	mov.w	r2, #4294967295
 80059c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f103 0208 	add.w	r2, r3, #8
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f103 0208 	add.w	r2, r3, #8
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059f6:	bf00      	nop
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a02:	b480      	push	{r7}
 8005a04:	b085      	sub	sp, #20
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	1c5a      	adds	r2, r3, #1
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	601a      	str	r2, [r3, #0]
}
 8005a3e:	bf00      	nop
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b085      	sub	sp, #20
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a60:	d103      	bne.n	8005a6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	e00c      	b.n	8005a84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	e002      	b.n	8005a78 <vListInsert+0x2e>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d2f6      	bcs.n	8005a72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	1c5a      	adds	r2, r3, #1
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	601a      	str	r2, [r3, #0]
}
 8005ab0:	bf00      	nop
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	6892      	ldr	r2, [r2, #8]
 8005ad2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6852      	ldr	r2, [r2, #4]
 8005adc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d103      	bne.n	8005af0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689a      	ldr	r2, [r3, #8]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	1e5a      	subs	r2, r3, #1
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10a      	bne.n	8005b3a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b36:	bf00      	nop
 8005b38:	e7fe      	b.n	8005b38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b3a:	f002 fd03 	bl	8008544 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b46:	68f9      	ldr	r1, [r7, #12]
 8005b48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b4a:	fb01 f303 	mul.w	r3, r1, r3
 8005b4e:	441a      	add	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	68f9      	ldr	r1, [r7, #12]
 8005b6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b70:	fb01 f303 	mul.w	r3, r1, r3
 8005b74:	441a      	add	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	22ff      	movs	r2, #255	; 0xff
 8005b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	22ff      	movs	r2, #255	; 0xff
 8005b86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d114      	bne.n	8005bba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d01a      	beq.n	8005bce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3310      	adds	r3, #16
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f001 fcd7 	bl	8007550 <xTaskRemoveFromEventList>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d012      	beq.n	8005bce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ba8:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <xQueueGenericReset+0xcc>)
 8005baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	e009      	b.n	8005bce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	3310      	adds	r3, #16
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7ff fef2 	bl	80059a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3324      	adds	r3, #36	; 0x24
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7ff feed 	bl	80059a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005bce:	f002 fce9 	bl	80085a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005bd2:	2301      	movs	r3, #1
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	e000ed04 	.word	0xe000ed04

08005be0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b08e      	sub	sp, #56	; 0x38
 8005be4:	af02      	add	r7, sp, #8
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10a      	bne.n	8005c0a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c06:	bf00      	nop
 8005c08:	e7fe      	b.n	8005c08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10a      	bne.n	8005c26 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c22:	bf00      	nop
 8005c24:	e7fe      	b.n	8005c24 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <xQueueGenericCreateStatic+0x52>
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <xQueueGenericCreateStatic+0x56>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e000      	b.n	8005c38 <xQueueGenericCreateStatic+0x58>
 8005c36:	2300      	movs	r3, #0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10a      	bne.n	8005c52 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	623b      	str	r3, [r7, #32]
}
 8005c4e:	bf00      	nop
 8005c50:	e7fe      	b.n	8005c50 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d102      	bne.n	8005c5e <xQueueGenericCreateStatic+0x7e>
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <xQueueGenericCreateStatic+0x82>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e000      	b.n	8005c64 <xQueueGenericCreateStatic+0x84>
 8005c62:	2300      	movs	r3, #0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10a      	bne.n	8005c7e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6c:	f383 8811 	msr	BASEPRI, r3
 8005c70:	f3bf 8f6f 	isb	sy
 8005c74:	f3bf 8f4f 	dsb	sy
 8005c78:	61fb      	str	r3, [r7, #28]
}
 8005c7a:	bf00      	nop
 8005c7c:	e7fe      	b.n	8005c7c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c7e:	2350      	movs	r3, #80	; 0x50
 8005c80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2b50      	cmp	r3, #80	; 0x50
 8005c86:	d00a      	beq.n	8005c9e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	61bb      	str	r3, [r7, #24]
}
 8005c9a:	bf00      	nop
 8005c9c:	e7fe      	b.n	8005c9c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00d      	beq.n	8005cc4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005cb0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	68b9      	ldr	r1, [r7, #8]
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 f843 	bl	8005d4a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3730      	adds	r7, #48	; 0x30
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b08a      	sub	sp, #40	; 0x28
 8005cd2:	af02      	add	r7, sp, #8
 8005cd4:	60f8      	str	r0, [r7, #12]
 8005cd6:	60b9      	str	r1, [r7, #8]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10a      	bne.n	8005cf8 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	613b      	str	r3, [r7, #16]
}
 8005cf4:	bf00      	nop
 8005cf6:	e7fe      	b.n	8005cf6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d102      	bne.n	8005d04 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	61fb      	str	r3, [r7, #28]
 8005d02:	e004      	b.n	8005d0e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	fb02 f303 	mul.w	r3, r2, r3
 8005d0c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	3350      	adds	r3, #80	; 0x50
 8005d12:	4618      	mov	r0, r3
 8005d14:	f002 fd38 	bl	8008788 <pvPortMalloc>
 8005d18:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00f      	beq.n	8005d40 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	3350      	adds	r3, #80	; 0x50
 8005d24:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d2e:	79fa      	ldrb	r2, [r7, #7]
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	9300      	str	r3, [sp, #0]
 8005d34:	4613      	mov	r3, r2
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	68b9      	ldr	r1, [r7, #8]
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 f805 	bl	8005d4a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005d40:	69bb      	ldr	r3, [r7, #24]
	}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3720      	adds	r7, #32
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	60f8      	str	r0, [r7, #12]
 8005d52:	60b9      	str	r1, [r7, #8]
 8005d54:	607a      	str	r2, [r7, #4]
 8005d56:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d103      	bne.n	8005d66 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	e002      	b.n	8005d6c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d78:	2101      	movs	r1, #1
 8005d7a:	69b8      	ldr	r0, [r7, #24]
 8005d7c:	f7ff fec8 	bl	8005b10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	78fa      	ldrb	r2, [r7, #3]
 8005d84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d88:	bf00      	nop
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00e      	beq.n	8005dbc <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005db0:	2300      	movs	r3, #0
 8005db2:	2200      	movs	r2, #0
 8005db4:	2100      	movs	r1, #0
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f90c 	bl	8005fd4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005dbc:	bf00      	nop
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	4603      	mov	r3, r0
 8005dcc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	617b      	str	r3, [r7, #20]
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005dd6:	79fb      	ldrb	r3, [r7, #7]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	6939      	ldr	r1, [r7, #16]
 8005ddc:	6978      	ldr	r0, [r7, #20]
 8005dde:	f7ff ff76 	bl	8005cce <xQueueGenericCreate>
 8005de2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f7ff ffd3 	bl	8005d90 <prvInitialiseMutex>

		return pxNewQueue;
 8005dea:	68fb      	ldr	r3, [r7, #12]
	}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b088      	sub	sp, #32
 8005df8:	af02      	add	r7, sp, #8
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	6039      	str	r1, [r7, #0]
 8005dfe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005e00:	2301      	movs	r3, #1
 8005e02:	617b      	str	r3, [r7, #20]
 8005e04:	2300      	movs	r3, #0
 8005e06:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005e08:	79fb      	ldrb	r3, [r7, #7]
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	6939      	ldr	r1, [r7, #16]
 8005e12:	6978      	ldr	r0, [r7, #20]
 8005e14:	f7ff fee4 	bl	8005be0 <xQueueGenericCreateStatic>
 8005e18:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f7ff ffb8 	bl	8005d90 <prvInitialiseMutex>

		return pxNewQueue;
 8005e20:	68fb      	ldr	r3, [r7, #12]
	}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005e2a:	b590      	push	{r4, r7, lr}
 8005e2c:	b087      	sub	sp, #28
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10a      	bne.n	8005e52 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8005e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	60fb      	str	r3, [r7, #12]
}
 8005e4e:	bf00      	nop
 8005e50:	e7fe      	b.n	8005e50 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	685c      	ldr	r4, [r3, #4]
 8005e56:	f001 fd3f 	bl	80078d8 <xTaskGetCurrentTaskHandle>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	429c      	cmp	r4, r3
 8005e5e:	d111      	bne.n	8005e84 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	1e5a      	subs	r2, r3, #1
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d105      	bne.n	8005e7e <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005e72:	2300      	movs	r3, #0
 8005e74:	2200      	movs	r2, #0
 8005e76:	2100      	movs	r1, #0
 8005e78:	6938      	ldr	r0, [r7, #16]
 8005e7a:	f000 f8ab 	bl	8005fd4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	617b      	str	r3, [r7, #20]
 8005e82:	e001      	b.n	8005e88 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005e84:	2300      	movs	r3, #0
 8005e86:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005e88:	697b      	ldr	r3, [r7, #20]
	}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	371c      	adds	r7, #28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd90      	pop	{r4, r7, pc}

08005e92 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005e92:	b590      	push	{r4, r7, lr}
 8005e94:	b087      	sub	sp, #28
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10a      	bne.n	8005ebc <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	60fb      	str	r3, [r7, #12]
}
 8005eb8:	bf00      	nop
 8005eba:	e7fe      	b.n	8005eba <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	685c      	ldr	r4, [r3, #4]
 8005ec0:	f001 fd0a 	bl	80078d8 <xTaskGetCurrentTaskHandle>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	429c      	cmp	r4, r3
 8005ec8:	d107      	bne.n	8005eda <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	617b      	str	r3, [r7, #20]
 8005ed8:	e00c      	b.n	8005ef4 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005eda:	6839      	ldr	r1, [r7, #0]
 8005edc:	6938      	ldr	r0, [r7, #16]
 8005ede:	f000 fb7d 	bl	80065dc <xQueueSemaphoreTake>
 8005ee2:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d004      	beq.n	8005ef4 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005ef4:	697b      	ldr	r3, [r7, #20]
	}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	371c      	adds	r7, #28
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd90      	pop	{r4, r7, pc}

08005efe <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b08a      	sub	sp, #40	; 0x28
 8005f02:	af02      	add	r7, sp, #8
 8005f04:	60f8      	str	r0, [r7, #12]
 8005f06:	60b9      	str	r1, [r7, #8]
 8005f08:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10a      	bne.n	8005f26 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	61bb      	str	r3, [r7, #24]
}
 8005f22:	bf00      	nop
 8005f24:	e7fe      	b.n	8005f24 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d90a      	bls.n	8005f44 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	617b      	str	r3, [r7, #20]
}
 8005f40:	bf00      	nop
 8005f42:	e7fe      	b.n	8005f42 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005f44:	2302      	movs	r3, #2
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f7ff fe46 	bl	8005be0 <xQueueGenericCreateStatic>
 8005f54:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d002      	beq.n	8005f62 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005f62:	69fb      	ldr	r3, [r7, #28]
	}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3720      	adds	r7, #32
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10a      	bne.n	8005f92 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	613b      	str	r3, [r7, #16]
}
 8005f8e:	bf00      	nop
 8005f90:	e7fe      	b.n	8005f90 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d90a      	bls.n	8005fb0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9e:	f383 8811 	msr	BASEPRI, r3
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	60fb      	str	r3, [r7, #12]
}
 8005fac:	bf00      	nop
 8005fae:	e7fe      	b.n	8005fae <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7ff fe8a 	bl	8005cce <xQueueGenericCreate>
 8005fba:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d002      	beq.n	8005fc8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005fc8:	697b      	ldr	r3, [r7, #20]
	}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3718      	adds	r7, #24
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
	...

08005fd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08e      	sub	sp, #56	; 0x38
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
 8005fe0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10a      	bne.n	8006006 <xQueueGenericSend+0x32>
	__asm volatile
 8005ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff4:	f383 8811 	msr	BASEPRI, r3
 8005ff8:	f3bf 8f6f 	isb	sy
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006002:	bf00      	nop
 8006004:	e7fe      	b.n	8006004 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d103      	bne.n	8006014 <xQueueGenericSend+0x40>
 800600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <xQueueGenericSend+0x44>
 8006014:	2301      	movs	r3, #1
 8006016:	e000      	b.n	800601a <xQueueGenericSend+0x46>
 8006018:	2300      	movs	r3, #0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10a      	bne.n	8006034 <xQueueGenericSend+0x60>
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006030:	bf00      	nop
 8006032:	e7fe      	b.n	8006032 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	2b02      	cmp	r3, #2
 8006038:	d103      	bne.n	8006042 <xQueueGenericSend+0x6e>
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603e:	2b01      	cmp	r3, #1
 8006040:	d101      	bne.n	8006046 <xQueueGenericSend+0x72>
 8006042:	2301      	movs	r3, #1
 8006044:	e000      	b.n	8006048 <xQueueGenericSend+0x74>
 8006046:	2300      	movs	r3, #0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10a      	bne.n	8006062 <xQueueGenericSend+0x8e>
	__asm volatile
 800604c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	623b      	str	r3, [r7, #32]
}
 800605e:	bf00      	nop
 8006060:	e7fe      	b.n	8006060 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006062:	f001 fc49 	bl	80078f8 <xTaskGetSchedulerState>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d102      	bne.n	8006072 <xQueueGenericSend+0x9e>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <xQueueGenericSend+0xa2>
 8006072:	2301      	movs	r3, #1
 8006074:	e000      	b.n	8006078 <xQueueGenericSend+0xa4>
 8006076:	2300      	movs	r3, #0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10a      	bne.n	8006092 <xQueueGenericSend+0xbe>
	__asm volatile
 800607c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	61fb      	str	r3, [r7, #28]
}
 800608e:	bf00      	nop
 8006090:	e7fe      	b.n	8006090 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006092:	f002 fa57 	bl	8008544 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800609a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800609e:	429a      	cmp	r2, r3
 80060a0:	d302      	bcc.n	80060a8 <xQueueGenericSend+0xd4>
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d129      	bne.n	80060fc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	68b9      	ldr	r1, [r7, #8]
 80060ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060ae:	f000 fc5c 	bl	800696a <prvCopyDataToQueue>
 80060b2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d010      	beq.n	80060de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060be:	3324      	adds	r3, #36	; 0x24
 80060c0:	4618      	mov	r0, r3
 80060c2:	f001 fa45 	bl	8007550 <xTaskRemoveFromEventList>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d013      	beq.n	80060f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80060cc:	4b3f      	ldr	r3, [pc, #252]	; (80061cc <xQueueGenericSend+0x1f8>)
 80060ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	e00a      	b.n	80060f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80060de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d007      	beq.n	80060f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80060e4:	4b39      	ldr	r3, [pc, #228]	; (80061cc <xQueueGenericSend+0x1f8>)
 80060e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ea:	601a      	str	r2, [r3, #0]
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80060f4:	f002 fa56 	bl	80085a4 <vPortExitCritical>
				return pdPASS;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e063      	b.n	80061c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d103      	bne.n	800610a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006102:	f002 fa4f 	bl	80085a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006106:	2300      	movs	r3, #0
 8006108:	e05c      	b.n	80061c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800610a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800610c:	2b00      	cmp	r3, #0
 800610e:	d106      	bne.n	800611e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006110:	f107 0314 	add.w	r3, r7, #20
 8006114:	4618      	mov	r0, r3
 8006116:	f001 fa7f 	bl	8007618 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800611a:	2301      	movs	r3, #1
 800611c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800611e:	f002 fa41 	bl	80085a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006122:	f000 ffed 	bl	8007100 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006126:	f002 fa0d 	bl	8008544 <vPortEnterCritical>
 800612a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006130:	b25b      	sxtb	r3, r3
 8006132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006136:	d103      	bne.n	8006140 <xQueueGenericSend+0x16c>
 8006138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613a:	2200      	movs	r2, #0
 800613c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006142:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006146:	b25b      	sxtb	r3, r3
 8006148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614c:	d103      	bne.n	8006156 <xQueueGenericSend+0x182>
 800614e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006156:	f002 fa25 	bl	80085a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800615a:	1d3a      	adds	r2, r7, #4
 800615c:	f107 0314 	add.w	r3, r7, #20
 8006160:	4611      	mov	r1, r2
 8006162:	4618      	mov	r0, r3
 8006164:	f001 fa6e 	bl	8007644 <xTaskCheckForTimeOut>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d124      	bne.n	80061b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800616e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006170:	f000 fcf3 	bl	8006b5a <prvIsQueueFull>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d018      	beq.n	80061ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800617a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617c:	3310      	adds	r3, #16
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	4611      	mov	r1, r2
 8006182:	4618      	mov	r0, r3
 8006184:	f001 f994 	bl	80074b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800618a:	f000 fc7e 	bl	8006a8a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800618e:	f000 ffc5 	bl	800711c <xTaskResumeAll>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	f47f af7c 	bne.w	8006092 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800619a:	4b0c      	ldr	r3, [pc, #48]	; (80061cc <xQueueGenericSend+0x1f8>)
 800619c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	e772      	b.n	8006092 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80061ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061ae:	f000 fc6c 	bl	8006a8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061b2:	f000 ffb3 	bl	800711c <xTaskResumeAll>
 80061b6:	e76c      	b.n	8006092 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80061b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061ba:	f000 fc66 	bl	8006a8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061be:	f000 ffad 	bl	800711c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80061c2:	2300      	movs	r3, #0
		}
	}
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3738      	adds	r7, #56	; 0x38
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	e000ed04 	.word	0xe000ed04

080061d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b08e      	sub	sp, #56	; 0x38
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
 80061dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80061e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10a      	bne.n	80061fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061fa:	bf00      	nop
 80061fc:	e7fe      	b.n	80061fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d103      	bne.n	800620c <xQueueGenericSendFromISR+0x3c>
 8006204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <xQueueGenericSendFromISR+0x40>
 800620c:	2301      	movs	r3, #1
 800620e:	e000      	b.n	8006212 <xQueueGenericSendFromISR+0x42>
 8006210:	2300      	movs	r3, #0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10a      	bne.n	800622c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	623b      	str	r3, [r7, #32]
}
 8006228:	bf00      	nop
 800622a:	e7fe      	b.n	800622a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	2b02      	cmp	r3, #2
 8006230:	d103      	bne.n	800623a <xQueueGenericSendFromISR+0x6a>
 8006232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006236:	2b01      	cmp	r3, #1
 8006238:	d101      	bne.n	800623e <xQueueGenericSendFromISR+0x6e>
 800623a:	2301      	movs	r3, #1
 800623c:	e000      	b.n	8006240 <xQueueGenericSendFromISR+0x70>
 800623e:	2300      	movs	r3, #0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10a      	bne.n	800625a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	61fb      	str	r3, [r7, #28]
}
 8006256:	bf00      	nop
 8006258:	e7fe      	b.n	8006258 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800625a:	f002 fa55 	bl	8008708 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800625e:	f3ef 8211 	mrs	r2, BASEPRI
 8006262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	61ba      	str	r2, [r7, #24]
 8006274:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006276:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006278:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006282:	429a      	cmp	r2, r3
 8006284:	d302      	bcc.n	800628c <xQueueGenericSendFromISR+0xbc>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b02      	cmp	r3, #2
 800628a:	d12c      	bne.n	80062e6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	68b9      	ldr	r1, [r7, #8]
 800629a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800629c:	f000 fb65 	bl	800696a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80062a0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80062a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a8:	d112      	bne.n	80062d0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d016      	beq.n	80062e0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b4:	3324      	adds	r3, #36	; 0x24
 80062b6:	4618      	mov	r0, r3
 80062b8:	f001 f94a 	bl	8007550 <xTaskRemoveFromEventList>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00e      	beq.n	80062e0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00b      	beq.n	80062e0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	e007      	b.n	80062e0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80062d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80062d4:	3301      	adds	r3, #1
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	b25a      	sxtb	r2, r3
 80062da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80062e0:	2301      	movs	r3, #1
 80062e2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80062e4:	e001      	b.n	80062ea <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	637b      	str	r3, [r7, #52]	; 0x34
 80062ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ec:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80062f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80062f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3738      	adds	r7, #56	; 0x38
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b08e      	sub	sp, #56	; 0x38
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800630e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10a      	bne.n	800632a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	623b      	str	r3, [r7, #32]
}
 8006326:	bf00      	nop
 8006328:	e7fe      	b.n	8006328 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00a      	beq.n	8006348 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	61fb      	str	r3, [r7, #28]
}
 8006344:	bf00      	nop
 8006346:	e7fe      	b.n	8006346 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d103      	bne.n	8006358 <xQueueGiveFromISR+0x58>
 8006350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <xQueueGiveFromISR+0x5c>
 8006358:	2301      	movs	r3, #1
 800635a:	e000      	b.n	800635e <xQueueGiveFromISR+0x5e>
 800635c:	2300      	movs	r3, #0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10a      	bne.n	8006378 <xQueueGiveFromISR+0x78>
	__asm volatile
 8006362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	61bb      	str	r3, [r7, #24]
}
 8006374:	bf00      	nop
 8006376:	e7fe      	b.n	8006376 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006378:	f002 f9c6 	bl	8008708 <vPortValidateInterruptPriority>
	__asm volatile
 800637c:	f3ef 8211 	mrs	r2, BASEPRI
 8006380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	617a      	str	r2, [r7, #20]
 8006392:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006394:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006396:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d22b      	bcs.n	8006400 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80063a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80063b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b4:	1c5a      	adds	r2, r3, #1
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80063ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80063be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c2:	d112      	bne.n	80063ea <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d016      	beq.n	80063fa <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ce:	3324      	adds	r3, #36	; 0x24
 80063d0:	4618      	mov	r0, r3
 80063d2:	f001 f8bd 	bl	8007550 <xTaskRemoveFromEventList>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00e      	beq.n	80063fa <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00b      	beq.n	80063fa <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	2201      	movs	r2, #1
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	e007      	b.n	80063fa <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063ee:	3301      	adds	r3, #1
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	b25a      	sxtb	r2, r3
 80063f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80063fa:	2301      	movs	r3, #1
 80063fc:	637b      	str	r3, [r7, #52]	; 0x34
 80063fe:	e001      	b.n	8006404 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006400:	2300      	movs	r3, #0
 8006402:	637b      	str	r3, [r7, #52]	; 0x34
 8006404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006406:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f383 8811 	msr	BASEPRI, r3
}
 800640e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006412:	4618      	mov	r0, r3
 8006414:	3738      	adds	r7, #56	; 0x38
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
	...

0800641c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b08c      	sub	sp, #48	; 0x30
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006428:	2300      	movs	r3, #0
 800642a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10a      	bne.n	800644c <xQueueReceive+0x30>
	__asm volatile
 8006436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	623b      	str	r3, [r7, #32]
}
 8006448:	bf00      	nop
 800644a:	e7fe      	b.n	800644a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d103      	bne.n	800645a <xQueueReceive+0x3e>
 8006452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <xQueueReceive+0x42>
 800645a:	2301      	movs	r3, #1
 800645c:	e000      	b.n	8006460 <xQueueReceive+0x44>
 800645e:	2300      	movs	r3, #0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10a      	bne.n	800647a <xQueueReceive+0x5e>
	__asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	61fb      	str	r3, [r7, #28]
}
 8006476:	bf00      	nop
 8006478:	e7fe      	b.n	8006478 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800647a:	f001 fa3d 	bl	80078f8 <xTaskGetSchedulerState>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d102      	bne.n	800648a <xQueueReceive+0x6e>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <xQueueReceive+0x72>
 800648a:	2301      	movs	r3, #1
 800648c:	e000      	b.n	8006490 <xQueueReceive+0x74>
 800648e:	2300      	movs	r3, #0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10a      	bne.n	80064aa <xQueueReceive+0x8e>
	__asm volatile
 8006494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	61bb      	str	r3, [r7, #24]
}
 80064a6:	bf00      	nop
 80064a8:	e7fe      	b.n	80064a8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80064aa:	f002 f84b 	bl	8008544 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d01f      	beq.n	80064fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80064ba:	68b9      	ldr	r1, [r7, #8]
 80064bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064be:	f000 fabe 	bl	8006a3e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	1e5a      	subs	r2, r3, #1
 80064c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00f      	beq.n	80064f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d4:	3310      	adds	r3, #16
 80064d6:	4618      	mov	r0, r3
 80064d8:	f001 f83a 	bl	8007550 <xTaskRemoveFromEventList>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d007      	beq.n	80064f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80064e2:	4b3d      	ldr	r3, [pc, #244]	; (80065d8 <xQueueReceive+0x1bc>)
 80064e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80064f2:	f002 f857 	bl	80085a4 <vPortExitCritical>
				return pdPASS;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e069      	b.n	80065ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d103      	bne.n	8006508 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006500:	f002 f850 	bl	80085a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006504:	2300      	movs	r3, #0
 8006506:	e062      	b.n	80065ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650a:	2b00      	cmp	r3, #0
 800650c:	d106      	bne.n	800651c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800650e:	f107 0310 	add.w	r3, r7, #16
 8006512:	4618      	mov	r0, r3
 8006514:	f001 f880 	bl	8007618 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006518:	2301      	movs	r3, #1
 800651a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800651c:	f002 f842 	bl	80085a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006520:	f000 fdee 	bl	8007100 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006524:	f002 f80e 	bl	8008544 <vPortEnterCritical>
 8006528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800652e:	b25b      	sxtb	r3, r3
 8006530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006534:	d103      	bne.n	800653e <xQueueReceive+0x122>
 8006536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006544:	b25b      	sxtb	r3, r3
 8006546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654a:	d103      	bne.n	8006554 <xQueueReceive+0x138>
 800654c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006554:	f002 f826 	bl	80085a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006558:	1d3a      	adds	r2, r7, #4
 800655a:	f107 0310 	add.w	r3, r7, #16
 800655e:	4611      	mov	r1, r2
 8006560:	4618      	mov	r0, r3
 8006562:	f001 f86f 	bl	8007644 <xTaskCheckForTimeOut>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d123      	bne.n	80065b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800656c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800656e:	f000 fade 	bl	8006b2e <prvIsQueueEmpty>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d017      	beq.n	80065a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657a:	3324      	adds	r3, #36	; 0x24
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	4611      	mov	r1, r2
 8006580:	4618      	mov	r0, r3
 8006582:	f000 ff95 	bl	80074b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006588:	f000 fa7f 	bl	8006a8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800658c:	f000 fdc6 	bl	800711c <xTaskResumeAll>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d189      	bne.n	80064aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006596:	4b10      	ldr	r3, [pc, #64]	; (80065d8 <xQueueReceive+0x1bc>)
 8006598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	e780      	b.n	80064aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80065a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065aa:	f000 fa6e 	bl	8006a8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065ae:	f000 fdb5 	bl	800711c <xTaskResumeAll>
 80065b2:	e77a      	b.n	80064aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80065b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065b6:	f000 fa68 	bl	8006a8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065ba:	f000 fdaf 	bl	800711c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065c0:	f000 fab5 	bl	8006b2e <prvIsQueueEmpty>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f43f af6f 	beq.w	80064aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3730      	adds	r7, #48	; 0x30
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	e000ed04 	.word	0xe000ed04

080065dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b08e      	sub	sp, #56	; 0x38
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80065e6:	2300      	movs	r3, #0
 80065e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80065ee:	2300      	movs	r3, #0
 80065f0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80065f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10a      	bne.n	800660e <xQueueSemaphoreTake+0x32>
	__asm volatile
 80065f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	623b      	str	r3, [r7, #32]
}
 800660a:	bf00      	nop
 800660c:	e7fe      	b.n	800660c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800660e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00a      	beq.n	800662c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	61fb      	str	r3, [r7, #28]
}
 8006628:	bf00      	nop
 800662a:	e7fe      	b.n	800662a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800662c:	f001 f964 	bl	80078f8 <xTaskGetSchedulerState>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d102      	bne.n	800663c <xQueueSemaphoreTake+0x60>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <xQueueSemaphoreTake+0x64>
 800663c:	2301      	movs	r3, #1
 800663e:	e000      	b.n	8006642 <xQueueSemaphoreTake+0x66>
 8006640:	2300      	movs	r3, #0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10a      	bne.n	800665c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	61bb      	str	r3, [r7, #24]
}
 8006658:	bf00      	nop
 800665a:	e7fe      	b.n	800665a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800665c:	f001 ff72 	bl	8008544 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006664:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006668:	2b00      	cmp	r3, #0
 800666a:	d024      	beq.n	80066b6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	1e5a      	subs	r2, r3, #1
 8006670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006672:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d104      	bne.n	8006686 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800667c:	f001 fabc 	bl	8007bf8 <pvTaskIncrementMutexHeldCount>
 8006680:	4602      	mov	r2, r0
 8006682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006684:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00f      	beq.n	80066ae <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800668e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006690:	3310      	adds	r3, #16
 8006692:	4618      	mov	r0, r3
 8006694:	f000 ff5c 	bl	8007550 <xTaskRemoveFromEventList>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d007      	beq.n	80066ae <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800669e:	4b54      	ldr	r3, [pc, #336]	; (80067f0 <xQueueSemaphoreTake+0x214>)
 80066a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80066ae:	f001 ff79 	bl	80085a4 <vPortExitCritical>
				return pdPASS;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e097      	b.n	80067e6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d111      	bne.n	80066e0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80066bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00a      	beq.n	80066d8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80066c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c6:	f383 8811 	msr	BASEPRI, r3
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	617b      	str	r3, [r7, #20]
}
 80066d4:	bf00      	nop
 80066d6:	e7fe      	b.n	80066d6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80066d8:	f001 ff64 	bl	80085a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80066dc:	2300      	movs	r3, #0
 80066de:	e082      	b.n	80067e6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d106      	bne.n	80066f4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066e6:	f107 030c 	add.w	r3, r7, #12
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 ff94 	bl	8007618 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066f0:	2301      	movs	r3, #1
 80066f2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066f4:	f001 ff56 	bl	80085a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066f8:	f000 fd02 	bl	8007100 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066fc:	f001 ff22 	bl	8008544 <vPortEnterCritical>
 8006700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006702:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006706:	b25b      	sxtb	r3, r3
 8006708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670c:	d103      	bne.n	8006716 <xQueueSemaphoreTake+0x13a>
 800670e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006718:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800671c:	b25b      	sxtb	r3, r3
 800671e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006722:	d103      	bne.n	800672c <xQueueSemaphoreTake+0x150>
 8006724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006726:	2200      	movs	r2, #0
 8006728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800672c:	f001 ff3a 	bl	80085a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006730:	463a      	mov	r2, r7
 8006732:	f107 030c 	add.w	r3, r7, #12
 8006736:	4611      	mov	r1, r2
 8006738:	4618      	mov	r0, r3
 800673a:	f000 ff83 	bl	8007644 <xTaskCheckForTimeOut>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d132      	bne.n	80067aa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006744:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006746:	f000 f9f2 	bl	8006b2e <prvIsQueueEmpty>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d026      	beq.n	800679e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d109      	bne.n	800676c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006758:	f001 fef4 	bl	8008544 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800675c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	4618      	mov	r0, r3
 8006762:	f001 f8e7 	bl	8007934 <xTaskPriorityInherit>
 8006766:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006768:	f001 ff1c 	bl	80085a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800676c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676e:	3324      	adds	r3, #36	; 0x24
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	4611      	mov	r1, r2
 8006774:	4618      	mov	r0, r3
 8006776:	f000 fe9b 	bl	80074b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800677a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800677c:	f000 f985 	bl	8006a8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006780:	f000 fccc 	bl	800711c <xTaskResumeAll>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	f47f af68 	bne.w	800665c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800678c:	4b18      	ldr	r3, [pc, #96]	; (80067f0 <xQueueSemaphoreTake+0x214>)
 800678e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	e75e      	b.n	800665c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800679e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067a0:	f000 f973 	bl	8006a8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067a4:	f000 fcba 	bl	800711c <xTaskResumeAll>
 80067a8:	e758      	b.n	800665c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80067aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067ac:	f000 f96d 	bl	8006a8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067b0:	f000 fcb4 	bl	800711c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067b6:	f000 f9ba 	bl	8006b2e <prvIsQueueEmpty>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f43f af4d 	beq.w	800665c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80067c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00d      	beq.n	80067e4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80067c8:	f001 febc 	bl	8008544 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80067cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067ce:	f000 f8b4 	bl	800693a <prvGetDisinheritPriorityAfterTimeout>
 80067d2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80067d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067da:	4618      	mov	r0, r3
 80067dc:	f001 f986 	bl	8007aec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80067e0:	f001 fee0 	bl	80085a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80067e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3738      	adds	r7, #56	; 0x38
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	e000ed04 	.word	0xe000ed04

080067f4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b08e      	sub	sp, #56	; 0x38
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10a      	bne.n	8006820 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800680a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	623b      	str	r3, [r7, #32]
}
 800681c:	bf00      	nop
 800681e:	e7fe      	b.n	800681e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d103      	bne.n	800682e <xQueueReceiveFromISR+0x3a>
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <xQueueReceiveFromISR+0x3e>
 800682e:	2301      	movs	r3, #1
 8006830:	e000      	b.n	8006834 <xQueueReceiveFromISR+0x40>
 8006832:	2300      	movs	r3, #0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10a      	bne.n	800684e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	61fb      	str	r3, [r7, #28]
}
 800684a:	bf00      	nop
 800684c:	e7fe      	b.n	800684c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800684e:	f001 ff5b 	bl	8008708 <vPortValidateInterruptPriority>
	__asm volatile
 8006852:	f3ef 8211 	mrs	r2, BASEPRI
 8006856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	61ba      	str	r2, [r7, #24]
 8006868:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800686a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800686c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800686e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006872:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006876:	2b00      	cmp	r3, #0
 8006878:	d02f      	beq.n	80068da <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006884:	68b9      	ldr	r1, [r7, #8]
 8006886:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006888:	f000 f8d9 	bl	8006a3e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800688c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688e:	1e5a      	subs	r2, r3, #1
 8006890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006892:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006894:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689c:	d112      	bne.n	80068c4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d016      	beq.n	80068d4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a8:	3310      	adds	r3, #16
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 fe50 	bl	8007550 <xTaskRemoveFromEventList>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00e      	beq.n	80068d4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00b      	beq.n	80068d4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	e007      	b.n	80068d4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80068c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068c8:	3301      	adds	r3, #1
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	b25a      	sxtb	r2, r3
 80068ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80068d4:	2301      	movs	r3, #1
 80068d6:	637b      	str	r3, [r7, #52]	; 0x34
 80068d8:	e001      	b.n	80068de <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80068da:	2300      	movs	r3, #0
 80068dc:	637b      	str	r3, [r7, #52]	; 0x34
 80068de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f383 8811 	msr	BASEPRI, r3
}
 80068e8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80068ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3738      	adds	r7, #56	; 0x38
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10a      	bne.n	800691c <vQueueDelete+0x28>
	__asm volatile
 8006906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690a:	f383 8811 	msr	BASEPRI, r3
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	f3bf 8f4f 	dsb	sy
 8006916:	60bb      	str	r3, [r7, #8]
}
 8006918:	bf00      	nop
 800691a:	e7fe      	b.n	800691a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f000 f95f 	bl	8006be0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006928:	2b00      	cmp	r3, #0
 800692a:	d102      	bne.n	8006932 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f001 ffef 	bl	8008910 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006932:	bf00      	nop
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800693a:	b480      	push	{r7}
 800693c:	b085      	sub	sp, #20
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006946:	2b00      	cmp	r3, #0
 8006948:	d006      	beq.n	8006958 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006954:	60fb      	str	r3, [r7, #12]
 8006956:	e001      	b.n	800695c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006958:	2300      	movs	r3, #0
 800695a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800695c:	68fb      	ldr	r3, [r7, #12]
	}
 800695e:	4618      	mov	r0, r3
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b086      	sub	sp, #24
 800696e:	af00      	add	r7, sp, #0
 8006970:	60f8      	str	r0, [r7, #12]
 8006972:	60b9      	str	r1, [r7, #8]
 8006974:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006976:	2300      	movs	r3, #0
 8006978:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10d      	bne.n	80069a4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d14d      	bne.n	8006a2c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	4618      	mov	r0, r3
 8006996:	f001 f83b 	bl	8007a10 <xTaskPriorityDisinherit>
 800699a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	605a      	str	r2, [r3, #4]
 80069a2:	e043      	b.n	8006a2c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d119      	bne.n	80069de <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6898      	ldr	r0, [r3, #8]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b2:	461a      	mov	r2, r3
 80069b4:	68b9      	ldr	r1, [r7, #8]
 80069b6:	f002 f8eb 	bl	8008b90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c2:	441a      	add	r2, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	689a      	ldr	r2, [r3, #8]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d32b      	bcc.n	8006a2c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	609a      	str	r2, [r3, #8]
 80069dc:	e026      	b.n	8006a2c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	68d8      	ldr	r0, [r3, #12]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e6:	461a      	mov	r2, r3
 80069e8:	68b9      	ldr	r1, [r7, #8]
 80069ea:	f002 f8d1 	bl	8008b90 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f6:	425b      	negs	r3, r3
 80069f8:	441a      	add	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	68da      	ldr	r2, [r3, #12]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d207      	bcs.n	8006a1a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a12:	425b      	negs	r3, r3
 8006a14:	441a      	add	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d105      	bne.n	8006a2c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006a34:	697b      	ldr	r3, [r7, #20]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b082      	sub	sp, #8
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d018      	beq.n	8006a82 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68da      	ldr	r2, [r3, #12]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a58:	441a      	add	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68da      	ldr	r2, [r3, #12]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d303      	bcc.n	8006a72 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68d9      	ldr	r1, [r3, #12]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	6838      	ldr	r0, [r7, #0]
 8006a7e:	f002 f887 	bl	8008b90 <memcpy>
	}
}
 8006a82:	bf00      	nop
 8006a84:	3708      	adds	r7, #8
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a92:	f001 fd57 	bl	8008544 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a9c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a9e:	e011      	b.n	8006ac4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d012      	beq.n	8006ace <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3324      	adds	r3, #36	; 0x24
 8006aac:	4618      	mov	r0, r3
 8006aae:	f000 fd4f 	bl	8007550 <xTaskRemoveFromEventList>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006ab8:	f000 fe26 	bl	8007708 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	dce9      	bgt.n	8006aa0 <prvUnlockQueue+0x16>
 8006acc:	e000      	b.n	8006ad0 <prvUnlockQueue+0x46>
					break;
 8006ace:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	22ff      	movs	r2, #255	; 0xff
 8006ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006ad8:	f001 fd64 	bl	80085a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006adc:	f001 fd32 	bl	8008544 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ae6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ae8:	e011      	b.n	8006b0e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d012      	beq.n	8006b18 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	3310      	adds	r3, #16
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 fd2a 	bl	8007550 <xTaskRemoveFromEventList>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006b02:	f000 fe01 	bl	8007708 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006b06:	7bbb      	ldrb	r3, [r7, #14]
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	dce9      	bgt.n	8006aea <prvUnlockQueue+0x60>
 8006b16:	e000      	b.n	8006b1a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006b18:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	22ff      	movs	r2, #255	; 0xff
 8006b1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006b22:	f001 fd3f 	bl	80085a4 <vPortExitCritical>
}
 8006b26:	bf00      	nop
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b084      	sub	sp, #16
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b36:	f001 fd05 	bl	8008544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d102      	bne.n	8006b48 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006b42:	2301      	movs	r3, #1
 8006b44:	60fb      	str	r3, [r7, #12]
 8006b46:	e001      	b.n	8006b4c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b4c:	f001 fd2a 	bl	80085a4 <vPortExitCritical>

	return xReturn;
 8006b50:	68fb      	ldr	r3, [r7, #12]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b62:	f001 fcef 	bl	8008544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d102      	bne.n	8006b78 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006b72:	2301      	movs	r3, #1
 8006b74:	60fb      	str	r3, [r7, #12]
 8006b76:	e001      	b.n	8006b7c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b7c:	f001 fd12 	bl	80085a4 <vPortExitCritical>

	return xReturn;
 8006b80:	68fb      	ldr	r3, [r7, #12]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b96:	2300      	movs	r3, #0
 8006b98:	60fb      	str	r3, [r7, #12]
 8006b9a:	e014      	b.n	8006bc6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006b9c:	4a0f      	ldr	r2, [pc, #60]	; (8006bdc <vQueueAddToRegistry+0x50>)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10b      	bne.n	8006bc0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006ba8:	490c      	ldr	r1, [pc, #48]	; (8006bdc <vQueueAddToRegistry+0x50>)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006bb2:	4a0a      	ldr	r2, [pc, #40]	; (8006bdc <vQueueAddToRegistry+0x50>)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	00db      	lsls	r3, r3, #3
 8006bb8:	4413      	add	r3, r2
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006bbe:	e006      	b.n	8006bce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	60fb      	str	r3, [r7, #12]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2b07      	cmp	r3, #7
 8006bca:	d9e7      	bls.n	8006b9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006bcc:	bf00      	nop
 8006bce:	bf00      	nop
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	200027b0 	.word	0x200027b0

08006be0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006be8:	2300      	movs	r3, #0
 8006bea:	60fb      	str	r3, [r7, #12]
 8006bec:	e016      	b.n	8006c1c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006bee:	4a10      	ldr	r2, [pc, #64]	; (8006c30 <vQueueUnregisterQueue+0x50>)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	00db      	lsls	r3, r3, #3
 8006bf4:	4413      	add	r3, r2
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d10b      	bne.n	8006c16 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006bfe:	4a0c      	ldr	r2, [pc, #48]	; (8006c30 <vQueueUnregisterQueue+0x50>)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2100      	movs	r1, #0
 8006c04:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006c08:	4a09      	ldr	r2, [pc, #36]	; (8006c30 <vQueueUnregisterQueue+0x50>)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	4413      	add	r3, r2
 8006c10:	2200      	movs	r2, #0
 8006c12:	605a      	str	r2, [r3, #4]
				break;
 8006c14:	e006      	b.n	8006c24 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	60fb      	str	r3, [r7, #12]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2b07      	cmp	r3, #7
 8006c20:	d9e5      	bls.n	8006bee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006c22:	bf00      	nop
 8006c24:	bf00      	nop
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr
 8006c30:	200027b0 	.word	0x200027b0

08006c34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006c44:	f001 fc7e 	bl	8008544 <vPortEnterCritical>
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c4e:	b25b      	sxtb	r3, r3
 8006c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c54:	d103      	bne.n	8006c5e <vQueueWaitForMessageRestricted+0x2a>
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c64:	b25b      	sxtb	r3, r3
 8006c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6a:	d103      	bne.n	8006c74 <vQueueWaitForMessageRestricted+0x40>
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c74:	f001 fc96 	bl	80085a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d106      	bne.n	8006c8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	3324      	adds	r3, #36	; 0x24
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	68b9      	ldr	r1, [r7, #8]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f000 fc35 	bl	80074f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006c8e:	6978      	ldr	r0, [r7, #20]
 8006c90:	f7ff fefb 	bl	8006a8a <prvUnlockQueue>
	}
 8006c94:	bf00      	nop
 8006c96:	3718      	adds	r7, #24
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b08e      	sub	sp, #56	; 0x38
 8006ca0:	af04      	add	r7, sp, #16
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10a      	bne.n	8006cc6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	623b      	str	r3, [r7, #32]
}
 8006cc2:	bf00      	nop
 8006cc4:	e7fe      	b.n	8006cc4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d10a      	bne.n	8006ce2 <xTaskCreateStatic+0x46>
	__asm volatile
 8006ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	61fb      	str	r3, [r7, #28]
}
 8006cde:	bf00      	nop
 8006ce0:	e7fe      	b.n	8006ce0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ce2:	235c      	movs	r3, #92	; 0x5c
 8006ce4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	2b5c      	cmp	r3, #92	; 0x5c
 8006cea:	d00a      	beq.n	8006d02 <xTaskCreateStatic+0x66>
	__asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	61bb      	str	r3, [r7, #24]
}
 8006cfe:	bf00      	nop
 8006d00:	e7fe      	b.n	8006d00 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d01e      	beq.n	8006d46 <xTaskCreateStatic+0xaa>
 8006d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d01b      	beq.n	8006d46 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d10:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d16:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d20:	2300      	movs	r3, #0
 8006d22:	9303      	str	r3, [sp, #12]
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	9302      	str	r3, [sp, #8]
 8006d28:	f107 0314 	add.w	r3, r7, #20
 8006d2c:	9301      	str	r3, [sp, #4]
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	68b9      	ldr	r1, [r7, #8]
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 f850 	bl	8006dde <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d40:	f000 f8d4 	bl	8006eec <prvAddNewTaskToReadyList>
 8006d44:	e001      	b.n	8006d4a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006d46:	2300      	movs	r3, #0
 8006d48:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006d4a:	697b      	ldr	r3, [r7, #20]
	}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3728      	adds	r7, #40	; 0x28
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08c      	sub	sp, #48	; 0x30
 8006d58:	af04      	add	r7, sp, #16
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	603b      	str	r3, [r7, #0]
 8006d60:	4613      	mov	r3, r2
 8006d62:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d64:	88fb      	ldrh	r3, [r7, #6]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f001 fd0d 	bl	8008788 <pvPortMalloc>
 8006d6e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00e      	beq.n	8006d94 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006d76:	205c      	movs	r0, #92	; 0x5c
 8006d78:	f001 fd06 	bl	8008788 <pvPortMalloc>
 8006d7c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d003      	beq.n	8006d8c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	631a      	str	r2, [r3, #48]	; 0x30
 8006d8a:	e005      	b.n	8006d98 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006d8c:	6978      	ldr	r0, [r7, #20]
 8006d8e:	f001 fdbf 	bl	8008910 <vPortFree>
 8006d92:	e001      	b.n	8006d98 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006d94:	2300      	movs	r3, #0
 8006d96:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d017      	beq.n	8006dce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006da6:	88fa      	ldrh	r2, [r7, #6]
 8006da8:	2300      	movs	r3, #0
 8006daa:	9303      	str	r3, [sp, #12]
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	9302      	str	r3, [sp, #8]
 8006db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db2:	9301      	str	r3, [sp, #4]
 8006db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	68b9      	ldr	r1, [r7, #8]
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f000 f80e 	bl	8006dde <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006dc2:	69f8      	ldr	r0, [r7, #28]
 8006dc4:	f000 f892 	bl	8006eec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	61bb      	str	r3, [r7, #24]
 8006dcc:	e002      	b.n	8006dd4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006dce:	f04f 33ff 	mov.w	r3, #4294967295
 8006dd2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006dd4:	69bb      	ldr	r3, [r7, #24]
	}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3720      	adds	r7, #32
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b088      	sub	sp, #32
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	60f8      	str	r0, [r7, #12]
 8006de6:	60b9      	str	r1, [r7, #8]
 8006de8:	607a      	str	r2, [r7, #4]
 8006dea:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	461a      	mov	r2, r3
 8006df6:	21a5      	movs	r1, #165	; 0xa5
 8006df8:	f001 fed8 	bl	8008bac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e06:	3b01      	subs	r3, #1
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	f023 0307 	bic.w	r3, r3, #7
 8006e14:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	f003 0307 	and.w	r3, r3, #7
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00a      	beq.n	8006e36 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	617b      	str	r3, [r7, #20]
}
 8006e32:	bf00      	nop
 8006e34:	e7fe      	b.n	8006e34 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e36:	2300      	movs	r3, #0
 8006e38:	61fb      	str	r3, [r7, #28]
 8006e3a:	e012      	b.n	8006e62 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	4413      	add	r3, r2
 8006e42:	7819      	ldrb	r1, [r3, #0]
 8006e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	4413      	add	r3, r2
 8006e4a:	3334      	adds	r3, #52	; 0x34
 8006e4c:	460a      	mov	r2, r1
 8006e4e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	4413      	add	r3, r2
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d006      	beq.n	8006e6a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	61fb      	str	r3, [r7, #28]
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	2b0f      	cmp	r3, #15
 8006e66:	d9e9      	bls.n	8006e3c <prvInitialiseNewTask+0x5e>
 8006e68:	e000      	b.n	8006e6c <prvInitialiseNewTask+0x8e>
		{
			break;
 8006e6a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e76:	2b37      	cmp	r3, #55	; 0x37
 8006e78:	d901      	bls.n	8006e7e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e7a:	2337      	movs	r3, #55	; 0x37
 8006e7c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e82:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e88:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e92:	3304      	adds	r3, #4
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7fe fda7 	bl	80059e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9c:	3318      	adds	r3, #24
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fe fda2 	bl	80059e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ea8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eb8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ec8:	683a      	ldr	r2, [r7, #0]
 8006eca:	68f9      	ldr	r1, [r7, #12]
 8006ecc:	69b8      	ldr	r0, [r7, #24]
 8006ece:	f001 fa0d 	bl	80082ec <pxPortInitialiseStack>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d002      	beq.n	8006ee4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ee2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ee4:	bf00      	nop
 8006ee6:	3720      	adds	r7, #32
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ef4:	f001 fb26 	bl	8008544 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ef8:	4b2d      	ldr	r3, [pc, #180]	; (8006fb0 <prvAddNewTaskToReadyList+0xc4>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3301      	adds	r3, #1
 8006efe:	4a2c      	ldr	r2, [pc, #176]	; (8006fb0 <prvAddNewTaskToReadyList+0xc4>)
 8006f00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006f02:	4b2c      	ldr	r3, [pc, #176]	; (8006fb4 <prvAddNewTaskToReadyList+0xc8>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d109      	bne.n	8006f1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f0a:	4a2a      	ldr	r2, [pc, #168]	; (8006fb4 <prvAddNewTaskToReadyList+0xc8>)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f10:	4b27      	ldr	r3, [pc, #156]	; (8006fb0 <prvAddNewTaskToReadyList+0xc4>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d110      	bne.n	8006f3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f18:	f000 fc1a 	bl	8007750 <prvInitialiseTaskLists>
 8006f1c:	e00d      	b.n	8006f3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f1e:	4b26      	ldr	r3, [pc, #152]	; (8006fb8 <prvAddNewTaskToReadyList+0xcc>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d109      	bne.n	8006f3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006f26:	4b23      	ldr	r3, [pc, #140]	; (8006fb4 <prvAddNewTaskToReadyList+0xc8>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d802      	bhi.n	8006f3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006f34:	4a1f      	ldr	r2, [pc, #124]	; (8006fb4 <prvAddNewTaskToReadyList+0xc8>)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006f3a:	4b20      	ldr	r3, [pc, #128]	; (8006fbc <prvAddNewTaskToReadyList+0xd0>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	4a1e      	ldr	r2, [pc, #120]	; (8006fbc <prvAddNewTaskToReadyList+0xd0>)
 8006f42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006f44:	4b1d      	ldr	r3, [pc, #116]	; (8006fbc <prvAddNewTaskToReadyList+0xd0>)
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f50:	4b1b      	ldr	r3, [pc, #108]	; (8006fc0 <prvAddNewTaskToReadyList+0xd4>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d903      	bls.n	8006f60 <prvAddNewTaskToReadyList+0x74>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5c:	4a18      	ldr	r2, [pc, #96]	; (8006fc0 <prvAddNewTaskToReadyList+0xd4>)
 8006f5e:	6013      	str	r3, [r2, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f64:	4613      	mov	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4413      	add	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4a15      	ldr	r2, [pc, #84]	; (8006fc4 <prvAddNewTaskToReadyList+0xd8>)
 8006f6e:	441a      	add	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	3304      	adds	r3, #4
 8006f74:	4619      	mov	r1, r3
 8006f76:	4610      	mov	r0, r2
 8006f78:	f7fe fd43 	bl	8005a02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006f7c:	f001 fb12 	bl	80085a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006f80:	4b0d      	ldr	r3, [pc, #52]	; (8006fb8 <prvAddNewTaskToReadyList+0xcc>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00e      	beq.n	8006fa6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f88:	4b0a      	ldr	r3, [pc, #40]	; (8006fb4 <prvAddNewTaskToReadyList+0xc8>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d207      	bcs.n	8006fa6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006f96:	4b0c      	ldr	r3, [pc, #48]	; (8006fc8 <prvAddNewTaskToReadyList+0xdc>)
 8006f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f9c:	601a      	str	r2, [r3, #0]
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fa6:	bf00      	nop
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20000dc8 	.word	0x20000dc8
 8006fb4:	200008f4 	.word	0x200008f4
 8006fb8:	20000dd4 	.word	0x20000dd4
 8006fbc:	20000de4 	.word	0x20000de4
 8006fc0:	20000dd0 	.word	0x20000dd0
 8006fc4:	200008f8 	.word	0x200008f8
 8006fc8:	e000ed04 	.word	0xe000ed04

08006fcc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d017      	beq.n	800700e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006fde:	4b13      	ldr	r3, [pc, #76]	; (800702c <vTaskDelay+0x60>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00a      	beq.n	8006ffc <vTaskDelay+0x30>
	__asm volatile
 8006fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fea:	f383 8811 	msr	BASEPRI, r3
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	60bb      	str	r3, [r7, #8]
}
 8006ff8:	bf00      	nop
 8006ffa:	e7fe      	b.n	8006ffa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ffc:	f000 f880 	bl	8007100 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007000:	2100      	movs	r1, #0
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fe0c 	bl	8007c20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007008:	f000 f888 	bl	800711c <xTaskResumeAll>
 800700c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d107      	bne.n	8007024 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007014:	4b06      	ldr	r3, [pc, #24]	; (8007030 <vTaskDelay+0x64>)
 8007016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800701a:	601a      	str	r2, [r3, #0]
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007024:	bf00      	nop
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	20000df0 	.word	0x20000df0
 8007030:	e000ed04 	.word	0xe000ed04

08007034 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b08a      	sub	sp, #40	; 0x28
 8007038:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800703a:	2300      	movs	r3, #0
 800703c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800703e:	2300      	movs	r3, #0
 8007040:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007042:	463a      	mov	r2, r7
 8007044:	1d39      	adds	r1, r7, #4
 8007046:	f107 0308 	add.w	r3, r7, #8
 800704a:	4618      	mov	r0, r3
 800704c:	f7fe fc78 	bl	8005940 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007050:	6839      	ldr	r1, [r7, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	9202      	str	r2, [sp, #8]
 8007058:	9301      	str	r3, [sp, #4]
 800705a:	2300      	movs	r3, #0
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	2300      	movs	r3, #0
 8007060:	460a      	mov	r2, r1
 8007062:	4921      	ldr	r1, [pc, #132]	; (80070e8 <vTaskStartScheduler+0xb4>)
 8007064:	4821      	ldr	r0, [pc, #132]	; (80070ec <vTaskStartScheduler+0xb8>)
 8007066:	f7ff fe19 	bl	8006c9c <xTaskCreateStatic>
 800706a:	4603      	mov	r3, r0
 800706c:	4a20      	ldr	r2, [pc, #128]	; (80070f0 <vTaskStartScheduler+0xbc>)
 800706e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007070:	4b1f      	ldr	r3, [pc, #124]	; (80070f0 <vTaskStartScheduler+0xbc>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007078:	2301      	movs	r3, #1
 800707a:	617b      	str	r3, [r7, #20]
 800707c:	e001      	b.n	8007082 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800707e:	2300      	movs	r3, #0
 8007080:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d102      	bne.n	800708e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007088:	f000 fe1e 	bl	8007cc8 <xTimerCreateTimerTask>
 800708c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d116      	bne.n	80070c2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	613b      	str	r3, [r7, #16]
}
 80070a6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80070a8:	4b12      	ldr	r3, [pc, #72]	; (80070f4 <vTaskStartScheduler+0xc0>)
 80070aa:	f04f 32ff 	mov.w	r2, #4294967295
 80070ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80070b0:	4b11      	ldr	r3, [pc, #68]	; (80070f8 <vTaskStartScheduler+0xc4>)
 80070b2:	2201      	movs	r2, #1
 80070b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80070b6:	4b11      	ldr	r3, [pc, #68]	; (80070fc <vTaskStartScheduler+0xc8>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80070bc:	f001 f9a0 	bl	8008400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80070c0:	e00e      	b.n	80070e0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c8:	d10a      	bne.n	80070e0 <vTaskStartScheduler+0xac>
	__asm volatile
 80070ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	60fb      	str	r3, [r7, #12]
}
 80070dc:	bf00      	nop
 80070de:	e7fe      	b.n	80070de <vTaskStartScheduler+0xaa>
}
 80070e0:	bf00      	nop
 80070e2:	3718      	adds	r7, #24
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	0800ba2c 	.word	0x0800ba2c
 80070ec:	08007721 	.word	0x08007721
 80070f0:	20000dec 	.word	0x20000dec
 80070f4:	20000de8 	.word	0x20000de8
 80070f8:	20000dd4 	.word	0x20000dd4
 80070fc:	20000dcc 	.word	0x20000dcc

08007100 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007100:	b480      	push	{r7}
 8007102:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007104:	4b04      	ldr	r3, [pc, #16]	; (8007118 <vTaskSuspendAll+0x18>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3301      	adds	r3, #1
 800710a:	4a03      	ldr	r2, [pc, #12]	; (8007118 <vTaskSuspendAll+0x18>)
 800710c:	6013      	str	r3, [r2, #0]
}
 800710e:	bf00      	nop
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr
 8007118:	20000df0 	.word	0x20000df0

0800711c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007122:	2300      	movs	r3, #0
 8007124:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007126:	2300      	movs	r3, #0
 8007128:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800712a:	4b42      	ldr	r3, [pc, #264]	; (8007234 <xTaskResumeAll+0x118>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10a      	bne.n	8007148 <xTaskResumeAll+0x2c>
	__asm volatile
 8007132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	603b      	str	r3, [r7, #0]
}
 8007144:	bf00      	nop
 8007146:	e7fe      	b.n	8007146 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007148:	f001 f9fc 	bl	8008544 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800714c:	4b39      	ldr	r3, [pc, #228]	; (8007234 <xTaskResumeAll+0x118>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3b01      	subs	r3, #1
 8007152:	4a38      	ldr	r2, [pc, #224]	; (8007234 <xTaskResumeAll+0x118>)
 8007154:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007156:	4b37      	ldr	r3, [pc, #220]	; (8007234 <xTaskResumeAll+0x118>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d162      	bne.n	8007224 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800715e:	4b36      	ldr	r3, [pc, #216]	; (8007238 <xTaskResumeAll+0x11c>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d05e      	beq.n	8007224 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007166:	e02f      	b.n	80071c8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007168:	4b34      	ldr	r3, [pc, #208]	; (800723c <xTaskResumeAll+0x120>)
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	3318      	adds	r3, #24
 8007174:	4618      	mov	r0, r3
 8007176:	f7fe fca1 	bl	8005abc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	3304      	adds	r3, #4
 800717e:	4618      	mov	r0, r3
 8007180:	f7fe fc9c 	bl	8005abc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007188:	4b2d      	ldr	r3, [pc, #180]	; (8007240 <xTaskResumeAll+0x124>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	429a      	cmp	r2, r3
 800718e:	d903      	bls.n	8007198 <xTaskResumeAll+0x7c>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007194:	4a2a      	ldr	r2, [pc, #168]	; (8007240 <xTaskResumeAll+0x124>)
 8007196:	6013      	str	r3, [r2, #0]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719c:	4613      	mov	r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4a27      	ldr	r2, [pc, #156]	; (8007244 <xTaskResumeAll+0x128>)
 80071a6:	441a      	add	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	3304      	adds	r3, #4
 80071ac:	4619      	mov	r1, r3
 80071ae:	4610      	mov	r0, r2
 80071b0:	f7fe fc27 	bl	8005a02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b8:	4b23      	ldr	r3, [pc, #140]	; (8007248 <xTaskResumeAll+0x12c>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071be:	429a      	cmp	r2, r3
 80071c0:	d302      	bcc.n	80071c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80071c2:	4b22      	ldr	r3, [pc, #136]	; (800724c <xTaskResumeAll+0x130>)
 80071c4:	2201      	movs	r2, #1
 80071c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071c8:	4b1c      	ldr	r3, [pc, #112]	; (800723c <xTaskResumeAll+0x120>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1cb      	bne.n	8007168 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80071d6:	f000 fb59 	bl	800788c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80071da:	4b1d      	ldr	r3, [pc, #116]	; (8007250 <xTaskResumeAll+0x134>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d010      	beq.n	8007208 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80071e6:	f000 f847 	bl	8007278 <xTaskIncrementTick>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80071f0:	4b16      	ldr	r3, [pc, #88]	; (800724c <xTaskResumeAll+0x130>)
 80071f2:	2201      	movs	r2, #1
 80071f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	3b01      	subs	r3, #1
 80071fa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1f1      	bne.n	80071e6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007202:	4b13      	ldr	r3, [pc, #76]	; (8007250 <xTaskResumeAll+0x134>)
 8007204:	2200      	movs	r2, #0
 8007206:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007208:	4b10      	ldr	r3, [pc, #64]	; (800724c <xTaskResumeAll+0x130>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d009      	beq.n	8007224 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007210:	2301      	movs	r3, #1
 8007212:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007214:	4b0f      	ldr	r3, [pc, #60]	; (8007254 <xTaskResumeAll+0x138>)
 8007216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800721a:	601a      	str	r2, [r3, #0]
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007224:	f001 f9be 	bl	80085a4 <vPortExitCritical>

	return xAlreadyYielded;
 8007228:	68bb      	ldr	r3, [r7, #8]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	20000df0 	.word	0x20000df0
 8007238:	20000dc8 	.word	0x20000dc8
 800723c:	20000d88 	.word	0x20000d88
 8007240:	20000dd0 	.word	0x20000dd0
 8007244:	200008f8 	.word	0x200008f8
 8007248:	200008f4 	.word	0x200008f4
 800724c:	20000ddc 	.word	0x20000ddc
 8007250:	20000dd8 	.word	0x20000dd8
 8007254:	e000ed04 	.word	0xe000ed04

08007258 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800725e:	4b05      	ldr	r3, [pc, #20]	; (8007274 <xTaskGetTickCount+0x1c>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007264:	687b      	ldr	r3, [r7, #4]
}
 8007266:	4618      	mov	r0, r3
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	20000dcc 	.word	0x20000dcc

08007278 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800727e:	2300      	movs	r3, #0
 8007280:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007282:	4b51      	ldr	r3, [pc, #324]	; (80073c8 <xTaskIncrementTick+0x150>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	f040 808e 	bne.w	80073a8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800728c:	4b4f      	ldr	r3, [pc, #316]	; (80073cc <xTaskIncrementTick+0x154>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	3301      	adds	r3, #1
 8007292:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007294:	4a4d      	ldr	r2, [pc, #308]	; (80073cc <xTaskIncrementTick+0x154>)
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d120      	bne.n	80072e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80072a0:	4b4b      	ldr	r3, [pc, #300]	; (80073d0 <xTaskIncrementTick+0x158>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00a      	beq.n	80072c0 <xTaskIncrementTick+0x48>
	__asm volatile
 80072aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	603b      	str	r3, [r7, #0]
}
 80072bc:	bf00      	nop
 80072be:	e7fe      	b.n	80072be <xTaskIncrementTick+0x46>
 80072c0:	4b43      	ldr	r3, [pc, #268]	; (80073d0 <xTaskIncrementTick+0x158>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	60fb      	str	r3, [r7, #12]
 80072c6:	4b43      	ldr	r3, [pc, #268]	; (80073d4 <xTaskIncrementTick+0x15c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a41      	ldr	r2, [pc, #260]	; (80073d0 <xTaskIncrementTick+0x158>)
 80072cc:	6013      	str	r3, [r2, #0]
 80072ce:	4a41      	ldr	r2, [pc, #260]	; (80073d4 <xTaskIncrementTick+0x15c>)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6013      	str	r3, [r2, #0]
 80072d4:	4b40      	ldr	r3, [pc, #256]	; (80073d8 <xTaskIncrementTick+0x160>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	3301      	adds	r3, #1
 80072da:	4a3f      	ldr	r2, [pc, #252]	; (80073d8 <xTaskIncrementTick+0x160>)
 80072dc:	6013      	str	r3, [r2, #0]
 80072de:	f000 fad5 	bl	800788c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80072e2:	4b3e      	ldr	r3, [pc, #248]	; (80073dc <xTaskIncrementTick+0x164>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d34e      	bcc.n	800738a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072ec:	4b38      	ldr	r3, [pc, #224]	; (80073d0 <xTaskIncrementTick+0x158>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <xTaskIncrementTick+0x82>
 80072f6:	2301      	movs	r3, #1
 80072f8:	e000      	b.n	80072fc <xTaskIncrementTick+0x84>
 80072fa:	2300      	movs	r3, #0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d004      	beq.n	800730a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007300:	4b36      	ldr	r3, [pc, #216]	; (80073dc <xTaskIncrementTick+0x164>)
 8007302:	f04f 32ff 	mov.w	r2, #4294967295
 8007306:	601a      	str	r2, [r3, #0]
					break;
 8007308:	e03f      	b.n	800738a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800730a:	4b31      	ldr	r3, [pc, #196]	; (80073d0 <xTaskIncrementTick+0x158>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	429a      	cmp	r2, r3
 8007320:	d203      	bcs.n	800732a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007322:	4a2e      	ldr	r2, [pc, #184]	; (80073dc <xTaskIncrementTick+0x164>)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6013      	str	r3, [r2, #0]
						break;
 8007328:	e02f      	b.n	800738a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	3304      	adds	r3, #4
 800732e:	4618      	mov	r0, r3
 8007330:	f7fe fbc4 	bl	8005abc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007338:	2b00      	cmp	r3, #0
 800733a:	d004      	beq.n	8007346 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	3318      	adds	r3, #24
 8007340:	4618      	mov	r0, r3
 8007342:	f7fe fbbb 	bl	8005abc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734a:	4b25      	ldr	r3, [pc, #148]	; (80073e0 <xTaskIncrementTick+0x168>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	429a      	cmp	r2, r3
 8007350:	d903      	bls.n	800735a <xTaskIncrementTick+0xe2>
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007356:	4a22      	ldr	r2, [pc, #136]	; (80073e0 <xTaskIncrementTick+0x168>)
 8007358:	6013      	str	r3, [r2, #0]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735e:	4613      	mov	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4413      	add	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4a1f      	ldr	r2, [pc, #124]	; (80073e4 <xTaskIncrementTick+0x16c>)
 8007368:	441a      	add	r2, r3
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	3304      	adds	r3, #4
 800736e:	4619      	mov	r1, r3
 8007370:	4610      	mov	r0, r2
 8007372:	f7fe fb46 	bl	8005a02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800737a:	4b1b      	ldr	r3, [pc, #108]	; (80073e8 <xTaskIncrementTick+0x170>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007380:	429a      	cmp	r2, r3
 8007382:	d3b3      	bcc.n	80072ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007384:	2301      	movs	r3, #1
 8007386:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007388:	e7b0      	b.n	80072ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800738a:	4b17      	ldr	r3, [pc, #92]	; (80073e8 <xTaskIncrementTick+0x170>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007390:	4914      	ldr	r1, [pc, #80]	; (80073e4 <xTaskIncrementTick+0x16c>)
 8007392:	4613      	mov	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	440b      	add	r3, r1
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d907      	bls.n	80073b2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80073a2:	2301      	movs	r3, #1
 80073a4:	617b      	str	r3, [r7, #20]
 80073a6:	e004      	b.n	80073b2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80073a8:	4b10      	ldr	r3, [pc, #64]	; (80073ec <xTaskIncrementTick+0x174>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3301      	adds	r3, #1
 80073ae:	4a0f      	ldr	r2, [pc, #60]	; (80073ec <xTaskIncrementTick+0x174>)
 80073b0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80073b2:	4b0f      	ldr	r3, [pc, #60]	; (80073f0 <xTaskIncrementTick+0x178>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80073ba:	2301      	movs	r3, #1
 80073bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80073be:	697b      	ldr	r3, [r7, #20]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3718      	adds	r7, #24
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	20000df0 	.word	0x20000df0
 80073cc:	20000dcc 	.word	0x20000dcc
 80073d0:	20000d80 	.word	0x20000d80
 80073d4:	20000d84 	.word	0x20000d84
 80073d8:	20000de0 	.word	0x20000de0
 80073dc:	20000de8 	.word	0x20000de8
 80073e0:	20000dd0 	.word	0x20000dd0
 80073e4:	200008f8 	.word	0x200008f8
 80073e8:	200008f4 	.word	0x200008f4
 80073ec:	20000dd8 	.word	0x20000dd8
 80073f0:	20000ddc 	.word	0x20000ddc

080073f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80073fa:	4b28      	ldr	r3, [pc, #160]	; (800749c <vTaskSwitchContext+0xa8>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007402:	4b27      	ldr	r3, [pc, #156]	; (80074a0 <vTaskSwitchContext+0xac>)
 8007404:	2201      	movs	r2, #1
 8007406:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007408:	e041      	b.n	800748e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800740a:	4b25      	ldr	r3, [pc, #148]	; (80074a0 <vTaskSwitchContext+0xac>)
 800740c:	2200      	movs	r2, #0
 800740e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007410:	4b24      	ldr	r3, [pc, #144]	; (80074a4 <vTaskSwitchContext+0xb0>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	60fb      	str	r3, [r7, #12]
 8007416:	e010      	b.n	800743a <vTaskSwitchContext+0x46>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10a      	bne.n	8007434 <vTaskSwitchContext+0x40>
	__asm volatile
 800741e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	607b      	str	r3, [r7, #4]
}
 8007430:	bf00      	nop
 8007432:	e7fe      	b.n	8007432 <vTaskSwitchContext+0x3e>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	3b01      	subs	r3, #1
 8007438:	60fb      	str	r3, [r7, #12]
 800743a:	491b      	ldr	r1, [pc, #108]	; (80074a8 <vTaskSwitchContext+0xb4>)
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	4613      	mov	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	440b      	add	r3, r1
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d0e4      	beq.n	8007418 <vTaskSwitchContext+0x24>
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	4613      	mov	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4a13      	ldr	r2, [pc, #76]	; (80074a8 <vTaskSwitchContext+0xb4>)
 800745a:	4413      	add	r3, r2
 800745c:	60bb      	str	r3, [r7, #8]
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	605a      	str	r2, [r3, #4]
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	3308      	adds	r3, #8
 8007470:	429a      	cmp	r2, r3
 8007472:	d104      	bne.n	800747e <vTaskSwitchContext+0x8a>
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	605a      	str	r2, [r3, #4]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	4a09      	ldr	r2, [pc, #36]	; (80074ac <vTaskSwitchContext+0xb8>)
 8007486:	6013      	str	r3, [r2, #0]
 8007488:	4a06      	ldr	r2, [pc, #24]	; (80074a4 <vTaskSwitchContext+0xb0>)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6013      	str	r3, [r2, #0]
}
 800748e:	bf00      	nop
 8007490:	3714      	adds	r7, #20
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	20000df0 	.word	0x20000df0
 80074a0:	20000ddc 	.word	0x20000ddc
 80074a4:	20000dd0 	.word	0x20000dd0
 80074a8:	200008f8 	.word	0x200008f8
 80074ac:	200008f4 	.word	0x200008f4

080074b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10a      	bne.n	80074d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80074c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	60fb      	str	r3, [r7, #12]
}
 80074d2:	bf00      	nop
 80074d4:	e7fe      	b.n	80074d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074d6:	4b07      	ldr	r3, [pc, #28]	; (80074f4 <vTaskPlaceOnEventList+0x44>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3318      	adds	r3, #24
 80074dc:	4619      	mov	r1, r3
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7fe fab3 	bl	8005a4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80074e4:	2101      	movs	r1, #1
 80074e6:	6838      	ldr	r0, [r7, #0]
 80074e8:	f000 fb9a 	bl	8007c20 <prvAddCurrentTaskToDelayedList>
}
 80074ec:	bf00      	nop
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	200008f4 	.word	0x200008f4

080074f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10a      	bne.n	8007520 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800750a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	617b      	str	r3, [r7, #20]
}
 800751c:	bf00      	nop
 800751e:	e7fe      	b.n	800751e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007520:	4b0a      	ldr	r3, [pc, #40]	; (800754c <vTaskPlaceOnEventListRestricted+0x54>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3318      	adds	r3, #24
 8007526:	4619      	mov	r1, r3
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f7fe fa6a 	bl	8005a02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007534:	f04f 33ff 	mov.w	r3, #4294967295
 8007538:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800753a:	6879      	ldr	r1, [r7, #4]
 800753c:	68b8      	ldr	r0, [r7, #8]
 800753e:	f000 fb6f 	bl	8007c20 <prvAddCurrentTaskToDelayedList>
	}
 8007542:	bf00      	nop
 8007544:	3718      	adds	r7, #24
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	200008f4 	.word	0x200008f4

08007550 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10a      	bne.n	800757c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756a:	f383 8811 	msr	BASEPRI, r3
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	60fb      	str	r3, [r7, #12]
}
 8007578:	bf00      	nop
 800757a:	e7fe      	b.n	800757a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	3318      	adds	r3, #24
 8007580:	4618      	mov	r0, r3
 8007582:	f7fe fa9b 	bl	8005abc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007586:	4b1e      	ldr	r3, [pc, #120]	; (8007600 <xTaskRemoveFromEventList+0xb0>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d11d      	bne.n	80075ca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	3304      	adds	r3, #4
 8007592:	4618      	mov	r0, r3
 8007594:	f7fe fa92 	bl	8005abc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800759c:	4b19      	ldr	r3, [pc, #100]	; (8007604 <xTaskRemoveFromEventList+0xb4>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d903      	bls.n	80075ac <xTaskRemoveFromEventList+0x5c>
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a8:	4a16      	ldr	r2, [pc, #88]	; (8007604 <xTaskRemoveFromEventList+0xb4>)
 80075aa:	6013      	str	r3, [r2, #0]
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b0:	4613      	mov	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4413      	add	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4a13      	ldr	r2, [pc, #76]	; (8007608 <xTaskRemoveFromEventList+0xb8>)
 80075ba:	441a      	add	r2, r3
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	3304      	adds	r3, #4
 80075c0:	4619      	mov	r1, r3
 80075c2:	4610      	mov	r0, r2
 80075c4:	f7fe fa1d 	bl	8005a02 <vListInsertEnd>
 80075c8:	e005      	b.n	80075d6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	3318      	adds	r3, #24
 80075ce:	4619      	mov	r1, r3
 80075d0:	480e      	ldr	r0, [pc, #56]	; (800760c <xTaskRemoveFromEventList+0xbc>)
 80075d2:	f7fe fa16 	bl	8005a02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075da:	4b0d      	ldr	r3, [pc, #52]	; (8007610 <xTaskRemoveFromEventList+0xc0>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d905      	bls.n	80075f0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80075e4:	2301      	movs	r3, #1
 80075e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80075e8:	4b0a      	ldr	r3, [pc, #40]	; (8007614 <xTaskRemoveFromEventList+0xc4>)
 80075ea:	2201      	movs	r2, #1
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	e001      	b.n	80075f4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80075f0:	2300      	movs	r3, #0
 80075f2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80075f4:	697b      	ldr	r3, [r7, #20]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	20000df0 	.word	0x20000df0
 8007604:	20000dd0 	.word	0x20000dd0
 8007608:	200008f8 	.word	0x200008f8
 800760c:	20000d88 	.word	0x20000d88
 8007610:	200008f4 	.word	0x200008f4
 8007614:	20000ddc 	.word	0x20000ddc

08007618 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007620:	4b06      	ldr	r3, [pc, #24]	; (800763c <vTaskInternalSetTimeOutState+0x24>)
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007628:	4b05      	ldr	r3, [pc, #20]	; (8007640 <vTaskInternalSetTimeOutState+0x28>)
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	605a      	str	r2, [r3, #4]
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	20000de0 	.word	0x20000de0
 8007640:	20000dcc 	.word	0x20000dcc

08007644 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b088      	sub	sp, #32
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10a      	bne.n	800766a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	613b      	str	r3, [r7, #16]
}
 8007666:	bf00      	nop
 8007668:	e7fe      	b.n	8007668 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10a      	bne.n	8007686 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007674:	f383 8811 	msr	BASEPRI, r3
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	60fb      	str	r3, [r7, #12]
}
 8007682:	bf00      	nop
 8007684:	e7fe      	b.n	8007684 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007686:	f000 ff5d 	bl	8008544 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800768a:	4b1d      	ldr	r3, [pc, #116]	; (8007700 <xTaskCheckForTimeOut+0xbc>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	69ba      	ldr	r2, [r7, #24]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a2:	d102      	bne.n	80076aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80076a4:	2300      	movs	r3, #0
 80076a6:	61fb      	str	r3, [r7, #28]
 80076a8:	e023      	b.n	80076f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	4b15      	ldr	r3, [pc, #84]	; (8007704 <xTaskCheckForTimeOut+0xc0>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d007      	beq.n	80076c6 <xTaskCheckForTimeOut+0x82>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d302      	bcc.n	80076c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80076c0:	2301      	movs	r3, #1
 80076c2:	61fb      	str	r3, [r7, #28]
 80076c4:	e015      	b.n	80076f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d20b      	bcs.n	80076e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	1ad2      	subs	r2, r2, r3
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f7ff ff9b 	bl	8007618 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80076e2:	2300      	movs	r3, #0
 80076e4:	61fb      	str	r3, [r7, #28]
 80076e6:	e004      	b.n	80076f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	2200      	movs	r2, #0
 80076ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80076ee:	2301      	movs	r3, #1
 80076f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80076f2:	f000 ff57 	bl	80085a4 <vPortExitCritical>

	return xReturn;
 80076f6:	69fb      	ldr	r3, [r7, #28]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3720      	adds	r7, #32
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	20000dcc 	.word	0x20000dcc
 8007704:	20000de0 	.word	0x20000de0

08007708 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007708:	b480      	push	{r7}
 800770a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800770c:	4b03      	ldr	r3, [pc, #12]	; (800771c <vTaskMissedYield+0x14>)
 800770e:	2201      	movs	r2, #1
 8007710:	601a      	str	r2, [r3, #0]
}
 8007712:	bf00      	nop
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	20000ddc 	.word	0x20000ddc

08007720 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007728:	f000 f852 	bl	80077d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800772c:	4b06      	ldr	r3, [pc, #24]	; (8007748 <prvIdleTask+0x28>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d9f9      	bls.n	8007728 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007734:	4b05      	ldr	r3, [pc, #20]	; (800774c <prvIdleTask+0x2c>)
 8007736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800773a:	601a      	str	r2, [r3, #0]
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007744:	e7f0      	b.n	8007728 <prvIdleTask+0x8>
 8007746:	bf00      	nop
 8007748:	200008f8 	.word	0x200008f8
 800774c:	e000ed04 	.word	0xe000ed04

08007750 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007756:	2300      	movs	r3, #0
 8007758:	607b      	str	r3, [r7, #4]
 800775a:	e00c      	b.n	8007776 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	4613      	mov	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4413      	add	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4a12      	ldr	r2, [pc, #72]	; (80077b0 <prvInitialiseTaskLists+0x60>)
 8007768:	4413      	add	r3, r2
 800776a:	4618      	mov	r0, r3
 800776c:	f7fe f91c 	bl	80059a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	3301      	adds	r3, #1
 8007774:	607b      	str	r3, [r7, #4]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2b37      	cmp	r3, #55	; 0x37
 800777a:	d9ef      	bls.n	800775c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800777c:	480d      	ldr	r0, [pc, #52]	; (80077b4 <prvInitialiseTaskLists+0x64>)
 800777e:	f7fe f913 	bl	80059a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007782:	480d      	ldr	r0, [pc, #52]	; (80077b8 <prvInitialiseTaskLists+0x68>)
 8007784:	f7fe f910 	bl	80059a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007788:	480c      	ldr	r0, [pc, #48]	; (80077bc <prvInitialiseTaskLists+0x6c>)
 800778a:	f7fe f90d 	bl	80059a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800778e:	480c      	ldr	r0, [pc, #48]	; (80077c0 <prvInitialiseTaskLists+0x70>)
 8007790:	f7fe f90a 	bl	80059a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007794:	480b      	ldr	r0, [pc, #44]	; (80077c4 <prvInitialiseTaskLists+0x74>)
 8007796:	f7fe f907 	bl	80059a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800779a:	4b0b      	ldr	r3, [pc, #44]	; (80077c8 <prvInitialiseTaskLists+0x78>)
 800779c:	4a05      	ldr	r2, [pc, #20]	; (80077b4 <prvInitialiseTaskLists+0x64>)
 800779e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80077a0:	4b0a      	ldr	r3, [pc, #40]	; (80077cc <prvInitialiseTaskLists+0x7c>)
 80077a2:	4a05      	ldr	r2, [pc, #20]	; (80077b8 <prvInitialiseTaskLists+0x68>)
 80077a4:	601a      	str	r2, [r3, #0]
}
 80077a6:	bf00      	nop
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	200008f8 	.word	0x200008f8
 80077b4:	20000d58 	.word	0x20000d58
 80077b8:	20000d6c 	.word	0x20000d6c
 80077bc:	20000d88 	.word	0x20000d88
 80077c0:	20000d9c 	.word	0x20000d9c
 80077c4:	20000db4 	.word	0x20000db4
 80077c8:	20000d80 	.word	0x20000d80
 80077cc:	20000d84 	.word	0x20000d84

080077d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077d6:	e019      	b.n	800780c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80077d8:	f000 feb4 	bl	8008544 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80077dc:	4b10      	ldr	r3, [pc, #64]	; (8007820 <prvCheckTasksWaitingTermination+0x50>)
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	3304      	adds	r3, #4
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7fe f967 	bl	8005abc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80077ee:	4b0d      	ldr	r3, [pc, #52]	; (8007824 <prvCheckTasksWaitingTermination+0x54>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	3b01      	subs	r3, #1
 80077f4:	4a0b      	ldr	r2, [pc, #44]	; (8007824 <prvCheckTasksWaitingTermination+0x54>)
 80077f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077f8:	4b0b      	ldr	r3, [pc, #44]	; (8007828 <prvCheckTasksWaitingTermination+0x58>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3b01      	subs	r3, #1
 80077fe:	4a0a      	ldr	r2, [pc, #40]	; (8007828 <prvCheckTasksWaitingTermination+0x58>)
 8007800:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007802:	f000 fecf 	bl	80085a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f810 	bl	800782c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800780c:	4b06      	ldr	r3, [pc, #24]	; (8007828 <prvCheckTasksWaitingTermination+0x58>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1e1      	bne.n	80077d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007814:	bf00      	nop
 8007816:	bf00      	nop
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	20000d9c 	.word	0x20000d9c
 8007824:	20000dc8 	.word	0x20000dc8
 8007828:	20000db0 	.word	0x20000db0

0800782c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800783a:	2b00      	cmp	r3, #0
 800783c:	d108      	bne.n	8007850 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007842:	4618      	mov	r0, r3
 8007844:	f001 f864 	bl	8008910 <vPortFree>
				vPortFree( pxTCB );
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f001 f861 	bl	8008910 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800784e:	e018      	b.n	8007882 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007856:	2b01      	cmp	r3, #1
 8007858:	d103      	bne.n	8007862 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f001 f858 	bl	8008910 <vPortFree>
	}
 8007860:	e00f      	b.n	8007882 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007868:	2b02      	cmp	r3, #2
 800786a:	d00a      	beq.n	8007882 <prvDeleteTCB+0x56>
	__asm volatile
 800786c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007870:	f383 8811 	msr	BASEPRI, r3
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	60fb      	str	r3, [r7, #12]
}
 800787e:	bf00      	nop
 8007880:	e7fe      	b.n	8007880 <prvDeleteTCB+0x54>
	}
 8007882:	bf00      	nop
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
	...

0800788c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007892:	4b0f      	ldr	r3, [pc, #60]	; (80078d0 <prvResetNextTaskUnblockTime+0x44>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d101      	bne.n	80078a0 <prvResetNextTaskUnblockTime+0x14>
 800789c:	2301      	movs	r3, #1
 800789e:	e000      	b.n	80078a2 <prvResetNextTaskUnblockTime+0x16>
 80078a0:	2300      	movs	r3, #0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d004      	beq.n	80078b0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80078a6:	4b0b      	ldr	r3, [pc, #44]	; (80078d4 <prvResetNextTaskUnblockTime+0x48>)
 80078a8:	f04f 32ff 	mov.w	r2, #4294967295
 80078ac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80078ae:	e008      	b.n	80078c2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80078b0:	4b07      	ldr	r3, [pc, #28]	; (80078d0 <prvResetNextTaskUnblockTime+0x44>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	4a05      	ldr	r2, [pc, #20]	; (80078d4 <prvResetNextTaskUnblockTime+0x48>)
 80078c0:	6013      	str	r3, [r2, #0]
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	20000d80 	.word	0x20000d80
 80078d4:	20000de8 	.word	0x20000de8

080078d8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80078de:	4b05      	ldr	r3, [pc, #20]	; (80078f4 <xTaskGetCurrentTaskHandle+0x1c>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80078e4:	687b      	ldr	r3, [r7, #4]
	}
 80078e6:	4618      	mov	r0, r3
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	200008f4 	.word	0x200008f4

080078f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80078fe:	4b0b      	ldr	r3, [pc, #44]	; (800792c <xTaskGetSchedulerState+0x34>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d102      	bne.n	800790c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007906:	2301      	movs	r3, #1
 8007908:	607b      	str	r3, [r7, #4]
 800790a:	e008      	b.n	800791e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800790c:	4b08      	ldr	r3, [pc, #32]	; (8007930 <xTaskGetSchedulerState+0x38>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d102      	bne.n	800791a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007914:	2302      	movs	r3, #2
 8007916:	607b      	str	r3, [r7, #4]
 8007918:	e001      	b.n	800791e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800791a:	2300      	movs	r3, #0
 800791c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800791e:	687b      	ldr	r3, [r7, #4]
	}
 8007920:	4618      	mov	r0, r3
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	20000dd4 	.word	0x20000dd4
 8007930:	20000df0 	.word	0x20000df0

08007934 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007940:	2300      	movs	r3, #0
 8007942:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d056      	beq.n	80079f8 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794e:	4b2d      	ldr	r3, [pc, #180]	; (8007a04 <xTaskPriorityInherit+0xd0>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007954:	429a      	cmp	r2, r3
 8007956:	d246      	bcs.n	80079e6 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	2b00      	cmp	r3, #0
 800795e:	db06      	blt.n	800796e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007960:	4b28      	ldr	r3, [pc, #160]	; (8007a04 <xTaskPriorityInherit+0xd0>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007966:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	6959      	ldr	r1, [r3, #20]
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007976:	4613      	mov	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4413      	add	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4a22      	ldr	r2, [pc, #136]	; (8007a08 <xTaskPriorityInherit+0xd4>)
 8007980:	4413      	add	r3, r2
 8007982:	4299      	cmp	r1, r3
 8007984:	d101      	bne.n	800798a <xTaskPriorityInherit+0x56>
 8007986:	2301      	movs	r3, #1
 8007988:	e000      	b.n	800798c <xTaskPriorityInherit+0x58>
 800798a:	2300      	movs	r3, #0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d022      	beq.n	80079d6 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	3304      	adds	r3, #4
 8007994:	4618      	mov	r0, r3
 8007996:	f7fe f891 	bl	8005abc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800799a:	4b1a      	ldr	r3, [pc, #104]	; (8007a04 <xTaskPriorityInherit+0xd0>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a8:	4b18      	ldr	r3, [pc, #96]	; (8007a0c <xTaskPriorityInherit+0xd8>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d903      	bls.n	80079b8 <xTaskPriorityInherit+0x84>
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b4:	4a15      	ldr	r2, [pc, #84]	; (8007a0c <xTaskPriorityInherit+0xd8>)
 80079b6:	6013      	str	r3, [r2, #0]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079bc:	4613      	mov	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4413      	add	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4a10      	ldr	r2, [pc, #64]	; (8007a08 <xTaskPriorityInherit+0xd4>)
 80079c6:	441a      	add	r2, r3
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	3304      	adds	r3, #4
 80079cc:	4619      	mov	r1, r3
 80079ce:	4610      	mov	r0, r2
 80079d0:	f7fe f817 	bl	8005a02 <vListInsertEnd>
 80079d4:	e004      	b.n	80079e0 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80079d6:	4b0b      	ldr	r3, [pc, #44]	; (8007a04 <xTaskPriorityInherit+0xd0>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80079e0:	2301      	movs	r3, #1
 80079e2:	60fb      	str	r3, [r7, #12]
 80079e4:	e008      	b.n	80079f8 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079ea:	4b06      	ldr	r3, [pc, #24]	; (8007a04 <xTaskPriorityInherit+0xd0>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d201      	bcs.n	80079f8 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80079f4:	2301      	movs	r3, #1
 80079f6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079f8:	68fb      	ldr	r3, [r7, #12]
	}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	200008f4 	.word	0x200008f4
 8007a08:	200008f8 	.word	0x200008f8
 8007a0c:	20000dd0 	.word	0x20000dd0

08007a10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d056      	beq.n	8007ad4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007a26:	4b2e      	ldr	r3, [pc, #184]	; (8007ae0 <xTaskPriorityDisinherit+0xd0>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d00a      	beq.n	8007a46 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	60fb      	str	r3, [r7, #12]
}
 8007a42:	bf00      	nop
 8007a44:	e7fe      	b.n	8007a44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10a      	bne.n	8007a64 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	60bb      	str	r3, [r7, #8]
}
 8007a60:	bf00      	nop
 8007a62:	e7fe      	b.n	8007a62 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a68:	1e5a      	subs	r2, r3, #1
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d02c      	beq.n	8007ad4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d128      	bne.n	8007ad4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	3304      	adds	r3, #4
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7fe f818 	bl	8005abc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa4:	4b0f      	ldr	r3, [pc, #60]	; (8007ae4 <xTaskPriorityDisinherit+0xd4>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d903      	bls.n	8007ab4 <xTaskPriorityDisinherit+0xa4>
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab0:	4a0c      	ldr	r2, [pc, #48]	; (8007ae4 <xTaskPriorityDisinherit+0xd4>)
 8007ab2:	6013      	str	r3, [r2, #0]
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab8:	4613      	mov	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4a09      	ldr	r2, [pc, #36]	; (8007ae8 <xTaskPriorityDisinherit+0xd8>)
 8007ac2:	441a      	add	r2, r3
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	3304      	adds	r3, #4
 8007ac8:	4619      	mov	r1, r3
 8007aca:	4610      	mov	r0, r2
 8007acc:	f7fd ff99 	bl	8005a02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ad4:	697b      	ldr	r3, [r7, #20]
	}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3718      	adds	r7, #24
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	200008f4 	.word	0x200008f4
 8007ae4:	20000dd0 	.word	0x20000dd0
 8007ae8:	200008f8 	.word	0x200008f8

08007aec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b088      	sub	sp, #32
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007afa:	2301      	movs	r3, #1
 8007afc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d06f      	beq.n	8007be4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10a      	bne.n	8007b22 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b10:	f383 8811 	msr	BASEPRI, r3
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	60fb      	str	r3, [r7, #12]
}
 8007b1e:	bf00      	nop
 8007b20:	e7fe      	b.n	8007b20 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d902      	bls.n	8007b32 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	61fb      	str	r3, [r7, #28]
 8007b30:	e002      	b.n	8007b38 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b36:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3c:	69fa      	ldr	r2, [r7, #28]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d050      	beq.n	8007be4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d14b      	bne.n	8007be4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007b4c:	4b27      	ldr	r3, [pc, #156]	; (8007bec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	69ba      	ldr	r2, [r7, #24]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d10a      	bne.n	8007b6c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	60bb      	str	r3, [r7, #8]
}
 8007b68:	bf00      	nop
 8007b6a:	e7fe      	b.n	8007b6a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b70:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	69fa      	ldr	r2, [r7, #28]
 8007b76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	db04      	blt.n	8007b8a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	6959      	ldr	r1, [r3, #20]
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	4613      	mov	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4413      	add	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4a15      	ldr	r2, [pc, #84]	; (8007bf0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007b9a:	4413      	add	r3, r2
 8007b9c:	4299      	cmp	r1, r3
 8007b9e:	d101      	bne.n	8007ba4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e000      	b.n	8007ba6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d01c      	beq.n	8007be4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	3304      	adds	r3, #4
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7fd ff84 	bl	8005abc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb8:	4b0e      	ldr	r3, [pc, #56]	; (8007bf4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d903      	bls.n	8007bc8 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc4:	4a0b      	ldr	r2, [pc, #44]	; (8007bf4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007bc6:	6013      	str	r3, [r2, #0]
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bcc:	4613      	mov	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4a06      	ldr	r2, [pc, #24]	; (8007bf0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007bd6:	441a      	add	r2, r3
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	3304      	adds	r3, #4
 8007bdc:	4619      	mov	r1, r3
 8007bde:	4610      	mov	r0, r2
 8007be0:	f7fd ff0f 	bl	8005a02 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007be4:	bf00      	nop
 8007be6:	3720      	adds	r7, #32
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	200008f4 	.word	0x200008f4
 8007bf0:	200008f8 	.word	0x200008f8
 8007bf4:	20000dd0 	.word	0x20000dd0

08007bf8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007bf8:	b480      	push	{r7}
 8007bfa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007bfc:	4b07      	ldr	r3, [pc, #28]	; (8007c1c <pvTaskIncrementMutexHeldCount+0x24>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d004      	beq.n	8007c0e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007c04:	4b05      	ldr	r3, [pc, #20]	; (8007c1c <pvTaskIncrementMutexHeldCount+0x24>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c0a:	3201      	adds	r2, #1
 8007c0c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007c0e:	4b03      	ldr	r3, [pc, #12]	; (8007c1c <pvTaskIncrementMutexHeldCount+0x24>)
 8007c10:	681b      	ldr	r3, [r3, #0]
	}
 8007c12:	4618      	mov	r0, r3
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr
 8007c1c:	200008f4 	.word	0x200008f4

08007c20 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c2a:	4b21      	ldr	r3, [pc, #132]	; (8007cb0 <prvAddCurrentTaskToDelayedList+0x90>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c30:	4b20      	ldr	r3, [pc, #128]	; (8007cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	3304      	adds	r3, #4
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fd ff40 	bl	8005abc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c42:	d10a      	bne.n	8007c5a <prvAddCurrentTaskToDelayedList+0x3a>
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d007      	beq.n	8007c5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c4a:	4b1a      	ldr	r3, [pc, #104]	; (8007cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	3304      	adds	r3, #4
 8007c50:	4619      	mov	r1, r3
 8007c52:	4819      	ldr	r0, [pc, #100]	; (8007cb8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007c54:	f7fd fed5 	bl	8005a02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c58:	e026      	b.n	8007ca8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4413      	add	r3, r2
 8007c60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c62:	4b14      	ldr	r3, [pc, #80]	; (8007cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d209      	bcs.n	8007c86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c72:	4b12      	ldr	r3, [pc, #72]	; (8007cbc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	4b0f      	ldr	r3, [pc, #60]	; (8007cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	4610      	mov	r0, r2
 8007c80:	f7fd fee3 	bl	8005a4a <vListInsert>
}
 8007c84:	e010      	b.n	8007ca8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c86:	4b0e      	ldr	r3, [pc, #56]	; (8007cc0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	4b0a      	ldr	r3, [pc, #40]	; (8007cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3304      	adds	r3, #4
 8007c90:	4619      	mov	r1, r3
 8007c92:	4610      	mov	r0, r2
 8007c94:	f7fd fed9 	bl	8005a4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c98:	4b0a      	ldr	r3, [pc, #40]	; (8007cc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d202      	bcs.n	8007ca8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007ca2:	4a08      	ldr	r2, [pc, #32]	; (8007cc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	6013      	str	r3, [r2, #0]
}
 8007ca8:	bf00      	nop
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	20000dcc 	.word	0x20000dcc
 8007cb4:	200008f4 	.word	0x200008f4
 8007cb8:	20000db4 	.word	0x20000db4
 8007cbc:	20000d84 	.word	0x20000d84
 8007cc0:	20000d80 	.word	0x20000d80
 8007cc4:	20000de8 	.word	0x20000de8

08007cc8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b08a      	sub	sp, #40	; 0x28
 8007ccc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007cd2:	f000 facb 	bl	800826c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007cd6:	4b1c      	ldr	r3, [pc, #112]	; (8007d48 <xTimerCreateTimerTask+0x80>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d021      	beq.n	8007d22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007ce6:	1d3a      	adds	r2, r7, #4
 8007ce8:	f107 0108 	add.w	r1, r7, #8
 8007cec:	f107 030c 	add.w	r3, r7, #12
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fd fe3f 	bl	8005974 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007cf6:	6879      	ldr	r1, [r7, #4]
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	9202      	str	r2, [sp, #8]
 8007cfe:	9301      	str	r3, [sp, #4]
 8007d00:	2302      	movs	r3, #2
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	2300      	movs	r3, #0
 8007d06:	460a      	mov	r2, r1
 8007d08:	4910      	ldr	r1, [pc, #64]	; (8007d4c <xTimerCreateTimerTask+0x84>)
 8007d0a:	4811      	ldr	r0, [pc, #68]	; (8007d50 <xTimerCreateTimerTask+0x88>)
 8007d0c:	f7fe ffc6 	bl	8006c9c <xTaskCreateStatic>
 8007d10:	4603      	mov	r3, r0
 8007d12:	4a10      	ldr	r2, [pc, #64]	; (8007d54 <xTimerCreateTimerTask+0x8c>)
 8007d14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007d16:	4b0f      	ldr	r3, [pc, #60]	; (8007d54 <xTimerCreateTimerTask+0x8c>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10a      	bne.n	8007d3e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2c:	f383 8811 	msr	BASEPRI, r3
 8007d30:	f3bf 8f6f 	isb	sy
 8007d34:	f3bf 8f4f 	dsb	sy
 8007d38:	613b      	str	r3, [r7, #16]
}
 8007d3a:	bf00      	nop
 8007d3c:	e7fe      	b.n	8007d3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007d3e:	697b      	ldr	r3, [r7, #20]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3718      	adds	r7, #24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	20000e24 	.word	0x20000e24
 8007d4c:	0800ba34 	.word	0x0800ba34
 8007d50:	08007e75 	.word	0x08007e75
 8007d54:	20000e28 	.word	0x20000e28

08007d58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08a      	sub	sp, #40	; 0x28
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
 8007d64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007d66:	2300      	movs	r3, #0
 8007d68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10a      	bne.n	8007d86 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d74:	f383 8811 	msr	BASEPRI, r3
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	623b      	str	r3, [r7, #32]
}
 8007d82:	bf00      	nop
 8007d84:	e7fe      	b.n	8007d84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007d86:	4b1a      	ldr	r3, [pc, #104]	; (8007df0 <xTimerGenericCommand+0x98>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d02a      	beq.n	8007de4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	2b05      	cmp	r3, #5
 8007d9e:	dc18      	bgt.n	8007dd2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007da0:	f7ff fdaa 	bl	80078f8 <xTaskGetSchedulerState>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d109      	bne.n	8007dbe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007daa:	4b11      	ldr	r3, [pc, #68]	; (8007df0 <xTimerGenericCommand+0x98>)
 8007dac:	6818      	ldr	r0, [r3, #0]
 8007dae:	f107 0110 	add.w	r1, r7, #16
 8007db2:	2300      	movs	r3, #0
 8007db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007db6:	f7fe f90d 	bl	8005fd4 <xQueueGenericSend>
 8007dba:	6278      	str	r0, [r7, #36]	; 0x24
 8007dbc:	e012      	b.n	8007de4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007dbe:	4b0c      	ldr	r3, [pc, #48]	; (8007df0 <xTimerGenericCommand+0x98>)
 8007dc0:	6818      	ldr	r0, [r3, #0]
 8007dc2:	f107 0110 	add.w	r1, r7, #16
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f7fe f903 	bl	8005fd4 <xQueueGenericSend>
 8007dce:	6278      	str	r0, [r7, #36]	; 0x24
 8007dd0:	e008      	b.n	8007de4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007dd2:	4b07      	ldr	r3, [pc, #28]	; (8007df0 <xTimerGenericCommand+0x98>)
 8007dd4:	6818      	ldr	r0, [r3, #0]
 8007dd6:	f107 0110 	add.w	r1, r7, #16
 8007dda:	2300      	movs	r3, #0
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	f7fe f9f7 	bl	80061d0 <xQueueGenericSendFromISR>
 8007de2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3728      	adds	r7, #40	; 0x28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	20000e24 	.word	0x20000e24

08007df4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b088      	sub	sp, #32
 8007df8:	af02      	add	r7, sp, #8
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007dfe:	4b1c      	ldr	r3, [pc, #112]	; (8007e70 <prvProcessExpiredTimer+0x7c>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	3304      	adds	r3, #4
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7fd fe55 	bl	8005abc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d122      	bne.n	8007e60 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	699a      	ldr	r2, [r3, #24]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	18d1      	adds	r1, r2, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	6978      	ldr	r0, [r7, #20]
 8007e28:	f000 f8c8 	bl	8007fbc <prvInsertTimerInActiveList>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d016      	beq.n	8007e60 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e32:	2300      	movs	r3, #0
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	2300      	movs	r3, #0
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	6978      	ldr	r0, [r7, #20]
 8007e3e:	f7ff ff8b 	bl	8007d58 <xTimerGenericCommand>
 8007e42:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10a      	bne.n	8007e60 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	60fb      	str	r3, [r7, #12]
}
 8007e5c:	bf00      	nop
 8007e5e:	e7fe      	b.n	8007e5e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e64:	6978      	ldr	r0, [r7, #20]
 8007e66:	4798      	blx	r3
}
 8007e68:	bf00      	nop
 8007e6a:	3718      	adds	r7, #24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	20000e1c 	.word	0x20000e1c

08007e74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e7c:	f107 0308 	add.w	r3, r7, #8
 8007e80:	4618      	mov	r0, r3
 8007e82:	f000 f857 	bl	8007f34 <prvGetNextExpireTime>
 8007e86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f000 f803 	bl	8007e98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007e92:	f000 f8d5 	bl	8008040 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e96:	e7f1      	b.n	8007e7c <prvTimerTask+0x8>

08007e98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007ea2:	f7ff f92d 	bl	8007100 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ea6:	f107 0308 	add.w	r3, r7, #8
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 f866 	bl	8007f7c <prvSampleTimeNow>
 8007eb0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d130      	bne.n	8007f1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10a      	bne.n	8007ed4 <prvProcessTimerOrBlockTask+0x3c>
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d806      	bhi.n	8007ed4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007ec6:	f7ff f929 	bl	800711c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007eca:	68f9      	ldr	r1, [r7, #12]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7ff ff91 	bl	8007df4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ed2:	e024      	b.n	8007f1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d008      	beq.n	8007eec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007eda:	4b13      	ldr	r3, [pc, #76]	; (8007f28 <prvProcessTimerOrBlockTask+0x90>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	bf0c      	ite	eq
 8007ee4:	2301      	moveq	r3, #1
 8007ee6:	2300      	movne	r3, #0
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007eec:	4b0f      	ldr	r3, [pc, #60]	; (8007f2c <prvProcessTimerOrBlockTask+0x94>)
 8007eee:	6818      	ldr	r0, [r3, #0]
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	683a      	ldr	r2, [r7, #0]
 8007ef8:	4619      	mov	r1, r3
 8007efa:	f7fe fe9b 	bl	8006c34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007efe:	f7ff f90d 	bl	800711c <xTaskResumeAll>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10a      	bne.n	8007f1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007f08:	4b09      	ldr	r3, [pc, #36]	; (8007f30 <prvProcessTimerOrBlockTask+0x98>)
 8007f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f0e:	601a      	str	r2, [r3, #0]
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	f3bf 8f6f 	isb	sy
}
 8007f18:	e001      	b.n	8007f1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007f1a:	f7ff f8ff 	bl	800711c <xTaskResumeAll>
}
 8007f1e:	bf00      	nop
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	20000e20 	.word	0x20000e20
 8007f2c:	20000e24 	.word	0x20000e24
 8007f30:	e000ed04 	.word	0xe000ed04

08007f34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007f3c:	4b0e      	ldr	r3, [pc, #56]	; (8007f78 <prvGetNextExpireTime+0x44>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	bf0c      	ite	eq
 8007f46:	2301      	moveq	r3, #1
 8007f48:	2300      	movne	r3, #0
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d105      	bne.n	8007f66 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f5a:	4b07      	ldr	r3, [pc, #28]	; (8007f78 <prvGetNextExpireTime+0x44>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	60fb      	str	r3, [r7, #12]
 8007f64:	e001      	b.n	8007f6a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007f66:	2300      	movs	r3, #0
 8007f68:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr
 8007f78:	20000e1c 	.word	0x20000e1c

08007f7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007f84:	f7ff f968 	bl	8007258 <xTaskGetTickCount>
 8007f88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007f8a:	4b0b      	ldr	r3, [pc, #44]	; (8007fb8 <prvSampleTimeNow+0x3c>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d205      	bcs.n	8007fa0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007f94:	f000 f908 	bl	80081a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	601a      	str	r2, [r3, #0]
 8007f9e:	e002      	b.n	8007fa6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007fa6:	4a04      	ldr	r2, [pc, #16]	; (8007fb8 <prvSampleTimeNow+0x3c>)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007fac:	68fb      	ldr	r3, [r7, #12]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20000e2c 	.word	0x20000e2c

08007fbc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
 8007fc8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007fda:	68ba      	ldr	r2, [r7, #8]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d812      	bhi.n	8008008 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	1ad2      	subs	r2, r2, r3
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d302      	bcc.n	8007ff6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	617b      	str	r3, [r7, #20]
 8007ff4:	e01b      	b.n	800802e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007ff6:	4b10      	ldr	r3, [pc, #64]	; (8008038 <prvInsertTimerInActiveList+0x7c>)
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3304      	adds	r3, #4
 8007ffe:	4619      	mov	r1, r3
 8008000:	4610      	mov	r0, r2
 8008002:	f7fd fd22 	bl	8005a4a <vListInsert>
 8008006:	e012      	b.n	800802e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	429a      	cmp	r2, r3
 800800e:	d206      	bcs.n	800801e <prvInsertTimerInActiveList+0x62>
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	429a      	cmp	r2, r3
 8008016:	d302      	bcc.n	800801e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008018:	2301      	movs	r3, #1
 800801a:	617b      	str	r3, [r7, #20]
 800801c:	e007      	b.n	800802e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800801e:	4b07      	ldr	r3, [pc, #28]	; (800803c <prvInsertTimerInActiveList+0x80>)
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	3304      	adds	r3, #4
 8008026:	4619      	mov	r1, r3
 8008028:	4610      	mov	r0, r2
 800802a:	f7fd fd0e 	bl	8005a4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800802e:	697b      	ldr	r3, [r7, #20]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3718      	adds	r7, #24
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	20000e20 	.word	0x20000e20
 800803c:	20000e1c 	.word	0x20000e1c

08008040 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b08e      	sub	sp, #56	; 0x38
 8008044:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008046:	e09d      	b.n	8008184 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	da18      	bge.n	8008080 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800804e:	1d3b      	adds	r3, r7, #4
 8008050:	3304      	adds	r3, #4
 8008052:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10a      	bne.n	8008070 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	61fb      	str	r3, [r7, #28]
}
 800806c:	bf00      	nop
 800806e:	e7fe      	b.n	800806e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008076:	6850      	ldr	r0, [r2, #4]
 8008078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800807a:	6892      	ldr	r2, [r2, #8]
 800807c:	4611      	mov	r1, r2
 800807e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	db7d      	blt.n	8008182 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800808a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d004      	beq.n	800809c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008094:	3304      	adds	r3, #4
 8008096:	4618      	mov	r0, r3
 8008098:	f7fd fd10 	bl	8005abc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800809c:	463b      	mov	r3, r7
 800809e:	4618      	mov	r0, r3
 80080a0:	f7ff ff6c 	bl	8007f7c <prvSampleTimeNow>
 80080a4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2b09      	cmp	r3, #9
 80080aa:	d86b      	bhi.n	8008184 <prvProcessReceivedCommands+0x144>
 80080ac:	a201      	add	r2, pc, #4	; (adr r2, 80080b4 <prvProcessReceivedCommands+0x74>)
 80080ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b2:	bf00      	nop
 80080b4:	080080dd 	.word	0x080080dd
 80080b8:	080080dd 	.word	0x080080dd
 80080bc:	080080dd 	.word	0x080080dd
 80080c0:	08008185 	.word	0x08008185
 80080c4:	08008139 	.word	0x08008139
 80080c8:	08008171 	.word	0x08008171
 80080cc:	080080dd 	.word	0x080080dd
 80080d0:	080080dd 	.word	0x080080dd
 80080d4:	08008185 	.word	0x08008185
 80080d8:	08008139 	.word	0x08008139
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	18d1      	adds	r1, r2, r3
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080ea:	f7ff ff67 	bl	8007fbc <prvInsertTimerInActiveList>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d047      	beq.n	8008184 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080fa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80080fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fe:	69db      	ldr	r3, [r3, #28]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d13f      	bne.n	8008184 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	441a      	add	r2, r3
 800810c:	2300      	movs	r3, #0
 800810e:	9300      	str	r3, [sp, #0]
 8008110:	2300      	movs	r3, #0
 8008112:	2100      	movs	r1, #0
 8008114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008116:	f7ff fe1f 	bl	8007d58 <xTimerGenericCommand>
 800811a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800811c:	6a3b      	ldr	r3, [r7, #32]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d130      	bne.n	8008184 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8008122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	61bb      	str	r3, [r7, #24]
}
 8008134:	bf00      	nop
 8008136:	e7fe      	b.n	8008136 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008138:	68ba      	ldr	r2, [r7, #8]
 800813a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800813e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10a      	bne.n	800815c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8008146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814a:	f383 8811 	msr	BASEPRI, r3
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	617b      	str	r3, [r7, #20]
}
 8008158:	bf00      	nop
 800815a:	e7fe      	b.n	800815a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800815c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815e:	699a      	ldr	r2, [r3, #24]
 8008160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008162:	18d1      	adds	r1, r2, r3
 8008164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800816a:	f7ff ff27 	bl	8007fbc <prvInsertTimerInActiveList>
					break;
 800816e:	e009      	b.n	8008184 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008172:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008176:	2b00      	cmp	r3, #0
 8008178:	d104      	bne.n	8008184 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800817a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800817c:	f000 fbc8 	bl	8008910 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008180:	e000      	b.n	8008184 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008182:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008184:	4b07      	ldr	r3, [pc, #28]	; (80081a4 <prvProcessReceivedCommands+0x164>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	1d39      	adds	r1, r7, #4
 800818a:	2200      	movs	r2, #0
 800818c:	4618      	mov	r0, r3
 800818e:	f7fe f945 	bl	800641c <xQueueReceive>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	f47f af57 	bne.w	8008048 <prvProcessReceivedCommands+0x8>
	}
}
 800819a:	bf00      	nop
 800819c:	bf00      	nop
 800819e:	3730      	adds	r7, #48	; 0x30
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	20000e24 	.word	0x20000e24

080081a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b088      	sub	sp, #32
 80081ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80081ae:	e045      	b.n	800823c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081b0:	4b2c      	ldr	r3, [pc, #176]	; (8008264 <prvSwitchTimerLists+0xbc>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081ba:	4b2a      	ldr	r3, [pc, #168]	; (8008264 <prvSwitchTimerLists+0xbc>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	3304      	adds	r3, #4
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7fd fc77 	bl	8005abc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	69db      	ldr	r3, [r3, #28]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d12e      	bne.n	800823c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	693a      	ldr	r2, [r7, #16]
 80081e4:	4413      	add	r3, r2
 80081e6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d90e      	bls.n	800820e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	68ba      	ldr	r2, [r7, #8]
 80081f4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081fc:	4b19      	ldr	r3, [pc, #100]	; (8008264 <prvSwitchTimerLists+0xbc>)
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	3304      	adds	r3, #4
 8008204:	4619      	mov	r1, r3
 8008206:	4610      	mov	r0, r2
 8008208:	f7fd fc1f 	bl	8005a4a <vListInsert>
 800820c:	e016      	b.n	800823c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800820e:	2300      	movs	r3, #0
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	2300      	movs	r3, #0
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	2100      	movs	r1, #0
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f7ff fd9d 	bl	8007d58 <xTimerGenericCommand>
 800821e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10a      	bne.n	800823c <prvSwitchTimerLists+0x94>
	__asm volatile
 8008226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	603b      	str	r3, [r7, #0]
}
 8008238:	bf00      	nop
 800823a:	e7fe      	b.n	800823a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800823c:	4b09      	ldr	r3, [pc, #36]	; (8008264 <prvSwitchTimerLists+0xbc>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1b4      	bne.n	80081b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008246:	4b07      	ldr	r3, [pc, #28]	; (8008264 <prvSwitchTimerLists+0xbc>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800824c:	4b06      	ldr	r3, [pc, #24]	; (8008268 <prvSwitchTimerLists+0xc0>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a04      	ldr	r2, [pc, #16]	; (8008264 <prvSwitchTimerLists+0xbc>)
 8008252:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008254:	4a04      	ldr	r2, [pc, #16]	; (8008268 <prvSwitchTimerLists+0xc0>)
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	6013      	str	r3, [r2, #0]
}
 800825a:	bf00      	nop
 800825c:	3718      	adds	r7, #24
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	20000e1c 	.word	0x20000e1c
 8008268:	20000e20 	.word	0x20000e20

0800826c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008272:	f000 f967 	bl	8008544 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008276:	4b15      	ldr	r3, [pc, #84]	; (80082cc <prvCheckForValidListAndQueue+0x60>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d120      	bne.n	80082c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800827e:	4814      	ldr	r0, [pc, #80]	; (80082d0 <prvCheckForValidListAndQueue+0x64>)
 8008280:	f7fd fb92 	bl	80059a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008284:	4813      	ldr	r0, [pc, #76]	; (80082d4 <prvCheckForValidListAndQueue+0x68>)
 8008286:	f7fd fb8f 	bl	80059a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800828a:	4b13      	ldr	r3, [pc, #76]	; (80082d8 <prvCheckForValidListAndQueue+0x6c>)
 800828c:	4a10      	ldr	r2, [pc, #64]	; (80082d0 <prvCheckForValidListAndQueue+0x64>)
 800828e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008290:	4b12      	ldr	r3, [pc, #72]	; (80082dc <prvCheckForValidListAndQueue+0x70>)
 8008292:	4a10      	ldr	r2, [pc, #64]	; (80082d4 <prvCheckForValidListAndQueue+0x68>)
 8008294:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008296:	2300      	movs	r3, #0
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	4b11      	ldr	r3, [pc, #68]	; (80082e0 <prvCheckForValidListAndQueue+0x74>)
 800829c:	4a11      	ldr	r2, [pc, #68]	; (80082e4 <prvCheckForValidListAndQueue+0x78>)
 800829e:	2110      	movs	r1, #16
 80082a0:	200a      	movs	r0, #10
 80082a2:	f7fd fc9d 	bl	8005be0 <xQueueGenericCreateStatic>
 80082a6:	4603      	mov	r3, r0
 80082a8:	4a08      	ldr	r2, [pc, #32]	; (80082cc <prvCheckForValidListAndQueue+0x60>)
 80082aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80082ac:	4b07      	ldr	r3, [pc, #28]	; (80082cc <prvCheckForValidListAndQueue+0x60>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d005      	beq.n	80082c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80082b4:	4b05      	ldr	r3, [pc, #20]	; (80082cc <prvCheckForValidListAndQueue+0x60>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	490b      	ldr	r1, [pc, #44]	; (80082e8 <prvCheckForValidListAndQueue+0x7c>)
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fe fc66 	bl	8006b8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80082c0:	f000 f970 	bl	80085a4 <vPortExitCritical>
}
 80082c4:	bf00      	nop
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	20000e24 	.word	0x20000e24
 80082d0:	20000df4 	.word	0x20000df4
 80082d4:	20000e08 	.word	0x20000e08
 80082d8:	20000e1c 	.word	0x20000e1c
 80082dc:	20000e20 	.word	0x20000e20
 80082e0:	20000ed0 	.word	0x20000ed0
 80082e4:	20000e30 	.word	0x20000e30
 80082e8:	0800ba3c 	.word	0x0800ba3c

080082ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	3b04      	subs	r3, #4
 80082fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008304:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	3b04      	subs	r3, #4
 800830a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	f023 0201 	bic.w	r2, r3, #1
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	3b04      	subs	r3, #4
 800831a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800831c:	4a0c      	ldr	r2, [pc, #48]	; (8008350 <pxPortInitialiseStack+0x64>)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	3b14      	subs	r3, #20
 8008326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	3b04      	subs	r3, #4
 8008332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f06f 0202 	mvn.w	r2, #2
 800833a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	3b20      	subs	r3, #32
 8008340:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008342:	68fb      	ldr	r3, [r7, #12]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr
 8008350:	08008355 	.word	0x08008355

08008354 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800835a:	2300      	movs	r3, #0
 800835c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800835e:	4b12      	ldr	r3, [pc, #72]	; (80083a8 <prvTaskExitError+0x54>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008366:	d00a      	beq.n	800837e <prvTaskExitError+0x2a>
	__asm volatile
 8008368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	60fb      	str	r3, [r7, #12]
}
 800837a:	bf00      	nop
 800837c:	e7fe      	b.n	800837c <prvTaskExitError+0x28>
	__asm volatile
 800837e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008382:	f383 8811 	msr	BASEPRI, r3
 8008386:	f3bf 8f6f 	isb	sy
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	60bb      	str	r3, [r7, #8]
}
 8008390:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008392:	bf00      	nop
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d0fc      	beq.n	8008394 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800839a:	bf00      	nop
 800839c:	bf00      	nop
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr
 80083a8:	2000002c 	.word	0x2000002c
 80083ac:	00000000 	.word	0x00000000

080083b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80083b0:	4b07      	ldr	r3, [pc, #28]	; (80083d0 <pxCurrentTCBConst2>)
 80083b2:	6819      	ldr	r1, [r3, #0]
 80083b4:	6808      	ldr	r0, [r1, #0]
 80083b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ba:	f380 8809 	msr	PSP, r0
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f04f 0000 	mov.w	r0, #0
 80083c6:	f380 8811 	msr	BASEPRI, r0
 80083ca:	4770      	bx	lr
 80083cc:	f3af 8000 	nop.w

080083d0 <pxCurrentTCBConst2>:
 80083d0:	200008f4 	.word	0x200008f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80083d4:	bf00      	nop
 80083d6:	bf00      	nop

080083d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80083d8:	4808      	ldr	r0, [pc, #32]	; (80083fc <prvPortStartFirstTask+0x24>)
 80083da:	6800      	ldr	r0, [r0, #0]
 80083dc:	6800      	ldr	r0, [r0, #0]
 80083de:	f380 8808 	msr	MSP, r0
 80083e2:	f04f 0000 	mov.w	r0, #0
 80083e6:	f380 8814 	msr	CONTROL, r0
 80083ea:	b662      	cpsie	i
 80083ec:	b661      	cpsie	f
 80083ee:	f3bf 8f4f 	dsb	sy
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	df00      	svc	0
 80083f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80083fa:	bf00      	nop
 80083fc:	e000ed08 	.word	0xe000ed08

08008400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008406:	4b46      	ldr	r3, [pc, #280]	; (8008520 <xPortStartScheduler+0x120>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a46      	ldr	r2, [pc, #280]	; (8008524 <xPortStartScheduler+0x124>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d10a      	bne.n	8008426 <xPortStartScheduler+0x26>
	__asm volatile
 8008410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008414:	f383 8811 	msr	BASEPRI, r3
 8008418:	f3bf 8f6f 	isb	sy
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	613b      	str	r3, [r7, #16]
}
 8008422:	bf00      	nop
 8008424:	e7fe      	b.n	8008424 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008426:	4b3e      	ldr	r3, [pc, #248]	; (8008520 <xPortStartScheduler+0x120>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a3f      	ldr	r2, [pc, #252]	; (8008528 <xPortStartScheduler+0x128>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d10a      	bne.n	8008446 <xPortStartScheduler+0x46>
	__asm volatile
 8008430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008434:	f383 8811 	msr	BASEPRI, r3
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	60fb      	str	r3, [r7, #12]
}
 8008442:	bf00      	nop
 8008444:	e7fe      	b.n	8008444 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008446:	4b39      	ldr	r3, [pc, #228]	; (800852c <xPortStartScheduler+0x12c>)
 8008448:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	b2db      	uxtb	r3, r3
 8008450:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	22ff      	movs	r2, #255	; 0xff
 8008456:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	b2db      	uxtb	r3, r3
 800845e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008460:	78fb      	ldrb	r3, [r7, #3]
 8008462:	b2db      	uxtb	r3, r3
 8008464:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008468:	b2da      	uxtb	r2, r3
 800846a:	4b31      	ldr	r3, [pc, #196]	; (8008530 <xPortStartScheduler+0x130>)
 800846c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800846e:	4b31      	ldr	r3, [pc, #196]	; (8008534 <xPortStartScheduler+0x134>)
 8008470:	2207      	movs	r2, #7
 8008472:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008474:	e009      	b.n	800848a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008476:	4b2f      	ldr	r3, [pc, #188]	; (8008534 <xPortStartScheduler+0x134>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	3b01      	subs	r3, #1
 800847c:	4a2d      	ldr	r2, [pc, #180]	; (8008534 <xPortStartScheduler+0x134>)
 800847e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008480:	78fb      	ldrb	r3, [r7, #3]
 8008482:	b2db      	uxtb	r3, r3
 8008484:	005b      	lsls	r3, r3, #1
 8008486:	b2db      	uxtb	r3, r3
 8008488:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800848a:	78fb      	ldrb	r3, [r7, #3]
 800848c:	b2db      	uxtb	r3, r3
 800848e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008492:	2b80      	cmp	r3, #128	; 0x80
 8008494:	d0ef      	beq.n	8008476 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008496:	4b27      	ldr	r3, [pc, #156]	; (8008534 <xPortStartScheduler+0x134>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f1c3 0307 	rsb	r3, r3, #7
 800849e:	2b04      	cmp	r3, #4
 80084a0:	d00a      	beq.n	80084b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80084a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a6:	f383 8811 	msr	BASEPRI, r3
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	60bb      	str	r3, [r7, #8]
}
 80084b4:	bf00      	nop
 80084b6:	e7fe      	b.n	80084b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80084b8:	4b1e      	ldr	r3, [pc, #120]	; (8008534 <xPortStartScheduler+0x134>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	021b      	lsls	r3, r3, #8
 80084be:	4a1d      	ldr	r2, [pc, #116]	; (8008534 <xPortStartScheduler+0x134>)
 80084c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80084c2:	4b1c      	ldr	r3, [pc, #112]	; (8008534 <xPortStartScheduler+0x134>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084ca:	4a1a      	ldr	r2, [pc, #104]	; (8008534 <xPortStartScheduler+0x134>)
 80084cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	b2da      	uxtb	r2, r3
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80084d6:	4b18      	ldr	r3, [pc, #96]	; (8008538 <xPortStartScheduler+0x138>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a17      	ldr	r2, [pc, #92]	; (8008538 <xPortStartScheduler+0x138>)
 80084dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80084e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80084e2:	4b15      	ldr	r3, [pc, #84]	; (8008538 <xPortStartScheduler+0x138>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a14      	ldr	r2, [pc, #80]	; (8008538 <xPortStartScheduler+0x138>)
 80084e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80084ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80084ee:	f000 f8dd 	bl	80086ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80084f2:	4b12      	ldr	r3, [pc, #72]	; (800853c <xPortStartScheduler+0x13c>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80084f8:	f000 f8fc 	bl	80086f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80084fc:	4b10      	ldr	r3, [pc, #64]	; (8008540 <xPortStartScheduler+0x140>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a0f      	ldr	r2, [pc, #60]	; (8008540 <xPortStartScheduler+0x140>)
 8008502:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008506:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008508:	f7ff ff66 	bl	80083d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800850c:	f7fe ff72 	bl	80073f4 <vTaskSwitchContext>
	prvTaskExitError();
 8008510:	f7ff ff20 	bl	8008354 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	e000ed00 	.word	0xe000ed00
 8008524:	410fc271 	.word	0x410fc271
 8008528:	410fc270 	.word	0x410fc270
 800852c:	e000e400 	.word	0xe000e400
 8008530:	20000f20 	.word	0x20000f20
 8008534:	20000f24 	.word	0x20000f24
 8008538:	e000ed20 	.word	0xe000ed20
 800853c:	2000002c 	.word	0x2000002c
 8008540:	e000ef34 	.word	0xe000ef34

08008544 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
	__asm volatile
 800854a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854e:	f383 8811 	msr	BASEPRI, r3
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	607b      	str	r3, [r7, #4]
}
 800855c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800855e:	4b0f      	ldr	r3, [pc, #60]	; (800859c <vPortEnterCritical+0x58>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	3301      	adds	r3, #1
 8008564:	4a0d      	ldr	r2, [pc, #52]	; (800859c <vPortEnterCritical+0x58>)
 8008566:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008568:	4b0c      	ldr	r3, [pc, #48]	; (800859c <vPortEnterCritical+0x58>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d10f      	bne.n	8008590 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008570:	4b0b      	ldr	r3, [pc, #44]	; (80085a0 <vPortEnterCritical+0x5c>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	b2db      	uxtb	r3, r3
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00a      	beq.n	8008590 <vPortEnterCritical+0x4c>
	__asm volatile
 800857a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	603b      	str	r3, [r7, #0]
}
 800858c:	bf00      	nop
 800858e:	e7fe      	b.n	800858e <vPortEnterCritical+0x4a>
	}
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr
 800859c:	2000002c 	.word	0x2000002c
 80085a0:	e000ed04 	.word	0xe000ed04

080085a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80085aa:	4b12      	ldr	r3, [pc, #72]	; (80085f4 <vPortExitCritical+0x50>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10a      	bne.n	80085c8 <vPortExitCritical+0x24>
	__asm volatile
 80085b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	607b      	str	r3, [r7, #4]
}
 80085c4:	bf00      	nop
 80085c6:	e7fe      	b.n	80085c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80085c8:	4b0a      	ldr	r3, [pc, #40]	; (80085f4 <vPortExitCritical+0x50>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	3b01      	subs	r3, #1
 80085ce:	4a09      	ldr	r2, [pc, #36]	; (80085f4 <vPortExitCritical+0x50>)
 80085d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80085d2:	4b08      	ldr	r3, [pc, #32]	; (80085f4 <vPortExitCritical+0x50>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d105      	bne.n	80085e6 <vPortExitCritical+0x42>
 80085da:	2300      	movs	r3, #0
 80085dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	f383 8811 	msr	BASEPRI, r3
}
 80085e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80085e6:	bf00      	nop
 80085e8:	370c      	adds	r7, #12
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	2000002c 	.word	0x2000002c
	...

08008600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008600:	f3ef 8009 	mrs	r0, PSP
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	4b15      	ldr	r3, [pc, #84]	; (8008660 <pxCurrentTCBConst>)
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	f01e 0f10 	tst.w	lr, #16
 8008610:	bf08      	it	eq
 8008612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800861a:	6010      	str	r0, [r2, #0]
 800861c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008620:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008624:	f380 8811 	msr	BASEPRI, r0
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f7fe fee0 	bl	80073f4 <vTaskSwitchContext>
 8008634:	f04f 0000 	mov.w	r0, #0
 8008638:	f380 8811 	msr	BASEPRI, r0
 800863c:	bc09      	pop	{r0, r3}
 800863e:	6819      	ldr	r1, [r3, #0]
 8008640:	6808      	ldr	r0, [r1, #0]
 8008642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008646:	f01e 0f10 	tst.w	lr, #16
 800864a:	bf08      	it	eq
 800864c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008650:	f380 8809 	msr	PSP, r0
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	f3af 8000 	nop.w

08008660 <pxCurrentTCBConst>:
 8008660:	200008f4 	.word	0x200008f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008664:	bf00      	nop
 8008666:	bf00      	nop

08008668 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
	__asm volatile
 800866e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	607b      	str	r3, [r7, #4]
}
 8008680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008682:	f7fe fdf9 	bl	8007278 <xTaskIncrementTick>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d003      	beq.n	8008694 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800868c:	4b06      	ldr	r3, [pc, #24]	; (80086a8 <xPortSysTickHandler+0x40>)
 800868e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	2300      	movs	r3, #0
 8008696:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	f383 8811 	msr	BASEPRI, r3
}
 800869e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80086a0:	bf00      	nop
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	e000ed04 	.word	0xe000ed04

080086ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80086ac:	b480      	push	{r7}
 80086ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80086b0:	4b0b      	ldr	r3, [pc, #44]	; (80086e0 <vPortSetupTimerInterrupt+0x34>)
 80086b2:	2200      	movs	r2, #0
 80086b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80086b6:	4b0b      	ldr	r3, [pc, #44]	; (80086e4 <vPortSetupTimerInterrupt+0x38>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80086bc:	4b0a      	ldr	r3, [pc, #40]	; (80086e8 <vPortSetupTimerInterrupt+0x3c>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a0a      	ldr	r2, [pc, #40]	; (80086ec <vPortSetupTimerInterrupt+0x40>)
 80086c2:	fba2 2303 	umull	r2, r3, r2, r3
 80086c6:	099b      	lsrs	r3, r3, #6
 80086c8:	4a09      	ldr	r2, [pc, #36]	; (80086f0 <vPortSetupTimerInterrupt+0x44>)
 80086ca:	3b01      	subs	r3, #1
 80086cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80086ce:	4b04      	ldr	r3, [pc, #16]	; (80086e0 <vPortSetupTimerInterrupt+0x34>)
 80086d0:	2207      	movs	r2, #7
 80086d2:	601a      	str	r2, [r3, #0]
}
 80086d4:	bf00      	nop
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	e000e010 	.word	0xe000e010
 80086e4:	e000e018 	.word	0xe000e018
 80086e8:	20000000 	.word	0x20000000
 80086ec:	10624dd3 	.word	0x10624dd3
 80086f0:	e000e014 	.word	0xe000e014

080086f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80086f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008704 <vPortEnableVFP+0x10>
 80086f8:	6801      	ldr	r1, [r0, #0]
 80086fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086fe:	6001      	str	r1, [r0, #0]
 8008700:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008702:	bf00      	nop
 8008704:	e000ed88 	.word	0xe000ed88

08008708 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800870e:	f3ef 8305 	mrs	r3, IPSR
 8008712:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2b0f      	cmp	r3, #15
 8008718:	d914      	bls.n	8008744 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800871a:	4a17      	ldr	r2, [pc, #92]	; (8008778 <vPortValidateInterruptPriority+0x70>)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	4413      	add	r3, r2
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008724:	4b15      	ldr	r3, [pc, #84]	; (800877c <vPortValidateInterruptPriority+0x74>)
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	7afa      	ldrb	r2, [r7, #11]
 800872a:	429a      	cmp	r2, r3
 800872c:	d20a      	bcs.n	8008744 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	607b      	str	r3, [r7, #4]
}
 8008740:	bf00      	nop
 8008742:	e7fe      	b.n	8008742 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008744:	4b0e      	ldr	r3, [pc, #56]	; (8008780 <vPortValidateInterruptPriority+0x78>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800874c:	4b0d      	ldr	r3, [pc, #52]	; (8008784 <vPortValidateInterruptPriority+0x7c>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	429a      	cmp	r2, r3
 8008752:	d90a      	bls.n	800876a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008758:	f383 8811 	msr	BASEPRI, r3
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	603b      	str	r3, [r7, #0]
}
 8008766:	bf00      	nop
 8008768:	e7fe      	b.n	8008768 <vPortValidateInterruptPriority+0x60>
	}
 800876a:	bf00      	nop
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	e000e3f0 	.word	0xe000e3f0
 800877c:	20000f20 	.word	0x20000f20
 8008780:	e000ed0c 	.word	0xe000ed0c
 8008784:	20000f24 	.word	0x20000f24

08008788 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b08a      	sub	sp, #40	; 0x28
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008790:	2300      	movs	r3, #0
 8008792:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008794:	f7fe fcb4 	bl	8007100 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008798:	4b58      	ldr	r3, [pc, #352]	; (80088fc <pvPortMalloc+0x174>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d101      	bne.n	80087a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80087a0:	f000 f910 	bl	80089c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80087a4:	4b56      	ldr	r3, [pc, #344]	; (8008900 <pvPortMalloc+0x178>)
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4013      	ands	r3, r2
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f040 808e 	bne.w	80088ce <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d01d      	beq.n	80087f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80087b8:	2208      	movs	r2, #8
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4413      	add	r3, r2
 80087be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f003 0307 	and.w	r3, r3, #7
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d014      	beq.n	80087f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f023 0307 	bic.w	r3, r3, #7
 80087d0:	3308      	adds	r3, #8
 80087d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f003 0307 	and.w	r3, r3, #7
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00a      	beq.n	80087f4 <pvPortMalloc+0x6c>
	__asm volatile
 80087de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e2:	f383 8811 	msr	BASEPRI, r3
 80087e6:	f3bf 8f6f 	isb	sy
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	617b      	str	r3, [r7, #20]
}
 80087f0:	bf00      	nop
 80087f2:	e7fe      	b.n	80087f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d069      	beq.n	80088ce <pvPortMalloc+0x146>
 80087fa:	4b42      	ldr	r3, [pc, #264]	; (8008904 <pvPortMalloc+0x17c>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	429a      	cmp	r2, r3
 8008802:	d864      	bhi.n	80088ce <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008804:	4b40      	ldr	r3, [pc, #256]	; (8008908 <pvPortMalloc+0x180>)
 8008806:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008808:	4b3f      	ldr	r3, [pc, #252]	; (8008908 <pvPortMalloc+0x180>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800880e:	e004      	b.n	800881a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	429a      	cmp	r2, r3
 8008822:	d903      	bls.n	800882c <pvPortMalloc+0xa4>
 8008824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1f1      	bne.n	8008810 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800882c:	4b33      	ldr	r3, [pc, #204]	; (80088fc <pvPortMalloc+0x174>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008832:	429a      	cmp	r2, r3
 8008834:	d04b      	beq.n	80088ce <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008836:	6a3b      	ldr	r3, [r7, #32]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2208      	movs	r2, #8
 800883c:	4413      	add	r3, r2
 800883e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	6a3b      	ldr	r3, [r7, #32]
 8008846:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	1ad2      	subs	r2, r2, r3
 8008850:	2308      	movs	r3, #8
 8008852:	005b      	lsls	r3, r3, #1
 8008854:	429a      	cmp	r2, r3
 8008856:	d91f      	bls.n	8008898 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4413      	add	r3, r2
 800885e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	f003 0307 	and.w	r3, r3, #7
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00a      	beq.n	8008880 <pvPortMalloc+0xf8>
	__asm volatile
 800886a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886e:	f383 8811 	msr	BASEPRI, r3
 8008872:	f3bf 8f6f 	isb	sy
 8008876:	f3bf 8f4f 	dsb	sy
 800887a:	613b      	str	r3, [r7, #16]
}
 800887c:	bf00      	nop
 800887e:	e7fe      	b.n	800887e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008882:	685a      	ldr	r2, [r3, #4]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	1ad2      	subs	r2, r2, r3
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800888c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008892:	69b8      	ldr	r0, [r7, #24]
 8008894:	f000 f8f8 	bl	8008a88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008898:	4b1a      	ldr	r3, [pc, #104]	; (8008904 <pvPortMalloc+0x17c>)
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	4a18      	ldr	r2, [pc, #96]	; (8008904 <pvPortMalloc+0x17c>)
 80088a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80088a6:	4b17      	ldr	r3, [pc, #92]	; (8008904 <pvPortMalloc+0x17c>)
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	4b18      	ldr	r3, [pc, #96]	; (800890c <pvPortMalloc+0x184>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d203      	bcs.n	80088ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80088b2:	4b14      	ldr	r3, [pc, #80]	; (8008904 <pvPortMalloc+0x17c>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a15      	ldr	r2, [pc, #84]	; (800890c <pvPortMalloc+0x184>)
 80088b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80088ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088bc:	685a      	ldr	r2, [r3, #4]
 80088be:	4b10      	ldr	r3, [pc, #64]	; (8008900 <pvPortMalloc+0x178>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	431a      	orrs	r2, r3
 80088c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80088c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ca:	2200      	movs	r2, #0
 80088cc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80088ce:	f7fe fc25 	bl	800711c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	f003 0307 	and.w	r3, r3, #7
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00a      	beq.n	80088f2 <pvPortMalloc+0x16a>
	__asm volatile
 80088dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e0:	f383 8811 	msr	BASEPRI, r3
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	60fb      	str	r3, [r7, #12]
}
 80088ee:	bf00      	nop
 80088f0:	e7fe      	b.n	80088f0 <pvPortMalloc+0x168>
	return pvReturn;
 80088f2:	69fb      	ldr	r3, [r7, #28]
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3728      	adds	r7, #40	; 0x28
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	200026a0 	.word	0x200026a0
 8008900:	200026ac 	.word	0x200026ac
 8008904:	200026a4 	.word	0x200026a4
 8008908:	20002698 	.word	0x20002698
 800890c:	200026a8 	.word	0x200026a8

08008910 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d048      	beq.n	80089b4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008922:	2308      	movs	r3, #8
 8008924:	425b      	negs	r3, r3
 8008926:	697a      	ldr	r2, [r7, #20]
 8008928:	4413      	add	r3, r2
 800892a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	685a      	ldr	r2, [r3, #4]
 8008934:	4b21      	ldr	r3, [pc, #132]	; (80089bc <vPortFree+0xac>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4013      	ands	r3, r2
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10a      	bne.n	8008954 <vPortFree+0x44>
	__asm volatile
 800893e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008942:	f383 8811 	msr	BASEPRI, r3
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	60fb      	str	r3, [r7, #12]
}
 8008950:	bf00      	nop
 8008952:	e7fe      	b.n	8008952 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00a      	beq.n	8008972 <vPortFree+0x62>
	__asm volatile
 800895c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008960:	f383 8811 	msr	BASEPRI, r3
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	60bb      	str	r3, [r7, #8]
}
 800896e:	bf00      	nop
 8008970:	e7fe      	b.n	8008970 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	685a      	ldr	r2, [r3, #4]
 8008976:	4b11      	ldr	r3, [pc, #68]	; (80089bc <vPortFree+0xac>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4013      	ands	r3, r2
 800897c:	2b00      	cmp	r3, #0
 800897e:	d019      	beq.n	80089b4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d115      	bne.n	80089b4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	685a      	ldr	r2, [r3, #4]
 800898c:	4b0b      	ldr	r3, [pc, #44]	; (80089bc <vPortFree+0xac>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	43db      	mvns	r3, r3
 8008992:	401a      	ands	r2, r3
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008998:	f7fe fbb2 	bl	8007100 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	685a      	ldr	r2, [r3, #4]
 80089a0:	4b07      	ldr	r3, [pc, #28]	; (80089c0 <vPortFree+0xb0>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4413      	add	r3, r2
 80089a6:	4a06      	ldr	r2, [pc, #24]	; (80089c0 <vPortFree+0xb0>)
 80089a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80089aa:	6938      	ldr	r0, [r7, #16]
 80089ac:	f000 f86c 	bl	8008a88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80089b0:	f7fe fbb4 	bl	800711c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80089b4:	bf00      	nop
 80089b6:	3718      	adds	r7, #24
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	200026ac 	.word	0x200026ac
 80089c0:	200026a4 	.word	0x200026a4

080089c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80089ca:	f241 7370 	movw	r3, #6000	; 0x1770
 80089ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80089d0:	4b27      	ldr	r3, [pc, #156]	; (8008a70 <prvHeapInit+0xac>)
 80089d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f003 0307 	and.w	r3, r3, #7
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00c      	beq.n	80089f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	3307      	adds	r3, #7
 80089e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f023 0307 	bic.w	r3, r3, #7
 80089ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	4a1f      	ldr	r2, [pc, #124]	; (8008a70 <prvHeapInit+0xac>)
 80089f4:	4413      	add	r3, r2
 80089f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80089fc:	4a1d      	ldr	r2, [pc, #116]	; (8008a74 <prvHeapInit+0xb0>)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008a02:	4b1c      	ldr	r3, [pc, #112]	; (8008a74 <prvHeapInit+0xb0>)
 8008a04:	2200      	movs	r2, #0
 8008a06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008a10:	2208      	movs	r2, #8
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	1a9b      	subs	r3, r3, r2
 8008a16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f023 0307 	bic.w	r3, r3, #7
 8008a1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4a15      	ldr	r2, [pc, #84]	; (8008a78 <prvHeapInit+0xb4>)
 8008a24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008a26:	4b14      	ldr	r3, [pc, #80]	; (8008a78 <prvHeapInit+0xb4>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008a2e:	4b12      	ldr	r3, [pc, #72]	; (8008a78 <prvHeapInit+0xb4>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2200      	movs	r2, #0
 8008a34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	1ad2      	subs	r2, r2, r3
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a44:	4b0c      	ldr	r3, [pc, #48]	; (8008a78 <prvHeapInit+0xb4>)
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	4a0a      	ldr	r2, [pc, #40]	; (8008a7c <prvHeapInit+0xb8>)
 8008a52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	4a09      	ldr	r2, [pc, #36]	; (8008a80 <prvHeapInit+0xbc>)
 8008a5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a5c:	4b09      	ldr	r3, [pc, #36]	; (8008a84 <prvHeapInit+0xc0>)
 8008a5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008a62:	601a      	str	r2, [r3, #0]
}
 8008a64:	bf00      	nop
 8008a66:	3714      	adds	r7, #20
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr
 8008a70:	20000f28 	.word	0x20000f28
 8008a74:	20002698 	.word	0x20002698
 8008a78:	200026a0 	.word	0x200026a0
 8008a7c:	200026a8 	.word	0x200026a8
 8008a80:	200026a4 	.word	0x200026a4
 8008a84:	200026ac 	.word	0x200026ac

08008a88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a90:	4b28      	ldr	r3, [pc, #160]	; (8008b34 <prvInsertBlockIntoFreeList+0xac>)
 8008a92:	60fb      	str	r3, [r7, #12]
 8008a94:	e002      	b.n	8008a9c <prvInsertBlockIntoFreeList+0x14>
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	60fb      	str	r3, [r7, #12]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d8f7      	bhi.n	8008a96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d108      	bne.n	8008aca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	441a      	add	r2, r3
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	68ba      	ldr	r2, [r7, #8]
 8008ad4:	441a      	add	r2, r3
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d118      	bne.n	8008b10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	4b15      	ldr	r3, [pc, #84]	; (8008b38 <prvInsertBlockIntoFreeList+0xb0>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d00d      	beq.n	8008b06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	685a      	ldr	r2, [r3, #4]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	441a      	add	r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	601a      	str	r2, [r3, #0]
 8008b04:	e008      	b.n	8008b18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008b06:	4b0c      	ldr	r3, [pc, #48]	; (8008b38 <prvInsertBlockIntoFreeList+0xb0>)
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	601a      	str	r2, [r3, #0]
 8008b0e:	e003      	b.n	8008b18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d002      	beq.n	8008b26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b26:	bf00      	nop
 8008b28:	3714      	adds	r7, #20
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	20002698 	.word	0x20002698
 8008b38:	200026a0 	.word	0x200026a0

08008b3c <__errno>:
 8008b3c:	4b01      	ldr	r3, [pc, #4]	; (8008b44 <__errno+0x8>)
 8008b3e:	6818      	ldr	r0, [r3, #0]
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	20000030 	.word	0x20000030

08008b48 <__libc_init_array>:
 8008b48:	b570      	push	{r4, r5, r6, lr}
 8008b4a:	4d0d      	ldr	r5, [pc, #52]	; (8008b80 <__libc_init_array+0x38>)
 8008b4c:	4c0d      	ldr	r4, [pc, #52]	; (8008b84 <__libc_init_array+0x3c>)
 8008b4e:	1b64      	subs	r4, r4, r5
 8008b50:	10a4      	asrs	r4, r4, #2
 8008b52:	2600      	movs	r6, #0
 8008b54:	42a6      	cmp	r6, r4
 8008b56:	d109      	bne.n	8008b6c <__libc_init_array+0x24>
 8008b58:	4d0b      	ldr	r5, [pc, #44]	; (8008b88 <__libc_init_array+0x40>)
 8008b5a:	4c0c      	ldr	r4, [pc, #48]	; (8008b8c <__libc_init_array+0x44>)
 8008b5c:	f002 fec8 	bl	800b8f0 <_init>
 8008b60:	1b64      	subs	r4, r4, r5
 8008b62:	10a4      	asrs	r4, r4, #2
 8008b64:	2600      	movs	r6, #0
 8008b66:	42a6      	cmp	r6, r4
 8008b68:	d105      	bne.n	8008b76 <__libc_init_array+0x2e>
 8008b6a:	bd70      	pop	{r4, r5, r6, pc}
 8008b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b70:	4798      	blx	r3
 8008b72:	3601      	adds	r6, #1
 8008b74:	e7ee      	b.n	8008b54 <__libc_init_array+0xc>
 8008b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b7a:	4798      	blx	r3
 8008b7c:	3601      	adds	r6, #1
 8008b7e:	e7f2      	b.n	8008b66 <__libc_init_array+0x1e>
 8008b80:	0800bf24 	.word	0x0800bf24
 8008b84:	0800bf24 	.word	0x0800bf24
 8008b88:	0800bf24 	.word	0x0800bf24
 8008b8c:	0800bf28 	.word	0x0800bf28

08008b90 <memcpy>:
 8008b90:	440a      	add	r2, r1
 8008b92:	4291      	cmp	r1, r2
 8008b94:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b98:	d100      	bne.n	8008b9c <memcpy+0xc>
 8008b9a:	4770      	bx	lr
 8008b9c:	b510      	push	{r4, lr}
 8008b9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ba2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ba6:	4291      	cmp	r1, r2
 8008ba8:	d1f9      	bne.n	8008b9e <memcpy+0xe>
 8008baa:	bd10      	pop	{r4, pc}

08008bac <memset>:
 8008bac:	4402      	add	r2, r0
 8008bae:	4603      	mov	r3, r0
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d100      	bne.n	8008bb6 <memset+0xa>
 8008bb4:	4770      	bx	lr
 8008bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8008bba:	e7f9      	b.n	8008bb0 <memset+0x4>

08008bbc <__cvt>:
 8008bbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc0:	ec55 4b10 	vmov	r4, r5, d0
 8008bc4:	2d00      	cmp	r5, #0
 8008bc6:	460e      	mov	r6, r1
 8008bc8:	4619      	mov	r1, r3
 8008bca:	462b      	mov	r3, r5
 8008bcc:	bfbb      	ittet	lt
 8008bce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008bd2:	461d      	movlt	r5, r3
 8008bd4:	2300      	movge	r3, #0
 8008bd6:	232d      	movlt	r3, #45	; 0x2d
 8008bd8:	700b      	strb	r3, [r1, #0]
 8008bda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bdc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008be0:	4691      	mov	r9, r2
 8008be2:	f023 0820 	bic.w	r8, r3, #32
 8008be6:	bfbc      	itt	lt
 8008be8:	4622      	movlt	r2, r4
 8008bea:	4614      	movlt	r4, r2
 8008bec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008bf0:	d005      	beq.n	8008bfe <__cvt+0x42>
 8008bf2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008bf6:	d100      	bne.n	8008bfa <__cvt+0x3e>
 8008bf8:	3601      	adds	r6, #1
 8008bfa:	2102      	movs	r1, #2
 8008bfc:	e000      	b.n	8008c00 <__cvt+0x44>
 8008bfe:	2103      	movs	r1, #3
 8008c00:	ab03      	add	r3, sp, #12
 8008c02:	9301      	str	r3, [sp, #4]
 8008c04:	ab02      	add	r3, sp, #8
 8008c06:	9300      	str	r3, [sp, #0]
 8008c08:	ec45 4b10 	vmov	d0, r4, r5
 8008c0c:	4653      	mov	r3, sl
 8008c0e:	4632      	mov	r2, r6
 8008c10:	f000 fcfe 	bl	8009610 <_dtoa_r>
 8008c14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008c18:	4607      	mov	r7, r0
 8008c1a:	d102      	bne.n	8008c22 <__cvt+0x66>
 8008c1c:	f019 0f01 	tst.w	r9, #1
 8008c20:	d022      	beq.n	8008c68 <__cvt+0xac>
 8008c22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008c26:	eb07 0906 	add.w	r9, r7, r6
 8008c2a:	d110      	bne.n	8008c4e <__cvt+0x92>
 8008c2c:	783b      	ldrb	r3, [r7, #0]
 8008c2e:	2b30      	cmp	r3, #48	; 0x30
 8008c30:	d10a      	bne.n	8008c48 <__cvt+0x8c>
 8008c32:	2200      	movs	r2, #0
 8008c34:	2300      	movs	r3, #0
 8008c36:	4620      	mov	r0, r4
 8008c38:	4629      	mov	r1, r5
 8008c3a:	f7f7 ff4d 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c3e:	b918      	cbnz	r0, 8008c48 <__cvt+0x8c>
 8008c40:	f1c6 0601 	rsb	r6, r6, #1
 8008c44:	f8ca 6000 	str.w	r6, [sl]
 8008c48:	f8da 3000 	ldr.w	r3, [sl]
 8008c4c:	4499      	add	r9, r3
 8008c4e:	2200      	movs	r2, #0
 8008c50:	2300      	movs	r3, #0
 8008c52:	4620      	mov	r0, r4
 8008c54:	4629      	mov	r1, r5
 8008c56:	f7f7 ff3f 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c5a:	b108      	cbz	r0, 8008c60 <__cvt+0xa4>
 8008c5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008c60:	2230      	movs	r2, #48	; 0x30
 8008c62:	9b03      	ldr	r3, [sp, #12]
 8008c64:	454b      	cmp	r3, r9
 8008c66:	d307      	bcc.n	8008c78 <__cvt+0xbc>
 8008c68:	9b03      	ldr	r3, [sp, #12]
 8008c6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c6c:	1bdb      	subs	r3, r3, r7
 8008c6e:	4638      	mov	r0, r7
 8008c70:	6013      	str	r3, [r2, #0]
 8008c72:	b004      	add	sp, #16
 8008c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c78:	1c59      	adds	r1, r3, #1
 8008c7a:	9103      	str	r1, [sp, #12]
 8008c7c:	701a      	strb	r2, [r3, #0]
 8008c7e:	e7f0      	b.n	8008c62 <__cvt+0xa6>

08008c80 <__exponent>:
 8008c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c82:	4603      	mov	r3, r0
 8008c84:	2900      	cmp	r1, #0
 8008c86:	bfb8      	it	lt
 8008c88:	4249      	neglt	r1, r1
 8008c8a:	f803 2b02 	strb.w	r2, [r3], #2
 8008c8e:	bfb4      	ite	lt
 8008c90:	222d      	movlt	r2, #45	; 0x2d
 8008c92:	222b      	movge	r2, #43	; 0x2b
 8008c94:	2909      	cmp	r1, #9
 8008c96:	7042      	strb	r2, [r0, #1]
 8008c98:	dd2a      	ble.n	8008cf0 <__exponent+0x70>
 8008c9a:	f10d 0407 	add.w	r4, sp, #7
 8008c9e:	46a4      	mov	ip, r4
 8008ca0:	270a      	movs	r7, #10
 8008ca2:	46a6      	mov	lr, r4
 8008ca4:	460a      	mov	r2, r1
 8008ca6:	fb91 f6f7 	sdiv	r6, r1, r7
 8008caa:	fb07 1516 	mls	r5, r7, r6, r1
 8008cae:	3530      	adds	r5, #48	; 0x30
 8008cb0:	2a63      	cmp	r2, #99	; 0x63
 8008cb2:	f104 34ff 	add.w	r4, r4, #4294967295
 8008cb6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008cba:	4631      	mov	r1, r6
 8008cbc:	dcf1      	bgt.n	8008ca2 <__exponent+0x22>
 8008cbe:	3130      	adds	r1, #48	; 0x30
 8008cc0:	f1ae 0502 	sub.w	r5, lr, #2
 8008cc4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008cc8:	1c44      	adds	r4, r0, #1
 8008cca:	4629      	mov	r1, r5
 8008ccc:	4561      	cmp	r1, ip
 8008cce:	d30a      	bcc.n	8008ce6 <__exponent+0x66>
 8008cd0:	f10d 0209 	add.w	r2, sp, #9
 8008cd4:	eba2 020e 	sub.w	r2, r2, lr
 8008cd8:	4565      	cmp	r5, ip
 8008cda:	bf88      	it	hi
 8008cdc:	2200      	movhi	r2, #0
 8008cde:	4413      	add	r3, r2
 8008ce0:	1a18      	subs	r0, r3, r0
 8008ce2:	b003      	add	sp, #12
 8008ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ce6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cea:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008cee:	e7ed      	b.n	8008ccc <__exponent+0x4c>
 8008cf0:	2330      	movs	r3, #48	; 0x30
 8008cf2:	3130      	adds	r1, #48	; 0x30
 8008cf4:	7083      	strb	r3, [r0, #2]
 8008cf6:	70c1      	strb	r1, [r0, #3]
 8008cf8:	1d03      	adds	r3, r0, #4
 8008cfa:	e7f1      	b.n	8008ce0 <__exponent+0x60>

08008cfc <_printf_float>:
 8008cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d00:	ed2d 8b02 	vpush	{d8}
 8008d04:	b08d      	sub	sp, #52	; 0x34
 8008d06:	460c      	mov	r4, r1
 8008d08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008d0c:	4616      	mov	r6, r2
 8008d0e:	461f      	mov	r7, r3
 8008d10:	4605      	mov	r5, r0
 8008d12:	f001 fa69 	bl	800a1e8 <_localeconv_r>
 8008d16:	f8d0 a000 	ldr.w	sl, [r0]
 8008d1a:	4650      	mov	r0, sl
 8008d1c:	f7f7 fa60 	bl	80001e0 <strlen>
 8008d20:	2300      	movs	r3, #0
 8008d22:	930a      	str	r3, [sp, #40]	; 0x28
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	9305      	str	r3, [sp, #20]
 8008d28:	f8d8 3000 	ldr.w	r3, [r8]
 8008d2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008d30:	3307      	adds	r3, #7
 8008d32:	f023 0307 	bic.w	r3, r3, #7
 8008d36:	f103 0208 	add.w	r2, r3, #8
 8008d3a:	f8c8 2000 	str.w	r2, [r8]
 8008d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d42:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008d46:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008d4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d4e:	9307      	str	r3, [sp, #28]
 8008d50:	f8cd 8018 	str.w	r8, [sp, #24]
 8008d54:	ee08 0a10 	vmov	s16, r0
 8008d58:	4b9f      	ldr	r3, [pc, #636]	; (8008fd8 <_printf_float+0x2dc>)
 8008d5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d62:	f7f7 feeb 	bl	8000b3c <__aeabi_dcmpun>
 8008d66:	bb88      	cbnz	r0, 8008dcc <_printf_float+0xd0>
 8008d68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d6c:	4b9a      	ldr	r3, [pc, #616]	; (8008fd8 <_printf_float+0x2dc>)
 8008d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d72:	f7f7 fec5 	bl	8000b00 <__aeabi_dcmple>
 8008d76:	bb48      	cbnz	r0, 8008dcc <_printf_float+0xd0>
 8008d78:	2200      	movs	r2, #0
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	4640      	mov	r0, r8
 8008d7e:	4649      	mov	r1, r9
 8008d80:	f7f7 feb4 	bl	8000aec <__aeabi_dcmplt>
 8008d84:	b110      	cbz	r0, 8008d8c <_printf_float+0x90>
 8008d86:	232d      	movs	r3, #45	; 0x2d
 8008d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d8c:	4b93      	ldr	r3, [pc, #588]	; (8008fdc <_printf_float+0x2e0>)
 8008d8e:	4894      	ldr	r0, [pc, #592]	; (8008fe0 <_printf_float+0x2e4>)
 8008d90:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008d94:	bf94      	ite	ls
 8008d96:	4698      	movls	r8, r3
 8008d98:	4680      	movhi	r8, r0
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	6123      	str	r3, [r4, #16]
 8008d9e:	9b05      	ldr	r3, [sp, #20]
 8008da0:	f023 0204 	bic.w	r2, r3, #4
 8008da4:	6022      	str	r2, [r4, #0]
 8008da6:	f04f 0900 	mov.w	r9, #0
 8008daa:	9700      	str	r7, [sp, #0]
 8008dac:	4633      	mov	r3, r6
 8008dae:	aa0b      	add	r2, sp, #44	; 0x2c
 8008db0:	4621      	mov	r1, r4
 8008db2:	4628      	mov	r0, r5
 8008db4:	f000 f9d8 	bl	8009168 <_printf_common>
 8008db8:	3001      	adds	r0, #1
 8008dba:	f040 8090 	bne.w	8008ede <_printf_float+0x1e2>
 8008dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc2:	b00d      	add	sp, #52	; 0x34
 8008dc4:	ecbd 8b02 	vpop	{d8}
 8008dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dcc:	4642      	mov	r2, r8
 8008dce:	464b      	mov	r3, r9
 8008dd0:	4640      	mov	r0, r8
 8008dd2:	4649      	mov	r1, r9
 8008dd4:	f7f7 feb2 	bl	8000b3c <__aeabi_dcmpun>
 8008dd8:	b140      	cbz	r0, 8008dec <_printf_float+0xf0>
 8008dda:	464b      	mov	r3, r9
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	bfbc      	itt	lt
 8008de0:	232d      	movlt	r3, #45	; 0x2d
 8008de2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008de6:	487f      	ldr	r0, [pc, #508]	; (8008fe4 <_printf_float+0x2e8>)
 8008de8:	4b7f      	ldr	r3, [pc, #508]	; (8008fe8 <_printf_float+0x2ec>)
 8008dea:	e7d1      	b.n	8008d90 <_printf_float+0x94>
 8008dec:	6863      	ldr	r3, [r4, #4]
 8008dee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008df2:	9206      	str	r2, [sp, #24]
 8008df4:	1c5a      	adds	r2, r3, #1
 8008df6:	d13f      	bne.n	8008e78 <_printf_float+0x17c>
 8008df8:	2306      	movs	r3, #6
 8008dfa:	6063      	str	r3, [r4, #4]
 8008dfc:	9b05      	ldr	r3, [sp, #20]
 8008dfe:	6861      	ldr	r1, [r4, #4]
 8008e00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008e04:	2300      	movs	r3, #0
 8008e06:	9303      	str	r3, [sp, #12]
 8008e08:	ab0a      	add	r3, sp, #40	; 0x28
 8008e0a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008e0e:	ab09      	add	r3, sp, #36	; 0x24
 8008e10:	ec49 8b10 	vmov	d0, r8, r9
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	6022      	str	r2, [r4, #0]
 8008e18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	f7ff fecd 	bl	8008bbc <__cvt>
 8008e22:	9b06      	ldr	r3, [sp, #24]
 8008e24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e26:	2b47      	cmp	r3, #71	; 0x47
 8008e28:	4680      	mov	r8, r0
 8008e2a:	d108      	bne.n	8008e3e <_printf_float+0x142>
 8008e2c:	1cc8      	adds	r0, r1, #3
 8008e2e:	db02      	blt.n	8008e36 <_printf_float+0x13a>
 8008e30:	6863      	ldr	r3, [r4, #4]
 8008e32:	4299      	cmp	r1, r3
 8008e34:	dd41      	ble.n	8008eba <_printf_float+0x1be>
 8008e36:	f1ab 0b02 	sub.w	fp, fp, #2
 8008e3a:	fa5f fb8b 	uxtb.w	fp, fp
 8008e3e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008e42:	d820      	bhi.n	8008e86 <_printf_float+0x18a>
 8008e44:	3901      	subs	r1, #1
 8008e46:	465a      	mov	r2, fp
 8008e48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008e4c:	9109      	str	r1, [sp, #36]	; 0x24
 8008e4e:	f7ff ff17 	bl	8008c80 <__exponent>
 8008e52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e54:	1813      	adds	r3, r2, r0
 8008e56:	2a01      	cmp	r2, #1
 8008e58:	4681      	mov	r9, r0
 8008e5a:	6123      	str	r3, [r4, #16]
 8008e5c:	dc02      	bgt.n	8008e64 <_printf_float+0x168>
 8008e5e:	6822      	ldr	r2, [r4, #0]
 8008e60:	07d2      	lsls	r2, r2, #31
 8008e62:	d501      	bpl.n	8008e68 <_printf_float+0x16c>
 8008e64:	3301      	adds	r3, #1
 8008e66:	6123      	str	r3, [r4, #16]
 8008e68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d09c      	beq.n	8008daa <_printf_float+0xae>
 8008e70:	232d      	movs	r3, #45	; 0x2d
 8008e72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e76:	e798      	b.n	8008daa <_printf_float+0xae>
 8008e78:	9a06      	ldr	r2, [sp, #24]
 8008e7a:	2a47      	cmp	r2, #71	; 0x47
 8008e7c:	d1be      	bne.n	8008dfc <_printf_float+0x100>
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1bc      	bne.n	8008dfc <_printf_float+0x100>
 8008e82:	2301      	movs	r3, #1
 8008e84:	e7b9      	b.n	8008dfa <_printf_float+0xfe>
 8008e86:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008e8a:	d118      	bne.n	8008ebe <_printf_float+0x1c2>
 8008e8c:	2900      	cmp	r1, #0
 8008e8e:	6863      	ldr	r3, [r4, #4]
 8008e90:	dd0b      	ble.n	8008eaa <_printf_float+0x1ae>
 8008e92:	6121      	str	r1, [r4, #16]
 8008e94:	b913      	cbnz	r3, 8008e9c <_printf_float+0x1a0>
 8008e96:	6822      	ldr	r2, [r4, #0]
 8008e98:	07d0      	lsls	r0, r2, #31
 8008e9a:	d502      	bpl.n	8008ea2 <_printf_float+0x1a6>
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	440b      	add	r3, r1
 8008ea0:	6123      	str	r3, [r4, #16]
 8008ea2:	65a1      	str	r1, [r4, #88]	; 0x58
 8008ea4:	f04f 0900 	mov.w	r9, #0
 8008ea8:	e7de      	b.n	8008e68 <_printf_float+0x16c>
 8008eaa:	b913      	cbnz	r3, 8008eb2 <_printf_float+0x1b6>
 8008eac:	6822      	ldr	r2, [r4, #0]
 8008eae:	07d2      	lsls	r2, r2, #31
 8008eb0:	d501      	bpl.n	8008eb6 <_printf_float+0x1ba>
 8008eb2:	3302      	adds	r3, #2
 8008eb4:	e7f4      	b.n	8008ea0 <_printf_float+0x1a4>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e7f2      	b.n	8008ea0 <_printf_float+0x1a4>
 8008eba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ec0:	4299      	cmp	r1, r3
 8008ec2:	db05      	blt.n	8008ed0 <_printf_float+0x1d4>
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	6121      	str	r1, [r4, #16]
 8008ec8:	07d8      	lsls	r0, r3, #31
 8008eca:	d5ea      	bpl.n	8008ea2 <_printf_float+0x1a6>
 8008ecc:	1c4b      	adds	r3, r1, #1
 8008ece:	e7e7      	b.n	8008ea0 <_printf_float+0x1a4>
 8008ed0:	2900      	cmp	r1, #0
 8008ed2:	bfd4      	ite	le
 8008ed4:	f1c1 0202 	rsble	r2, r1, #2
 8008ed8:	2201      	movgt	r2, #1
 8008eda:	4413      	add	r3, r2
 8008edc:	e7e0      	b.n	8008ea0 <_printf_float+0x1a4>
 8008ede:	6823      	ldr	r3, [r4, #0]
 8008ee0:	055a      	lsls	r2, r3, #21
 8008ee2:	d407      	bmi.n	8008ef4 <_printf_float+0x1f8>
 8008ee4:	6923      	ldr	r3, [r4, #16]
 8008ee6:	4642      	mov	r2, r8
 8008ee8:	4631      	mov	r1, r6
 8008eea:	4628      	mov	r0, r5
 8008eec:	47b8      	blx	r7
 8008eee:	3001      	adds	r0, #1
 8008ef0:	d12c      	bne.n	8008f4c <_printf_float+0x250>
 8008ef2:	e764      	b.n	8008dbe <_printf_float+0xc2>
 8008ef4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008ef8:	f240 80e0 	bls.w	80090bc <_printf_float+0x3c0>
 8008efc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f00:	2200      	movs	r2, #0
 8008f02:	2300      	movs	r3, #0
 8008f04:	f7f7 fde8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	d034      	beq.n	8008f76 <_printf_float+0x27a>
 8008f0c:	4a37      	ldr	r2, [pc, #220]	; (8008fec <_printf_float+0x2f0>)
 8008f0e:	2301      	movs	r3, #1
 8008f10:	4631      	mov	r1, r6
 8008f12:	4628      	mov	r0, r5
 8008f14:	47b8      	blx	r7
 8008f16:	3001      	adds	r0, #1
 8008f18:	f43f af51 	beq.w	8008dbe <_printf_float+0xc2>
 8008f1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f20:	429a      	cmp	r2, r3
 8008f22:	db02      	blt.n	8008f2a <_printf_float+0x22e>
 8008f24:	6823      	ldr	r3, [r4, #0]
 8008f26:	07d8      	lsls	r0, r3, #31
 8008f28:	d510      	bpl.n	8008f4c <_printf_float+0x250>
 8008f2a:	ee18 3a10 	vmov	r3, s16
 8008f2e:	4652      	mov	r2, sl
 8008f30:	4631      	mov	r1, r6
 8008f32:	4628      	mov	r0, r5
 8008f34:	47b8      	blx	r7
 8008f36:	3001      	adds	r0, #1
 8008f38:	f43f af41 	beq.w	8008dbe <_printf_float+0xc2>
 8008f3c:	f04f 0800 	mov.w	r8, #0
 8008f40:	f104 091a 	add.w	r9, r4, #26
 8008f44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f46:	3b01      	subs	r3, #1
 8008f48:	4543      	cmp	r3, r8
 8008f4a:	dc09      	bgt.n	8008f60 <_printf_float+0x264>
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	079b      	lsls	r3, r3, #30
 8008f50:	f100 8105 	bmi.w	800915e <_printf_float+0x462>
 8008f54:	68e0      	ldr	r0, [r4, #12]
 8008f56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f58:	4298      	cmp	r0, r3
 8008f5a:	bfb8      	it	lt
 8008f5c:	4618      	movlt	r0, r3
 8008f5e:	e730      	b.n	8008dc2 <_printf_float+0xc6>
 8008f60:	2301      	movs	r3, #1
 8008f62:	464a      	mov	r2, r9
 8008f64:	4631      	mov	r1, r6
 8008f66:	4628      	mov	r0, r5
 8008f68:	47b8      	blx	r7
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	f43f af27 	beq.w	8008dbe <_printf_float+0xc2>
 8008f70:	f108 0801 	add.w	r8, r8, #1
 8008f74:	e7e6      	b.n	8008f44 <_printf_float+0x248>
 8008f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	dc39      	bgt.n	8008ff0 <_printf_float+0x2f4>
 8008f7c:	4a1b      	ldr	r2, [pc, #108]	; (8008fec <_printf_float+0x2f0>)
 8008f7e:	2301      	movs	r3, #1
 8008f80:	4631      	mov	r1, r6
 8008f82:	4628      	mov	r0, r5
 8008f84:	47b8      	blx	r7
 8008f86:	3001      	adds	r0, #1
 8008f88:	f43f af19 	beq.w	8008dbe <_printf_float+0xc2>
 8008f8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f90:	4313      	orrs	r3, r2
 8008f92:	d102      	bne.n	8008f9a <_printf_float+0x29e>
 8008f94:	6823      	ldr	r3, [r4, #0]
 8008f96:	07d9      	lsls	r1, r3, #31
 8008f98:	d5d8      	bpl.n	8008f4c <_printf_float+0x250>
 8008f9a:	ee18 3a10 	vmov	r3, s16
 8008f9e:	4652      	mov	r2, sl
 8008fa0:	4631      	mov	r1, r6
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	47b8      	blx	r7
 8008fa6:	3001      	adds	r0, #1
 8008fa8:	f43f af09 	beq.w	8008dbe <_printf_float+0xc2>
 8008fac:	f04f 0900 	mov.w	r9, #0
 8008fb0:	f104 0a1a 	add.w	sl, r4, #26
 8008fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fb6:	425b      	negs	r3, r3
 8008fb8:	454b      	cmp	r3, r9
 8008fba:	dc01      	bgt.n	8008fc0 <_printf_float+0x2c4>
 8008fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fbe:	e792      	b.n	8008ee6 <_printf_float+0x1ea>
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	4652      	mov	r2, sl
 8008fc4:	4631      	mov	r1, r6
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	47b8      	blx	r7
 8008fca:	3001      	adds	r0, #1
 8008fcc:	f43f aef7 	beq.w	8008dbe <_printf_float+0xc2>
 8008fd0:	f109 0901 	add.w	r9, r9, #1
 8008fd4:	e7ee      	b.n	8008fb4 <_printf_float+0x2b8>
 8008fd6:	bf00      	nop
 8008fd8:	7fefffff 	.word	0x7fefffff
 8008fdc:	0800bb48 	.word	0x0800bb48
 8008fe0:	0800bb4c 	.word	0x0800bb4c
 8008fe4:	0800bb54 	.word	0x0800bb54
 8008fe8:	0800bb50 	.word	0x0800bb50
 8008fec:	0800bb58 	.word	0x0800bb58
 8008ff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ff2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	bfa8      	it	ge
 8008ff8:	461a      	movge	r2, r3
 8008ffa:	2a00      	cmp	r2, #0
 8008ffc:	4691      	mov	r9, r2
 8008ffe:	dc37      	bgt.n	8009070 <_printf_float+0x374>
 8009000:	f04f 0b00 	mov.w	fp, #0
 8009004:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009008:	f104 021a 	add.w	r2, r4, #26
 800900c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800900e:	9305      	str	r3, [sp, #20]
 8009010:	eba3 0309 	sub.w	r3, r3, r9
 8009014:	455b      	cmp	r3, fp
 8009016:	dc33      	bgt.n	8009080 <_printf_float+0x384>
 8009018:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800901c:	429a      	cmp	r2, r3
 800901e:	db3b      	blt.n	8009098 <_printf_float+0x39c>
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	07da      	lsls	r2, r3, #31
 8009024:	d438      	bmi.n	8009098 <_printf_float+0x39c>
 8009026:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009028:	9b05      	ldr	r3, [sp, #20]
 800902a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	eba2 0901 	sub.w	r9, r2, r1
 8009032:	4599      	cmp	r9, r3
 8009034:	bfa8      	it	ge
 8009036:	4699      	movge	r9, r3
 8009038:	f1b9 0f00 	cmp.w	r9, #0
 800903c:	dc35      	bgt.n	80090aa <_printf_float+0x3ae>
 800903e:	f04f 0800 	mov.w	r8, #0
 8009042:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009046:	f104 0a1a 	add.w	sl, r4, #26
 800904a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800904e:	1a9b      	subs	r3, r3, r2
 8009050:	eba3 0309 	sub.w	r3, r3, r9
 8009054:	4543      	cmp	r3, r8
 8009056:	f77f af79 	ble.w	8008f4c <_printf_float+0x250>
 800905a:	2301      	movs	r3, #1
 800905c:	4652      	mov	r2, sl
 800905e:	4631      	mov	r1, r6
 8009060:	4628      	mov	r0, r5
 8009062:	47b8      	blx	r7
 8009064:	3001      	adds	r0, #1
 8009066:	f43f aeaa 	beq.w	8008dbe <_printf_float+0xc2>
 800906a:	f108 0801 	add.w	r8, r8, #1
 800906e:	e7ec      	b.n	800904a <_printf_float+0x34e>
 8009070:	4613      	mov	r3, r2
 8009072:	4631      	mov	r1, r6
 8009074:	4642      	mov	r2, r8
 8009076:	4628      	mov	r0, r5
 8009078:	47b8      	blx	r7
 800907a:	3001      	adds	r0, #1
 800907c:	d1c0      	bne.n	8009000 <_printf_float+0x304>
 800907e:	e69e      	b.n	8008dbe <_printf_float+0xc2>
 8009080:	2301      	movs	r3, #1
 8009082:	4631      	mov	r1, r6
 8009084:	4628      	mov	r0, r5
 8009086:	9205      	str	r2, [sp, #20]
 8009088:	47b8      	blx	r7
 800908a:	3001      	adds	r0, #1
 800908c:	f43f ae97 	beq.w	8008dbe <_printf_float+0xc2>
 8009090:	9a05      	ldr	r2, [sp, #20]
 8009092:	f10b 0b01 	add.w	fp, fp, #1
 8009096:	e7b9      	b.n	800900c <_printf_float+0x310>
 8009098:	ee18 3a10 	vmov	r3, s16
 800909c:	4652      	mov	r2, sl
 800909e:	4631      	mov	r1, r6
 80090a0:	4628      	mov	r0, r5
 80090a2:	47b8      	blx	r7
 80090a4:	3001      	adds	r0, #1
 80090a6:	d1be      	bne.n	8009026 <_printf_float+0x32a>
 80090a8:	e689      	b.n	8008dbe <_printf_float+0xc2>
 80090aa:	9a05      	ldr	r2, [sp, #20]
 80090ac:	464b      	mov	r3, r9
 80090ae:	4442      	add	r2, r8
 80090b0:	4631      	mov	r1, r6
 80090b2:	4628      	mov	r0, r5
 80090b4:	47b8      	blx	r7
 80090b6:	3001      	adds	r0, #1
 80090b8:	d1c1      	bne.n	800903e <_printf_float+0x342>
 80090ba:	e680      	b.n	8008dbe <_printf_float+0xc2>
 80090bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090be:	2a01      	cmp	r2, #1
 80090c0:	dc01      	bgt.n	80090c6 <_printf_float+0x3ca>
 80090c2:	07db      	lsls	r3, r3, #31
 80090c4:	d538      	bpl.n	8009138 <_printf_float+0x43c>
 80090c6:	2301      	movs	r3, #1
 80090c8:	4642      	mov	r2, r8
 80090ca:	4631      	mov	r1, r6
 80090cc:	4628      	mov	r0, r5
 80090ce:	47b8      	blx	r7
 80090d0:	3001      	adds	r0, #1
 80090d2:	f43f ae74 	beq.w	8008dbe <_printf_float+0xc2>
 80090d6:	ee18 3a10 	vmov	r3, s16
 80090da:	4652      	mov	r2, sl
 80090dc:	4631      	mov	r1, r6
 80090de:	4628      	mov	r0, r5
 80090e0:	47b8      	blx	r7
 80090e2:	3001      	adds	r0, #1
 80090e4:	f43f ae6b 	beq.w	8008dbe <_printf_float+0xc2>
 80090e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090ec:	2200      	movs	r2, #0
 80090ee:	2300      	movs	r3, #0
 80090f0:	f7f7 fcf2 	bl	8000ad8 <__aeabi_dcmpeq>
 80090f4:	b9d8      	cbnz	r0, 800912e <_printf_float+0x432>
 80090f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090f8:	f108 0201 	add.w	r2, r8, #1
 80090fc:	3b01      	subs	r3, #1
 80090fe:	4631      	mov	r1, r6
 8009100:	4628      	mov	r0, r5
 8009102:	47b8      	blx	r7
 8009104:	3001      	adds	r0, #1
 8009106:	d10e      	bne.n	8009126 <_printf_float+0x42a>
 8009108:	e659      	b.n	8008dbe <_printf_float+0xc2>
 800910a:	2301      	movs	r3, #1
 800910c:	4652      	mov	r2, sl
 800910e:	4631      	mov	r1, r6
 8009110:	4628      	mov	r0, r5
 8009112:	47b8      	blx	r7
 8009114:	3001      	adds	r0, #1
 8009116:	f43f ae52 	beq.w	8008dbe <_printf_float+0xc2>
 800911a:	f108 0801 	add.w	r8, r8, #1
 800911e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009120:	3b01      	subs	r3, #1
 8009122:	4543      	cmp	r3, r8
 8009124:	dcf1      	bgt.n	800910a <_printf_float+0x40e>
 8009126:	464b      	mov	r3, r9
 8009128:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800912c:	e6dc      	b.n	8008ee8 <_printf_float+0x1ec>
 800912e:	f04f 0800 	mov.w	r8, #0
 8009132:	f104 0a1a 	add.w	sl, r4, #26
 8009136:	e7f2      	b.n	800911e <_printf_float+0x422>
 8009138:	2301      	movs	r3, #1
 800913a:	4642      	mov	r2, r8
 800913c:	e7df      	b.n	80090fe <_printf_float+0x402>
 800913e:	2301      	movs	r3, #1
 8009140:	464a      	mov	r2, r9
 8009142:	4631      	mov	r1, r6
 8009144:	4628      	mov	r0, r5
 8009146:	47b8      	blx	r7
 8009148:	3001      	adds	r0, #1
 800914a:	f43f ae38 	beq.w	8008dbe <_printf_float+0xc2>
 800914e:	f108 0801 	add.w	r8, r8, #1
 8009152:	68e3      	ldr	r3, [r4, #12]
 8009154:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009156:	1a5b      	subs	r3, r3, r1
 8009158:	4543      	cmp	r3, r8
 800915a:	dcf0      	bgt.n	800913e <_printf_float+0x442>
 800915c:	e6fa      	b.n	8008f54 <_printf_float+0x258>
 800915e:	f04f 0800 	mov.w	r8, #0
 8009162:	f104 0919 	add.w	r9, r4, #25
 8009166:	e7f4      	b.n	8009152 <_printf_float+0x456>

08009168 <_printf_common>:
 8009168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800916c:	4616      	mov	r6, r2
 800916e:	4699      	mov	r9, r3
 8009170:	688a      	ldr	r2, [r1, #8]
 8009172:	690b      	ldr	r3, [r1, #16]
 8009174:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009178:	4293      	cmp	r3, r2
 800917a:	bfb8      	it	lt
 800917c:	4613      	movlt	r3, r2
 800917e:	6033      	str	r3, [r6, #0]
 8009180:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009184:	4607      	mov	r7, r0
 8009186:	460c      	mov	r4, r1
 8009188:	b10a      	cbz	r2, 800918e <_printf_common+0x26>
 800918a:	3301      	adds	r3, #1
 800918c:	6033      	str	r3, [r6, #0]
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	0699      	lsls	r1, r3, #26
 8009192:	bf42      	ittt	mi
 8009194:	6833      	ldrmi	r3, [r6, #0]
 8009196:	3302      	addmi	r3, #2
 8009198:	6033      	strmi	r3, [r6, #0]
 800919a:	6825      	ldr	r5, [r4, #0]
 800919c:	f015 0506 	ands.w	r5, r5, #6
 80091a0:	d106      	bne.n	80091b0 <_printf_common+0x48>
 80091a2:	f104 0a19 	add.w	sl, r4, #25
 80091a6:	68e3      	ldr	r3, [r4, #12]
 80091a8:	6832      	ldr	r2, [r6, #0]
 80091aa:	1a9b      	subs	r3, r3, r2
 80091ac:	42ab      	cmp	r3, r5
 80091ae:	dc26      	bgt.n	80091fe <_printf_common+0x96>
 80091b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80091b4:	1e13      	subs	r3, r2, #0
 80091b6:	6822      	ldr	r2, [r4, #0]
 80091b8:	bf18      	it	ne
 80091ba:	2301      	movne	r3, #1
 80091bc:	0692      	lsls	r2, r2, #26
 80091be:	d42b      	bmi.n	8009218 <_printf_common+0xb0>
 80091c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091c4:	4649      	mov	r1, r9
 80091c6:	4638      	mov	r0, r7
 80091c8:	47c0      	blx	r8
 80091ca:	3001      	adds	r0, #1
 80091cc:	d01e      	beq.n	800920c <_printf_common+0xa4>
 80091ce:	6823      	ldr	r3, [r4, #0]
 80091d0:	68e5      	ldr	r5, [r4, #12]
 80091d2:	6832      	ldr	r2, [r6, #0]
 80091d4:	f003 0306 	and.w	r3, r3, #6
 80091d8:	2b04      	cmp	r3, #4
 80091da:	bf08      	it	eq
 80091dc:	1aad      	subeq	r5, r5, r2
 80091de:	68a3      	ldr	r3, [r4, #8]
 80091e0:	6922      	ldr	r2, [r4, #16]
 80091e2:	bf0c      	ite	eq
 80091e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091e8:	2500      	movne	r5, #0
 80091ea:	4293      	cmp	r3, r2
 80091ec:	bfc4      	itt	gt
 80091ee:	1a9b      	subgt	r3, r3, r2
 80091f0:	18ed      	addgt	r5, r5, r3
 80091f2:	2600      	movs	r6, #0
 80091f4:	341a      	adds	r4, #26
 80091f6:	42b5      	cmp	r5, r6
 80091f8:	d11a      	bne.n	8009230 <_printf_common+0xc8>
 80091fa:	2000      	movs	r0, #0
 80091fc:	e008      	b.n	8009210 <_printf_common+0xa8>
 80091fe:	2301      	movs	r3, #1
 8009200:	4652      	mov	r2, sl
 8009202:	4649      	mov	r1, r9
 8009204:	4638      	mov	r0, r7
 8009206:	47c0      	blx	r8
 8009208:	3001      	adds	r0, #1
 800920a:	d103      	bne.n	8009214 <_printf_common+0xac>
 800920c:	f04f 30ff 	mov.w	r0, #4294967295
 8009210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009214:	3501      	adds	r5, #1
 8009216:	e7c6      	b.n	80091a6 <_printf_common+0x3e>
 8009218:	18e1      	adds	r1, r4, r3
 800921a:	1c5a      	adds	r2, r3, #1
 800921c:	2030      	movs	r0, #48	; 0x30
 800921e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009222:	4422      	add	r2, r4
 8009224:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009228:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800922c:	3302      	adds	r3, #2
 800922e:	e7c7      	b.n	80091c0 <_printf_common+0x58>
 8009230:	2301      	movs	r3, #1
 8009232:	4622      	mov	r2, r4
 8009234:	4649      	mov	r1, r9
 8009236:	4638      	mov	r0, r7
 8009238:	47c0      	blx	r8
 800923a:	3001      	adds	r0, #1
 800923c:	d0e6      	beq.n	800920c <_printf_common+0xa4>
 800923e:	3601      	adds	r6, #1
 8009240:	e7d9      	b.n	80091f6 <_printf_common+0x8e>
	...

08009244 <_printf_i>:
 8009244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009248:	460c      	mov	r4, r1
 800924a:	4691      	mov	r9, r2
 800924c:	7e27      	ldrb	r7, [r4, #24]
 800924e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009250:	2f78      	cmp	r7, #120	; 0x78
 8009252:	4680      	mov	r8, r0
 8009254:	469a      	mov	sl, r3
 8009256:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800925a:	d807      	bhi.n	800926c <_printf_i+0x28>
 800925c:	2f62      	cmp	r7, #98	; 0x62
 800925e:	d80a      	bhi.n	8009276 <_printf_i+0x32>
 8009260:	2f00      	cmp	r7, #0
 8009262:	f000 80d8 	beq.w	8009416 <_printf_i+0x1d2>
 8009266:	2f58      	cmp	r7, #88	; 0x58
 8009268:	f000 80a3 	beq.w	80093b2 <_printf_i+0x16e>
 800926c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009270:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009274:	e03a      	b.n	80092ec <_printf_i+0xa8>
 8009276:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800927a:	2b15      	cmp	r3, #21
 800927c:	d8f6      	bhi.n	800926c <_printf_i+0x28>
 800927e:	a001      	add	r0, pc, #4	; (adr r0, 8009284 <_printf_i+0x40>)
 8009280:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009284:	080092dd 	.word	0x080092dd
 8009288:	080092f1 	.word	0x080092f1
 800928c:	0800926d 	.word	0x0800926d
 8009290:	0800926d 	.word	0x0800926d
 8009294:	0800926d 	.word	0x0800926d
 8009298:	0800926d 	.word	0x0800926d
 800929c:	080092f1 	.word	0x080092f1
 80092a0:	0800926d 	.word	0x0800926d
 80092a4:	0800926d 	.word	0x0800926d
 80092a8:	0800926d 	.word	0x0800926d
 80092ac:	0800926d 	.word	0x0800926d
 80092b0:	080093fd 	.word	0x080093fd
 80092b4:	08009321 	.word	0x08009321
 80092b8:	080093df 	.word	0x080093df
 80092bc:	0800926d 	.word	0x0800926d
 80092c0:	0800926d 	.word	0x0800926d
 80092c4:	0800941f 	.word	0x0800941f
 80092c8:	0800926d 	.word	0x0800926d
 80092cc:	08009321 	.word	0x08009321
 80092d0:	0800926d 	.word	0x0800926d
 80092d4:	0800926d 	.word	0x0800926d
 80092d8:	080093e7 	.word	0x080093e7
 80092dc:	680b      	ldr	r3, [r1, #0]
 80092de:	1d1a      	adds	r2, r3, #4
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	600a      	str	r2, [r1, #0]
 80092e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80092e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092ec:	2301      	movs	r3, #1
 80092ee:	e0a3      	b.n	8009438 <_printf_i+0x1f4>
 80092f0:	6825      	ldr	r5, [r4, #0]
 80092f2:	6808      	ldr	r0, [r1, #0]
 80092f4:	062e      	lsls	r6, r5, #24
 80092f6:	f100 0304 	add.w	r3, r0, #4
 80092fa:	d50a      	bpl.n	8009312 <_printf_i+0xce>
 80092fc:	6805      	ldr	r5, [r0, #0]
 80092fe:	600b      	str	r3, [r1, #0]
 8009300:	2d00      	cmp	r5, #0
 8009302:	da03      	bge.n	800930c <_printf_i+0xc8>
 8009304:	232d      	movs	r3, #45	; 0x2d
 8009306:	426d      	negs	r5, r5
 8009308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800930c:	485e      	ldr	r0, [pc, #376]	; (8009488 <_printf_i+0x244>)
 800930e:	230a      	movs	r3, #10
 8009310:	e019      	b.n	8009346 <_printf_i+0x102>
 8009312:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009316:	6805      	ldr	r5, [r0, #0]
 8009318:	600b      	str	r3, [r1, #0]
 800931a:	bf18      	it	ne
 800931c:	b22d      	sxthne	r5, r5
 800931e:	e7ef      	b.n	8009300 <_printf_i+0xbc>
 8009320:	680b      	ldr	r3, [r1, #0]
 8009322:	6825      	ldr	r5, [r4, #0]
 8009324:	1d18      	adds	r0, r3, #4
 8009326:	6008      	str	r0, [r1, #0]
 8009328:	0628      	lsls	r0, r5, #24
 800932a:	d501      	bpl.n	8009330 <_printf_i+0xec>
 800932c:	681d      	ldr	r5, [r3, #0]
 800932e:	e002      	b.n	8009336 <_printf_i+0xf2>
 8009330:	0669      	lsls	r1, r5, #25
 8009332:	d5fb      	bpl.n	800932c <_printf_i+0xe8>
 8009334:	881d      	ldrh	r5, [r3, #0]
 8009336:	4854      	ldr	r0, [pc, #336]	; (8009488 <_printf_i+0x244>)
 8009338:	2f6f      	cmp	r7, #111	; 0x6f
 800933a:	bf0c      	ite	eq
 800933c:	2308      	moveq	r3, #8
 800933e:	230a      	movne	r3, #10
 8009340:	2100      	movs	r1, #0
 8009342:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009346:	6866      	ldr	r6, [r4, #4]
 8009348:	60a6      	str	r6, [r4, #8]
 800934a:	2e00      	cmp	r6, #0
 800934c:	bfa2      	ittt	ge
 800934e:	6821      	ldrge	r1, [r4, #0]
 8009350:	f021 0104 	bicge.w	r1, r1, #4
 8009354:	6021      	strge	r1, [r4, #0]
 8009356:	b90d      	cbnz	r5, 800935c <_printf_i+0x118>
 8009358:	2e00      	cmp	r6, #0
 800935a:	d04d      	beq.n	80093f8 <_printf_i+0x1b4>
 800935c:	4616      	mov	r6, r2
 800935e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009362:	fb03 5711 	mls	r7, r3, r1, r5
 8009366:	5dc7      	ldrb	r7, [r0, r7]
 8009368:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800936c:	462f      	mov	r7, r5
 800936e:	42bb      	cmp	r3, r7
 8009370:	460d      	mov	r5, r1
 8009372:	d9f4      	bls.n	800935e <_printf_i+0x11a>
 8009374:	2b08      	cmp	r3, #8
 8009376:	d10b      	bne.n	8009390 <_printf_i+0x14c>
 8009378:	6823      	ldr	r3, [r4, #0]
 800937a:	07df      	lsls	r7, r3, #31
 800937c:	d508      	bpl.n	8009390 <_printf_i+0x14c>
 800937e:	6923      	ldr	r3, [r4, #16]
 8009380:	6861      	ldr	r1, [r4, #4]
 8009382:	4299      	cmp	r1, r3
 8009384:	bfde      	ittt	le
 8009386:	2330      	movle	r3, #48	; 0x30
 8009388:	f806 3c01 	strble.w	r3, [r6, #-1]
 800938c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009390:	1b92      	subs	r2, r2, r6
 8009392:	6122      	str	r2, [r4, #16]
 8009394:	f8cd a000 	str.w	sl, [sp]
 8009398:	464b      	mov	r3, r9
 800939a:	aa03      	add	r2, sp, #12
 800939c:	4621      	mov	r1, r4
 800939e:	4640      	mov	r0, r8
 80093a0:	f7ff fee2 	bl	8009168 <_printf_common>
 80093a4:	3001      	adds	r0, #1
 80093a6:	d14c      	bne.n	8009442 <_printf_i+0x1fe>
 80093a8:	f04f 30ff 	mov.w	r0, #4294967295
 80093ac:	b004      	add	sp, #16
 80093ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b2:	4835      	ldr	r0, [pc, #212]	; (8009488 <_printf_i+0x244>)
 80093b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80093b8:	6823      	ldr	r3, [r4, #0]
 80093ba:	680e      	ldr	r6, [r1, #0]
 80093bc:	061f      	lsls	r7, r3, #24
 80093be:	f856 5b04 	ldr.w	r5, [r6], #4
 80093c2:	600e      	str	r6, [r1, #0]
 80093c4:	d514      	bpl.n	80093f0 <_printf_i+0x1ac>
 80093c6:	07d9      	lsls	r1, r3, #31
 80093c8:	bf44      	itt	mi
 80093ca:	f043 0320 	orrmi.w	r3, r3, #32
 80093ce:	6023      	strmi	r3, [r4, #0]
 80093d0:	b91d      	cbnz	r5, 80093da <_printf_i+0x196>
 80093d2:	6823      	ldr	r3, [r4, #0]
 80093d4:	f023 0320 	bic.w	r3, r3, #32
 80093d8:	6023      	str	r3, [r4, #0]
 80093da:	2310      	movs	r3, #16
 80093dc:	e7b0      	b.n	8009340 <_printf_i+0xfc>
 80093de:	6823      	ldr	r3, [r4, #0]
 80093e0:	f043 0320 	orr.w	r3, r3, #32
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	2378      	movs	r3, #120	; 0x78
 80093e8:	4828      	ldr	r0, [pc, #160]	; (800948c <_printf_i+0x248>)
 80093ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093ee:	e7e3      	b.n	80093b8 <_printf_i+0x174>
 80093f0:	065e      	lsls	r6, r3, #25
 80093f2:	bf48      	it	mi
 80093f4:	b2ad      	uxthmi	r5, r5
 80093f6:	e7e6      	b.n	80093c6 <_printf_i+0x182>
 80093f8:	4616      	mov	r6, r2
 80093fa:	e7bb      	b.n	8009374 <_printf_i+0x130>
 80093fc:	680b      	ldr	r3, [r1, #0]
 80093fe:	6826      	ldr	r6, [r4, #0]
 8009400:	6960      	ldr	r0, [r4, #20]
 8009402:	1d1d      	adds	r5, r3, #4
 8009404:	600d      	str	r5, [r1, #0]
 8009406:	0635      	lsls	r5, r6, #24
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	d501      	bpl.n	8009410 <_printf_i+0x1cc>
 800940c:	6018      	str	r0, [r3, #0]
 800940e:	e002      	b.n	8009416 <_printf_i+0x1d2>
 8009410:	0671      	lsls	r1, r6, #25
 8009412:	d5fb      	bpl.n	800940c <_printf_i+0x1c8>
 8009414:	8018      	strh	r0, [r3, #0]
 8009416:	2300      	movs	r3, #0
 8009418:	6123      	str	r3, [r4, #16]
 800941a:	4616      	mov	r6, r2
 800941c:	e7ba      	b.n	8009394 <_printf_i+0x150>
 800941e:	680b      	ldr	r3, [r1, #0]
 8009420:	1d1a      	adds	r2, r3, #4
 8009422:	600a      	str	r2, [r1, #0]
 8009424:	681e      	ldr	r6, [r3, #0]
 8009426:	6862      	ldr	r2, [r4, #4]
 8009428:	2100      	movs	r1, #0
 800942a:	4630      	mov	r0, r6
 800942c:	f7f6 fee0 	bl	80001f0 <memchr>
 8009430:	b108      	cbz	r0, 8009436 <_printf_i+0x1f2>
 8009432:	1b80      	subs	r0, r0, r6
 8009434:	6060      	str	r0, [r4, #4]
 8009436:	6863      	ldr	r3, [r4, #4]
 8009438:	6123      	str	r3, [r4, #16]
 800943a:	2300      	movs	r3, #0
 800943c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009440:	e7a8      	b.n	8009394 <_printf_i+0x150>
 8009442:	6923      	ldr	r3, [r4, #16]
 8009444:	4632      	mov	r2, r6
 8009446:	4649      	mov	r1, r9
 8009448:	4640      	mov	r0, r8
 800944a:	47d0      	blx	sl
 800944c:	3001      	adds	r0, #1
 800944e:	d0ab      	beq.n	80093a8 <_printf_i+0x164>
 8009450:	6823      	ldr	r3, [r4, #0]
 8009452:	079b      	lsls	r3, r3, #30
 8009454:	d413      	bmi.n	800947e <_printf_i+0x23a>
 8009456:	68e0      	ldr	r0, [r4, #12]
 8009458:	9b03      	ldr	r3, [sp, #12]
 800945a:	4298      	cmp	r0, r3
 800945c:	bfb8      	it	lt
 800945e:	4618      	movlt	r0, r3
 8009460:	e7a4      	b.n	80093ac <_printf_i+0x168>
 8009462:	2301      	movs	r3, #1
 8009464:	4632      	mov	r2, r6
 8009466:	4649      	mov	r1, r9
 8009468:	4640      	mov	r0, r8
 800946a:	47d0      	blx	sl
 800946c:	3001      	adds	r0, #1
 800946e:	d09b      	beq.n	80093a8 <_printf_i+0x164>
 8009470:	3501      	adds	r5, #1
 8009472:	68e3      	ldr	r3, [r4, #12]
 8009474:	9903      	ldr	r1, [sp, #12]
 8009476:	1a5b      	subs	r3, r3, r1
 8009478:	42ab      	cmp	r3, r5
 800947a:	dcf2      	bgt.n	8009462 <_printf_i+0x21e>
 800947c:	e7eb      	b.n	8009456 <_printf_i+0x212>
 800947e:	2500      	movs	r5, #0
 8009480:	f104 0619 	add.w	r6, r4, #25
 8009484:	e7f5      	b.n	8009472 <_printf_i+0x22e>
 8009486:	bf00      	nop
 8009488:	0800bb5a 	.word	0x0800bb5a
 800948c:	0800bb6b 	.word	0x0800bb6b

08009490 <sniprintf>:
 8009490:	b40c      	push	{r2, r3}
 8009492:	b530      	push	{r4, r5, lr}
 8009494:	4b17      	ldr	r3, [pc, #92]	; (80094f4 <sniprintf+0x64>)
 8009496:	1e0c      	subs	r4, r1, #0
 8009498:	681d      	ldr	r5, [r3, #0]
 800949a:	b09d      	sub	sp, #116	; 0x74
 800949c:	da08      	bge.n	80094b0 <sniprintf+0x20>
 800949e:	238b      	movs	r3, #139	; 0x8b
 80094a0:	602b      	str	r3, [r5, #0]
 80094a2:	f04f 30ff 	mov.w	r0, #4294967295
 80094a6:	b01d      	add	sp, #116	; 0x74
 80094a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094ac:	b002      	add	sp, #8
 80094ae:	4770      	bx	lr
 80094b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80094b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80094b8:	bf14      	ite	ne
 80094ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 80094be:	4623      	moveq	r3, r4
 80094c0:	9304      	str	r3, [sp, #16]
 80094c2:	9307      	str	r3, [sp, #28]
 80094c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80094c8:	9002      	str	r0, [sp, #8]
 80094ca:	9006      	str	r0, [sp, #24]
 80094cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80094d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80094d2:	ab21      	add	r3, sp, #132	; 0x84
 80094d4:	a902      	add	r1, sp, #8
 80094d6:	4628      	mov	r0, r5
 80094d8:	9301      	str	r3, [sp, #4]
 80094da:	f001 fb25 	bl	800ab28 <_svfiprintf_r>
 80094de:	1c43      	adds	r3, r0, #1
 80094e0:	bfbc      	itt	lt
 80094e2:	238b      	movlt	r3, #139	; 0x8b
 80094e4:	602b      	strlt	r3, [r5, #0]
 80094e6:	2c00      	cmp	r4, #0
 80094e8:	d0dd      	beq.n	80094a6 <sniprintf+0x16>
 80094ea:	9b02      	ldr	r3, [sp, #8]
 80094ec:	2200      	movs	r2, #0
 80094ee:	701a      	strb	r2, [r3, #0]
 80094f0:	e7d9      	b.n	80094a6 <sniprintf+0x16>
 80094f2:	bf00      	nop
 80094f4:	20000030 	.word	0x20000030

080094f8 <quorem>:
 80094f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094fc:	6903      	ldr	r3, [r0, #16]
 80094fe:	690c      	ldr	r4, [r1, #16]
 8009500:	42a3      	cmp	r3, r4
 8009502:	4607      	mov	r7, r0
 8009504:	f2c0 8081 	blt.w	800960a <quorem+0x112>
 8009508:	3c01      	subs	r4, #1
 800950a:	f101 0814 	add.w	r8, r1, #20
 800950e:	f100 0514 	add.w	r5, r0, #20
 8009512:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009516:	9301      	str	r3, [sp, #4]
 8009518:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800951c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009520:	3301      	adds	r3, #1
 8009522:	429a      	cmp	r2, r3
 8009524:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009528:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800952c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009530:	d331      	bcc.n	8009596 <quorem+0x9e>
 8009532:	f04f 0e00 	mov.w	lr, #0
 8009536:	4640      	mov	r0, r8
 8009538:	46ac      	mov	ip, r5
 800953a:	46f2      	mov	sl, lr
 800953c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009540:	b293      	uxth	r3, r2
 8009542:	fb06 e303 	mla	r3, r6, r3, lr
 8009546:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800954a:	b29b      	uxth	r3, r3
 800954c:	ebaa 0303 	sub.w	r3, sl, r3
 8009550:	0c12      	lsrs	r2, r2, #16
 8009552:	f8dc a000 	ldr.w	sl, [ip]
 8009556:	fb06 e202 	mla	r2, r6, r2, lr
 800955a:	fa13 f38a 	uxtah	r3, r3, sl
 800955e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009562:	fa1f fa82 	uxth.w	sl, r2
 8009566:	f8dc 2000 	ldr.w	r2, [ip]
 800956a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800956e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009572:	b29b      	uxth	r3, r3
 8009574:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009578:	4581      	cmp	r9, r0
 800957a:	f84c 3b04 	str.w	r3, [ip], #4
 800957e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009582:	d2db      	bcs.n	800953c <quorem+0x44>
 8009584:	f855 300b 	ldr.w	r3, [r5, fp]
 8009588:	b92b      	cbnz	r3, 8009596 <quorem+0x9e>
 800958a:	9b01      	ldr	r3, [sp, #4]
 800958c:	3b04      	subs	r3, #4
 800958e:	429d      	cmp	r5, r3
 8009590:	461a      	mov	r2, r3
 8009592:	d32e      	bcc.n	80095f2 <quorem+0xfa>
 8009594:	613c      	str	r4, [r7, #16]
 8009596:	4638      	mov	r0, r7
 8009598:	f001 f8b0 	bl	800a6fc <__mcmp>
 800959c:	2800      	cmp	r0, #0
 800959e:	db24      	blt.n	80095ea <quorem+0xf2>
 80095a0:	3601      	adds	r6, #1
 80095a2:	4628      	mov	r0, r5
 80095a4:	f04f 0c00 	mov.w	ip, #0
 80095a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80095ac:	f8d0 e000 	ldr.w	lr, [r0]
 80095b0:	b293      	uxth	r3, r2
 80095b2:	ebac 0303 	sub.w	r3, ip, r3
 80095b6:	0c12      	lsrs	r2, r2, #16
 80095b8:	fa13 f38e 	uxtah	r3, r3, lr
 80095bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80095c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095ca:	45c1      	cmp	r9, r8
 80095cc:	f840 3b04 	str.w	r3, [r0], #4
 80095d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80095d4:	d2e8      	bcs.n	80095a8 <quorem+0xb0>
 80095d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095de:	b922      	cbnz	r2, 80095ea <quorem+0xf2>
 80095e0:	3b04      	subs	r3, #4
 80095e2:	429d      	cmp	r5, r3
 80095e4:	461a      	mov	r2, r3
 80095e6:	d30a      	bcc.n	80095fe <quorem+0x106>
 80095e8:	613c      	str	r4, [r7, #16]
 80095ea:	4630      	mov	r0, r6
 80095ec:	b003      	add	sp, #12
 80095ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f2:	6812      	ldr	r2, [r2, #0]
 80095f4:	3b04      	subs	r3, #4
 80095f6:	2a00      	cmp	r2, #0
 80095f8:	d1cc      	bne.n	8009594 <quorem+0x9c>
 80095fa:	3c01      	subs	r4, #1
 80095fc:	e7c7      	b.n	800958e <quorem+0x96>
 80095fe:	6812      	ldr	r2, [r2, #0]
 8009600:	3b04      	subs	r3, #4
 8009602:	2a00      	cmp	r2, #0
 8009604:	d1f0      	bne.n	80095e8 <quorem+0xf0>
 8009606:	3c01      	subs	r4, #1
 8009608:	e7eb      	b.n	80095e2 <quorem+0xea>
 800960a:	2000      	movs	r0, #0
 800960c:	e7ee      	b.n	80095ec <quorem+0xf4>
	...

08009610 <_dtoa_r>:
 8009610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009614:	ed2d 8b02 	vpush	{d8}
 8009618:	ec57 6b10 	vmov	r6, r7, d0
 800961c:	b095      	sub	sp, #84	; 0x54
 800961e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009620:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009624:	9105      	str	r1, [sp, #20]
 8009626:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800962a:	4604      	mov	r4, r0
 800962c:	9209      	str	r2, [sp, #36]	; 0x24
 800962e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009630:	b975      	cbnz	r5, 8009650 <_dtoa_r+0x40>
 8009632:	2010      	movs	r0, #16
 8009634:	f000 fddc 	bl	800a1f0 <malloc>
 8009638:	4602      	mov	r2, r0
 800963a:	6260      	str	r0, [r4, #36]	; 0x24
 800963c:	b920      	cbnz	r0, 8009648 <_dtoa_r+0x38>
 800963e:	4bb2      	ldr	r3, [pc, #712]	; (8009908 <_dtoa_r+0x2f8>)
 8009640:	21ea      	movs	r1, #234	; 0xea
 8009642:	48b2      	ldr	r0, [pc, #712]	; (800990c <_dtoa_r+0x2fc>)
 8009644:	f001 fb80 	bl	800ad48 <__assert_func>
 8009648:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800964c:	6005      	str	r5, [r0, #0]
 800964e:	60c5      	str	r5, [r0, #12]
 8009650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009652:	6819      	ldr	r1, [r3, #0]
 8009654:	b151      	cbz	r1, 800966c <_dtoa_r+0x5c>
 8009656:	685a      	ldr	r2, [r3, #4]
 8009658:	604a      	str	r2, [r1, #4]
 800965a:	2301      	movs	r3, #1
 800965c:	4093      	lsls	r3, r2
 800965e:	608b      	str	r3, [r1, #8]
 8009660:	4620      	mov	r0, r4
 8009662:	f000 fe0d 	bl	800a280 <_Bfree>
 8009666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009668:	2200      	movs	r2, #0
 800966a:	601a      	str	r2, [r3, #0]
 800966c:	1e3b      	subs	r3, r7, #0
 800966e:	bfb9      	ittee	lt
 8009670:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009674:	9303      	strlt	r3, [sp, #12]
 8009676:	2300      	movge	r3, #0
 8009678:	f8c8 3000 	strge.w	r3, [r8]
 800967c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009680:	4ba3      	ldr	r3, [pc, #652]	; (8009910 <_dtoa_r+0x300>)
 8009682:	bfbc      	itt	lt
 8009684:	2201      	movlt	r2, #1
 8009686:	f8c8 2000 	strlt.w	r2, [r8]
 800968a:	ea33 0309 	bics.w	r3, r3, r9
 800968e:	d11b      	bne.n	80096c8 <_dtoa_r+0xb8>
 8009690:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009692:	f242 730f 	movw	r3, #9999	; 0x270f
 8009696:	6013      	str	r3, [r2, #0]
 8009698:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800969c:	4333      	orrs	r3, r6
 800969e:	f000 857a 	beq.w	800a196 <_dtoa_r+0xb86>
 80096a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096a4:	b963      	cbnz	r3, 80096c0 <_dtoa_r+0xb0>
 80096a6:	4b9b      	ldr	r3, [pc, #620]	; (8009914 <_dtoa_r+0x304>)
 80096a8:	e024      	b.n	80096f4 <_dtoa_r+0xe4>
 80096aa:	4b9b      	ldr	r3, [pc, #620]	; (8009918 <_dtoa_r+0x308>)
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	3308      	adds	r3, #8
 80096b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80096b2:	6013      	str	r3, [r2, #0]
 80096b4:	9800      	ldr	r0, [sp, #0]
 80096b6:	b015      	add	sp, #84	; 0x54
 80096b8:	ecbd 8b02 	vpop	{d8}
 80096bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c0:	4b94      	ldr	r3, [pc, #592]	; (8009914 <_dtoa_r+0x304>)
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	3303      	adds	r3, #3
 80096c6:	e7f3      	b.n	80096b0 <_dtoa_r+0xa0>
 80096c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80096cc:	2200      	movs	r2, #0
 80096ce:	ec51 0b17 	vmov	r0, r1, d7
 80096d2:	2300      	movs	r3, #0
 80096d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80096d8:	f7f7 f9fe 	bl	8000ad8 <__aeabi_dcmpeq>
 80096dc:	4680      	mov	r8, r0
 80096de:	b158      	cbz	r0, 80096f8 <_dtoa_r+0xe8>
 80096e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80096e2:	2301      	movs	r3, #1
 80096e4:	6013      	str	r3, [r2, #0]
 80096e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f000 8551 	beq.w	800a190 <_dtoa_r+0xb80>
 80096ee:	488b      	ldr	r0, [pc, #556]	; (800991c <_dtoa_r+0x30c>)
 80096f0:	6018      	str	r0, [r3, #0]
 80096f2:	1e43      	subs	r3, r0, #1
 80096f4:	9300      	str	r3, [sp, #0]
 80096f6:	e7dd      	b.n	80096b4 <_dtoa_r+0xa4>
 80096f8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80096fc:	aa12      	add	r2, sp, #72	; 0x48
 80096fe:	a913      	add	r1, sp, #76	; 0x4c
 8009700:	4620      	mov	r0, r4
 8009702:	f001 f89f 	bl	800a844 <__d2b>
 8009706:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800970a:	4683      	mov	fp, r0
 800970c:	2d00      	cmp	r5, #0
 800970e:	d07c      	beq.n	800980a <_dtoa_r+0x1fa>
 8009710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009712:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009716:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800971a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800971e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009722:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009726:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800972a:	4b7d      	ldr	r3, [pc, #500]	; (8009920 <_dtoa_r+0x310>)
 800972c:	2200      	movs	r2, #0
 800972e:	4630      	mov	r0, r6
 8009730:	4639      	mov	r1, r7
 8009732:	f7f6 fdb1 	bl	8000298 <__aeabi_dsub>
 8009736:	a36e      	add	r3, pc, #440	; (adr r3, 80098f0 <_dtoa_r+0x2e0>)
 8009738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973c:	f7f6 ff64 	bl	8000608 <__aeabi_dmul>
 8009740:	a36d      	add	r3, pc, #436	; (adr r3, 80098f8 <_dtoa_r+0x2e8>)
 8009742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009746:	f7f6 fda9 	bl	800029c <__adddf3>
 800974a:	4606      	mov	r6, r0
 800974c:	4628      	mov	r0, r5
 800974e:	460f      	mov	r7, r1
 8009750:	f7f6 fef0 	bl	8000534 <__aeabi_i2d>
 8009754:	a36a      	add	r3, pc, #424	; (adr r3, 8009900 <_dtoa_r+0x2f0>)
 8009756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975a:	f7f6 ff55 	bl	8000608 <__aeabi_dmul>
 800975e:	4602      	mov	r2, r0
 8009760:	460b      	mov	r3, r1
 8009762:	4630      	mov	r0, r6
 8009764:	4639      	mov	r1, r7
 8009766:	f7f6 fd99 	bl	800029c <__adddf3>
 800976a:	4606      	mov	r6, r0
 800976c:	460f      	mov	r7, r1
 800976e:	f7f7 f9fb 	bl	8000b68 <__aeabi_d2iz>
 8009772:	2200      	movs	r2, #0
 8009774:	4682      	mov	sl, r0
 8009776:	2300      	movs	r3, #0
 8009778:	4630      	mov	r0, r6
 800977a:	4639      	mov	r1, r7
 800977c:	f7f7 f9b6 	bl	8000aec <__aeabi_dcmplt>
 8009780:	b148      	cbz	r0, 8009796 <_dtoa_r+0x186>
 8009782:	4650      	mov	r0, sl
 8009784:	f7f6 fed6 	bl	8000534 <__aeabi_i2d>
 8009788:	4632      	mov	r2, r6
 800978a:	463b      	mov	r3, r7
 800978c:	f7f7 f9a4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009790:	b908      	cbnz	r0, 8009796 <_dtoa_r+0x186>
 8009792:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009796:	f1ba 0f16 	cmp.w	sl, #22
 800979a:	d854      	bhi.n	8009846 <_dtoa_r+0x236>
 800979c:	4b61      	ldr	r3, [pc, #388]	; (8009924 <_dtoa_r+0x314>)
 800979e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80097a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80097aa:	f7f7 f99f 	bl	8000aec <__aeabi_dcmplt>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	d04b      	beq.n	800984a <_dtoa_r+0x23a>
 80097b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80097b6:	2300      	movs	r3, #0
 80097b8:	930e      	str	r3, [sp, #56]	; 0x38
 80097ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80097bc:	1b5d      	subs	r5, r3, r5
 80097be:	1e6b      	subs	r3, r5, #1
 80097c0:	9304      	str	r3, [sp, #16]
 80097c2:	bf43      	ittte	mi
 80097c4:	2300      	movmi	r3, #0
 80097c6:	f1c5 0801 	rsbmi	r8, r5, #1
 80097ca:	9304      	strmi	r3, [sp, #16]
 80097cc:	f04f 0800 	movpl.w	r8, #0
 80097d0:	f1ba 0f00 	cmp.w	sl, #0
 80097d4:	db3b      	blt.n	800984e <_dtoa_r+0x23e>
 80097d6:	9b04      	ldr	r3, [sp, #16]
 80097d8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80097dc:	4453      	add	r3, sl
 80097de:	9304      	str	r3, [sp, #16]
 80097e0:	2300      	movs	r3, #0
 80097e2:	9306      	str	r3, [sp, #24]
 80097e4:	9b05      	ldr	r3, [sp, #20]
 80097e6:	2b09      	cmp	r3, #9
 80097e8:	d869      	bhi.n	80098be <_dtoa_r+0x2ae>
 80097ea:	2b05      	cmp	r3, #5
 80097ec:	bfc4      	itt	gt
 80097ee:	3b04      	subgt	r3, #4
 80097f0:	9305      	strgt	r3, [sp, #20]
 80097f2:	9b05      	ldr	r3, [sp, #20]
 80097f4:	f1a3 0302 	sub.w	r3, r3, #2
 80097f8:	bfcc      	ite	gt
 80097fa:	2500      	movgt	r5, #0
 80097fc:	2501      	movle	r5, #1
 80097fe:	2b03      	cmp	r3, #3
 8009800:	d869      	bhi.n	80098d6 <_dtoa_r+0x2c6>
 8009802:	e8df f003 	tbb	[pc, r3]
 8009806:	4e2c      	.short	0x4e2c
 8009808:	5a4c      	.short	0x5a4c
 800980a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800980e:	441d      	add	r5, r3
 8009810:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009814:	2b20      	cmp	r3, #32
 8009816:	bfc1      	itttt	gt
 8009818:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800981c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009820:	fa09 f303 	lslgt.w	r3, r9, r3
 8009824:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009828:	bfda      	itte	le
 800982a:	f1c3 0320 	rsble	r3, r3, #32
 800982e:	fa06 f003 	lslle.w	r0, r6, r3
 8009832:	4318      	orrgt	r0, r3
 8009834:	f7f6 fe6e 	bl	8000514 <__aeabi_ui2d>
 8009838:	2301      	movs	r3, #1
 800983a:	4606      	mov	r6, r0
 800983c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009840:	3d01      	subs	r5, #1
 8009842:	9310      	str	r3, [sp, #64]	; 0x40
 8009844:	e771      	b.n	800972a <_dtoa_r+0x11a>
 8009846:	2301      	movs	r3, #1
 8009848:	e7b6      	b.n	80097b8 <_dtoa_r+0x1a8>
 800984a:	900e      	str	r0, [sp, #56]	; 0x38
 800984c:	e7b5      	b.n	80097ba <_dtoa_r+0x1aa>
 800984e:	f1ca 0300 	rsb	r3, sl, #0
 8009852:	9306      	str	r3, [sp, #24]
 8009854:	2300      	movs	r3, #0
 8009856:	eba8 080a 	sub.w	r8, r8, sl
 800985a:	930d      	str	r3, [sp, #52]	; 0x34
 800985c:	e7c2      	b.n	80097e4 <_dtoa_r+0x1d4>
 800985e:	2300      	movs	r3, #0
 8009860:	9308      	str	r3, [sp, #32]
 8009862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009864:	2b00      	cmp	r3, #0
 8009866:	dc39      	bgt.n	80098dc <_dtoa_r+0x2cc>
 8009868:	f04f 0901 	mov.w	r9, #1
 800986c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009870:	464b      	mov	r3, r9
 8009872:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009876:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009878:	2200      	movs	r2, #0
 800987a:	6042      	str	r2, [r0, #4]
 800987c:	2204      	movs	r2, #4
 800987e:	f102 0614 	add.w	r6, r2, #20
 8009882:	429e      	cmp	r6, r3
 8009884:	6841      	ldr	r1, [r0, #4]
 8009886:	d92f      	bls.n	80098e8 <_dtoa_r+0x2d8>
 8009888:	4620      	mov	r0, r4
 800988a:	f000 fcb9 	bl	800a200 <_Balloc>
 800988e:	9000      	str	r0, [sp, #0]
 8009890:	2800      	cmp	r0, #0
 8009892:	d14b      	bne.n	800992c <_dtoa_r+0x31c>
 8009894:	4b24      	ldr	r3, [pc, #144]	; (8009928 <_dtoa_r+0x318>)
 8009896:	4602      	mov	r2, r0
 8009898:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800989c:	e6d1      	b.n	8009642 <_dtoa_r+0x32>
 800989e:	2301      	movs	r3, #1
 80098a0:	e7de      	b.n	8009860 <_dtoa_r+0x250>
 80098a2:	2300      	movs	r3, #0
 80098a4:	9308      	str	r3, [sp, #32]
 80098a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098a8:	eb0a 0903 	add.w	r9, sl, r3
 80098ac:	f109 0301 	add.w	r3, r9, #1
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	9301      	str	r3, [sp, #4]
 80098b4:	bfb8      	it	lt
 80098b6:	2301      	movlt	r3, #1
 80098b8:	e7dd      	b.n	8009876 <_dtoa_r+0x266>
 80098ba:	2301      	movs	r3, #1
 80098bc:	e7f2      	b.n	80098a4 <_dtoa_r+0x294>
 80098be:	2501      	movs	r5, #1
 80098c0:	2300      	movs	r3, #0
 80098c2:	9305      	str	r3, [sp, #20]
 80098c4:	9508      	str	r5, [sp, #32]
 80098c6:	f04f 39ff 	mov.w	r9, #4294967295
 80098ca:	2200      	movs	r2, #0
 80098cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80098d0:	2312      	movs	r3, #18
 80098d2:	9209      	str	r2, [sp, #36]	; 0x24
 80098d4:	e7cf      	b.n	8009876 <_dtoa_r+0x266>
 80098d6:	2301      	movs	r3, #1
 80098d8:	9308      	str	r3, [sp, #32]
 80098da:	e7f4      	b.n	80098c6 <_dtoa_r+0x2b6>
 80098dc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80098e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80098e4:	464b      	mov	r3, r9
 80098e6:	e7c6      	b.n	8009876 <_dtoa_r+0x266>
 80098e8:	3101      	adds	r1, #1
 80098ea:	6041      	str	r1, [r0, #4]
 80098ec:	0052      	lsls	r2, r2, #1
 80098ee:	e7c6      	b.n	800987e <_dtoa_r+0x26e>
 80098f0:	636f4361 	.word	0x636f4361
 80098f4:	3fd287a7 	.word	0x3fd287a7
 80098f8:	8b60c8b3 	.word	0x8b60c8b3
 80098fc:	3fc68a28 	.word	0x3fc68a28
 8009900:	509f79fb 	.word	0x509f79fb
 8009904:	3fd34413 	.word	0x3fd34413
 8009908:	0800bb89 	.word	0x0800bb89
 800990c:	0800bba0 	.word	0x0800bba0
 8009910:	7ff00000 	.word	0x7ff00000
 8009914:	0800bb85 	.word	0x0800bb85
 8009918:	0800bb7c 	.word	0x0800bb7c
 800991c:	0800bb59 	.word	0x0800bb59
 8009920:	3ff80000 	.word	0x3ff80000
 8009924:	0800bc98 	.word	0x0800bc98
 8009928:	0800bbff 	.word	0x0800bbff
 800992c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800992e:	9a00      	ldr	r2, [sp, #0]
 8009930:	601a      	str	r2, [r3, #0]
 8009932:	9b01      	ldr	r3, [sp, #4]
 8009934:	2b0e      	cmp	r3, #14
 8009936:	f200 80ad 	bhi.w	8009a94 <_dtoa_r+0x484>
 800993a:	2d00      	cmp	r5, #0
 800993c:	f000 80aa 	beq.w	8009a94 <_dtoa_r+0x484>
 8009940:	f1ba 0f00 	cmp.w	sl, #0
 8009944:	dd36      	ble.n	80099b4 <_dtoa_r+0x3a4>
 8009946:	4ac3      	ldr	r2, [pc, #780]	; (8009c54 <_dtoa_r+0x644>)
 8009948:	f00a 030f 	and.w	r3, sl, #15
 800994c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009950:	ed93 7b00 	vldr	d7, [r3]
 8009954:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009958:	ea4f 172a 	mov.w	r7, sl, asr #4
 800995c:	eeb0 8a47 	vmov.f32	s16, s14
 8009960:	eef0 8a67 	vmov.f32	s17, s15
 8009964:	d016      	beq.n	8009994 <_dtoa_r+0x384>
 8009966:	4bbc      	ldr	r3, [pc, #752]	; (8009c58 <_dtoa_r+0x648>)
 8009968:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800996c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009970:	f7f6 ff74 	bl	800085c <__aeabi_ddiv>
 8009974:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009978:	f007 070f 	and.w	r7, r7, #15
 800997c:	2503      	movs	r5, #3
 800997e:	4eb6      	ldr	r6, [pc, #728]	; (8009c58 <_dtoa_r+0x648>)
 8009980:	b957      	cbnz	r7, 8009998 <_dtoa_r+0x388>
 8009982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009986:	ec53 2b18 	vmov	r2, r3, d8
 800998a:	f7f6 ff67 	bl	800085c <__aeabi_ddiv>
 800998e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009992:	e029      	b.n	80099e8 <_dtoa_r+0x3d8>
 8009994:	2502      	movs	r5, #2
 8009996:	e7f2      	b.n	800997e <_dtoa_r+0x36e>
 8009998:	07f9      	lsls	r1, r7, #31
 800999a:	d508      	bpl.n	80099ae <_dtoa_r+0x39e>
 800999c:	ec51 0b18 	vmov	r0, r1, d8
 80099a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80099a4:	f7f6 fe30 	bl	8000608 <__aeabi_dmul>
 80099a8:	ec41 0b18 	vmov	d8, r0, r1
 80099ac:	3501      	adds	r5, #1
 80099ae:	107f      	asrs	r7, r7, #1
 80099b0:	3608      	adds	r6, #8
 80099b2:	e7e5      	b.n	8009980 <_dtoa_r+0x370>
 80099b4:	f000 80a6 	beq.w	8009b04 <_dtoa_r+0x4f4>
 80099b8:	f1ca 0600 	rsb	r6, sl, #0
 80099bc:	4ba5      	ldr	r3, [pc, #660]	; (8009c54 <_dtoa_r+0x644>)
 80099be:	4fa6      	ldr	r7, [pc, #664]	; (8009c58 <_dtoa_r+0x648>)
 80099c0:	f006 020f 	and.w	r2, r6, #15
 80099c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80099d0:	f7f6 fe1a 	bl	8000608 <__aeabi_dmul>
 80099d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099d8:	1136      	asrs	r6, r6, #4
 80099da:	2300      	movs	r3, #0
 80099dc:	2502      	movs	r5, #2
 80099de:	2e00      	cmp	r6, #0
 80099e0:	f040 8085 	bne.w	8009aee <_dtoa_r+0x4de>
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d1d2      	bne.n	800998e <_dtoa_r+0x37e>
 80099e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	f000 808c 	beq.w	8009b08 <_dtoa_r+0x4f8>
 80099f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80099f4:	4b99      	ldr	r3, [pc, #612]	; (8009c5c <_dtoa_r+0x64c>)
 80099f6:	2200      	movs	r2, #0
 80099f8:	4630      	mov	r0, r6
 80099fa:	4639      	mov	r1, r7
 80099fc:	f7f7 f876 	bl	8000aec <__aeabi_dcmplt>
 8009a00:	2800      	cmp	r0, #0
 8009a02:	f000 8081 	beq.w	8009b08 <_dtoa_r+0x4f8>
 8009a06:	9b01      	ldr	r3, [sp, #4]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d07d      	beq.n	8009b08 <_dtoa_r+0x4f8>
 8009a0c:	f1b9 0f00 	cmp.w	r9, #0
 8009a10:	dd3c      	ble.n	8009a8c <_dtoa_r+0x47c>
 8009a12:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009a16:	9307      	str	r3, [sp, #28]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	4b91      	ldr	r3, [pc, #580]	; (8009c60 <_dtoa_r+0x650>)
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	4639      	mov	r1, r7
 8009a20:	f7f6 fdf2 	bl	8000608 <__aeabi_dmul>
 8009a24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a28:	3501      	adds	r5, #1
 8009a2a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009a2e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009a32:	4628      	mov	r0, r5
 8009a34:	f7f6 fd7e 	bl	8000534 <__aeabi_i2d>
 8009a38:	4632      	mov	r2, r6
 8009a3a:	463b      	mov	r3, r7
 8009a3c:	f7f6 fde4 	bl	8000608 <__aeabi_dmul>
 8009a40:	4b88      	ldr	r3, [pc, #544]	; (8009c64 <_dtoa_r+0x654>)
 8009a42:	2200      	movs	r2, #0
 8009a44:	f7f6 fc2a 	bl	800029c <__adddf3>
 8009a48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009a4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a50:	9303      	str	r3, [sp, #12]
 8009a52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d15c      	bne.n	8009b12 <_dtoa_r+0x502>
 8009a58:	4b83      	ldr	r3, [pc, #524]	; (8009c68 <_dtoa_r+0x658>)
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	4639      	mov	r1, r7
 8009a60:	f7f6 fc1a 	bl	8000298 <__aeabi_dsub>
 8009a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a68:	4606      	mov	r6, r0
 8009a6a:	460f      	mov	r7, r1
 8009a6c:	f7f7 f85c 	bl	8000b28 <__aeabi_dcmpgt>
 8009a70:	2800      	cmp	r0, #0
 8009a72:	f040 8296 	bne.w	8009fa2 <_dtoa_r+0x992>
 8009a76:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a80:	4639      	mov	r1, r7
 8009a82:	f7f7 f833 	bl	8000aec <__aeabi_dcmplt>
 8009a86:	2800      	cmp	r0, #0
 8009a88:	f040 8288 	bne.w	8009f9c <_dtoa_r+0x98c>
 8009a8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009a90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	f2c0 8158 	blt.w	8009d4c <_dtoa_r+0x73c>
 8009a9c:	f1ba 0f0e 	cmp.w	sl, #14
 8009aa0:	f300 8154 	bgt.w	8009d4c <_dtoa_r+0x73c>
 8009aa4:	4b6b      	ldr	r3, [pc, #428]	; (8009c54 <_dtoa_r+0x644>)
 8009aa6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009aaa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f280 80e3 	bge.w	8009c7c <_dtoa_r+0x66c>
 8009ab6:	9b01      	ldr	r3, [sp, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f300 80df 	bgt.w	8009c7c <_dtoa_r+0x66c>
 8009abe:	f040 826d 	bne.w	8009f9c <_dtoa_r+0x98c>
 8009ac2:	4b69      	ldr	r3, [pc, #420]	; (8009c68 <_dtoa_r+0x658>)
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	4640      	mov	r0, r8
 8009ac8:	4649      	mov	r1, r9
 8009aca:	f7f6 fd9d 	bl	8000608 <__aeabi_dmul>
 8009ace:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ad2:	f7f7 f81f 	bl	8000b14 <__aeabi_dcmpge>
 8009ad6:	9e01      	ldr	r6, [sp, #4]
 8009ad8:	4637      	mov	r7, r6
 8009ada:	2800      	cmp	r0, #0
 8009adc:	f040 8243 	bne.w	8009f66 <_dtoa_r+0x956>
 8009ae0:	9d00      	ldr	r5, [sp, #0]
 8009ae2:	2331      	movs	r3, #49	; 0x31
 8009ae4:	f805 3b01 	strb.w	r3, [r5], #1
 8009ae8:	f10a 0a01 	add.w	sl, sl, #1
 8009aec:	e23f      	b.n	8009f6e <_dtoa_r+0x95e>
 8009aee:	07f2      	lsls	r2, r6, #31
 8009af0:	d505      	bpl.n	8009afe <_dtoa_r+0x4ee>
 8009af2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009af6:	f7f6 fd87 	bl	8000608 <__aeabi_dmul>
 8009afa:	3501      	adds	r5, #1
 8009afc:	2301      	movs	r3, #1
 8009afe:	1076      	asrs	r6, r6, #1
 8009b00:	3708      	adds	r7, #8
 8009b02:	e76c      	b.n	80099de <_dtoa_r+0x3ce>
 8009b04:	2502      	movs	r5, #2
 8009b06:	e76f      	b.n	80099e8 <_dtoa_r+0x3d8>
 8009b08:	9b01      	ldr	r3, [sp, #4]
 8009b0a:	f8cd a01c 	str.w	sl, [sp, #28]
 8009b0e:	930c      	str	r3, [sp, #48]	; 0x30
 8009b10:	e78d      	b.n	8009a2e <_dtoa_r+0x41e>
 8009b12:	9900      	ldr	r1, [sp, #0]
 8009b14:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009b16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b18:	4b4e      	ldr	r3, [pc, #312]	; (8009c54 <_dtoa_r+0x644>)
 8009b1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b1e:	4401      	add	r1, r0
 8009b20:	9102      	str	r1, [sp, #8]
 8009b22:	9908      	ldr	r1, [sp, #32]
 8009b24:	eeb0 8a47 	vmov.f32	s16, s14
 8009b28:	eef0 8a67 	vmov.f32	s17, s15
 8009b2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b34:	2900      	cmp	r1, #0
 8009b36:	d045      	beq.n	8009bc4 <_dtoa_r+0x5b4>
 8009b38:	494c      	ldr	r1, [pc, #304]	; (8009c6c <_dtoa_r+0x65c>)
 8009b3a:	2000      	movs	r0, #0
 8009b3c:	f7f6 fe8e 	bl	800085c <__aeabi_ddiv>
 8009b40:	ec53 2b18 	vmov	r2, r3, d8
 8009b44:	f7f6 fba8 	bl	8000298 <__aeabi_dsub>
 8009b48:	9d00      	ldr	r5, [sp, #0]
 8009b4a:	ec41 0b18 	vmov	d8, r0, r1
 8009b4e:	4639      	mov	r1, r7
 8009b50:	4630      	mov	r0, r6
 8009b52:	f7f7 f809 	bl	8000b68 <__aeabi_d2iz>
 8009b56:	900c      	str	r0, [sp, #48]	; 0x30
 8009b58:	f7f6 fcec 	bl	8000534 <__aeabi_i2d>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	460b      	mov	r3, r1
 8009b60:	4630      	mov	r0, r6
 8009b62:	4639      	mov	r1, r7
 8009b64:	f7f6 fb98 	bl	8000298 <__aeabi_dsub>
 8009b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b6a:	3330      	adds	r3, #48	; 0x30
 8009b6c:	f805 3b01 	strb.w	r3, [r5], #1
 8009b70:	ec53 2b18 	vmov	r2, r3, d8
 8009b74:	4606      	mov	r6, r0
 8009b76:	460f      	mov	r7, r1
 8009b78:	f7f6 ffb8 	bl	8000aec <__aeabi_dcmplt>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	d165      	bne.n	8009c4c <_dtoa_r+0x63c>
 8009b80:	4632      	mov	r2, r6
 8009b82:	463b      	mov	r3, r7
 8009b84:	4935      	ldr	r1, [pc, #212]	; (8009c5c <_dtoa_r+0x64c>)
 8009b86:	2000      	movs	r0, #0
 8009b88:	f7f6 fb86 	bl	8000298 <__aeabi_dsub>
 8009b8c:	ec53 2b18 	vmov	r2, r3, d8
 8009b90:	f7f6 ffac 	bl	8000aec <__aeabi_dcmplt>
 8009b94:	2800      	cmp	r0, #0
 8009b96:	f040 80b9 	bne.w	8009d0c <_dtoa_r+0x6fc>
 8009b9a:	9b02      	ldr	r3, [sp, #8]
 8009b9c:	429d      	cmp	r5, r3
 8009b9e:	f43f af75 	beq.w	8009a8c <_dtoa_r+0x47c>
 8009ba2:	4b2f      	ldr	r3, [pc, #188]	; (8009c60 <_dtoa_r+0x650>)
 8009ba4:	ec51 0b18 	vmov	r0, r1, d8
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f7f6 fd2d 	bl	8000608 <__aeabi_dmul>
 8009bae:	4b2c      	ldr	r3, [pc, #176]	; (8009c60 <_dtoa_r+0x650>)
 8009bb0:	ec41 0b18 	vmov	d8, r0, r1
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	4639      	mov	r1, r7
 8009bba:	f7f6 fd25 	bl	8000608 <__aeabi_dmul>
 8009bbe:	4606      	mov	r6, r0
 8009bc0:	460f      	mov	r7, r1
 8009bc2:	e7c4      	b.n	8009b4e <_dtoa_r+0x53e>
 8009bc4:	ec51 0b17 	vmov	r0, r1, d7
 8009bc8:	f7f6 fd1e 	bl	8000608 <__aeabi_dmul>
 8009bcc:	9b02      	ldr	r3, [sp, #8]
 8009bce:	9d00      	ldr	r5, [sp, #0]
 8009bd0:	930c      	str	r3, [sp, #48]	; 0x30
 8009bd2:	ec41 0b18 	vmov	d8, r0, r1
 8009bd6:	4639      	mov	r1, r7
 8009bd8:	4630      	mov	r0, r6
 8009bda:	f7f6 ffc5 	bl	8000b68 <__aeabi_d2iz>
 8009bde:	9011      	str	r0, [sp, #68]	; 0x44
 8009be0:	f7f6 fca8 	bl	8000534 <__aeabi_i2d>
 8009be4:	4602      	mov	r2, r0
 8009be6:	460b      	mov	r3, r1
 8009be8:	4630      	mov	r0, r6
 8009bea:	4639      	mov	r1, r7
 8009bec:	f7f6 fb54 	bl	8000298 <__aeabi_dsub>
 8009bf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009bf2:	3330      	adds	r3, #48	; 0x30
 8009bf4:	f805 3b01 	strb.w	r3, [r5], #1
 8009bf8:	9b02      	ldr	r3, [sp, #8]
 8009bfa:	429d      	cmp	r5, r3
 8009bfc:	4606      	mov	r6, r0
 8009bfe:	460f      	mov	r7, r1
 8009c00:	f04f 0200 	mov.w	r2, #0
 8009c04:	d134      	bne.n	8009c70 <_dtoa_r+0x660>
 8009c06:	4b19      	ldr	r3, [pc, #100]	; (8009c6c <_dtoa_r+0x65c>)
 8009c08:	ec51 0b18 	vmov	r0, r1, d8
 8009c0c:	f7f6 fb46 	bl	800029c <__adddf3>
 8009c10:	4602      	mov	r2, r0
 8009c12:	460b      	mov	r3, r1
 8009c14:	4630      	mov	r0, r6
 8009c16:	4639      	mov	r1, r7
 8009c18:	f7f6 ff86 	bl	8000b28 <__aeabi_dcmpgt>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	d175      	bne.n	8009d0c <_dtoa_r+0x6fc>
 8009c20:	ec53 2b18 	vmov	r2, r3, d8
 8009c24:	4911      	ldr	r1, [pc, #68]	; (8009c6c <_dtoa_r+0x65c>)
 8009c26:	2000      	movs	r0, #0
 8009c28:	f7f6 fb36 	bl	8000298 <__aeabi_dsub>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	460b      	mov	r3, r1
 8009c30:	4630      	mov	r0, r6
 8009c32:	4639      	mov	r1, r7
 8009c34:	f7f6 ff5a 	bl	8000aec <__aeabi_dcmplt>
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	f43f af27 	beq.w	8009a8c <_dtoa_r+0x47c>
 8009c3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c40:	1e6b      	subs	r3, r5, #1
 8009c42:	930c      	str	r3, [sp, #48]	; 0x30
 8009c44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009c48:	2b30      	cmp	r3, #48	; 0x30
 8009c4a:	d0f8      	beq.n	8009c3e <_dtoa_r+0x62e>
 8009c4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009c50:	e04a      	b.n	8009ce8 <_dtoa_r+0x6d8>
 8009c52:	bf00      	nop
 8009c54:	0800bc98 	.word	0x0800bc98
 8009c58:	0800bc70 	.word	0x0800bc70
 8009c5c:	3ff00000 	.word	0x3ff00000
 8009c60:	40240000 	.word	0x40240000
 8009c64:	401c0000 	.word	0x401c0000
 8009c68:	40140000 	.word	0x40140000
 8009c6c:	3fe00000 	.word	0x3fe00000
 8009c70:	4baf      	ldr	r3, [pc, #700]	; (8009f30 <_dtoa_r+0x920>)
 8009c72:	f7f6 fcc9 	bl	8000608 <__aeabi_dmul>
 8009c76:	4606      	mov	r6, r0
 8009c78:	460f      	mov	r7, r1
 8009c7a:	e7ac      	b.n	8009bd6 <_dtoa_r+0x5c6>
 8009c7c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c80:	9d00      	ldr	r5, [sp, #0]
 8009c82:	4642      	mov	r2, r8
 8009c84:	464b      	mov	r3, r9
 8009c86:	4630      	mov	r0, r6
 8009c88:	4639      	mov	r1, r7
 8009c8a:	f7f6 fde7 	bl	800085c <__aeabi_ddiv>
 8009c8e:	f7f6 ff6b 	bl	8000b68 <__aeabi_d2iz>
 8009c92:	9002      	str	r0, [sp, #8]
 8009c94:	f7f6 fc4e 	bl	8000534 <__aeabi_i2d>
 8009c98:	4642      	mov	r2, r8
 8009c9a:	464b      	mov	r3, r9
 8009c9c:	f7f6 fcb4 	bl	8000608 <__aeabi_dmul>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	4630      	mov	r0, r6
 8009ca6:	4639      	mov	r1, r7
 8009ca8:	f7f6 faf6 	bl	8000298 <__aeabi_dsub>
 8009cac:	9e02      	ldr	r6, [sp, #8]
 8009cae:	9f01      	ldr	r7, [sp, #4]
 8009cb0:	3630      	adds	r6, #48	; 0x30
 8009cb2:	f805 6b01 	strb.w	r6, [r5], #1
 8009cb6:	9e00      	ldr	r6, [sp, #0]
 8009cb8:	1bae      	subs	r6, r5, r6
 8009cba:	42b7      	cmp	r7, r6
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	d137      	bne.n	8009d32 <_dtoa_r+0x722>
 8009cc2:	f7f6 faeb 	bl	800029c <__adddf3>
 8009cc6:	4642      	mov	r2, r8
 8009cc8:	464b      	mov	r3, r9
 8009cca:	4606      	mov	r6, r0
 8009ccc:	460f      	mov	r7, r1
 8009cce:	f7f6 ff2b 	bl	8000b28 <__aeabi_dcmpgt>
 8009cd2:	b9c8      	cbnz	r0, 8009d08 <_dtoa_r+0x6f8>
 8009cd4:	4642      	mov	r2, r8
 8009cd6:	464b      	mov	r3, r9
 8009cd8:	4630      	mov	r0, r6
 8009cda:	4639      	mov	r1, r7
 8009cdc:	f7f6 fefc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ce0:	b110      	cbz	r0, 8009ce8 <_dtoa_r+0x6d8>
 8009ce2:	9b02      	ldr	r3, [sp, #8]
 8009ce4:	07d9      	lsls	r1, r3, #31
 8009ce6:	d40f      	bmi.n	8009d08 <_dtoa_r+0x6f8>
 8009ce8:	4620      	mov	r0, r4
 8009cea:	4659      	mov	r1, fp
 8009cec:	f000 fac8 	bl	800a280 <_Bfree>
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	702b      	strb	r3, [r5, #0]
 8009cf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cf6:	f10a 0001 	add.w	r0, sl, #1
 8009cfa:	6018      	str	r0, [r3, #0]
 8009cfc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f43f acd8 	beq.w	80096b4 <_dtoa_r+0xa4>
 8009d04:	601d      	str	r5, [r3, #0]
 8009d06:	e4d5      	b.n	80096b4 <_dtoa_r+0xa4>
 8009d08:	f8cd a01c 	str.w	sl, [sp, #28]
 8009d0c:	462b      	mov	r3, r5
 8009d0e:	461d      	mov	r5, r3
 8009d10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d14:	2a39      	cmp	r2, #57	; 0x39
 8009d16:	d108      	bne.n	8009d2a <_dtoa_r+0x71a>
 8009d18:	9a00      	ldr	r2, [sp, #0]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d1f7      	bne.n	8009d0e <_dtoa_r+0x6fe>
 8009d1e:	9a07      	ldr	r2, [sp, #28]
 8009d20:	9900      	ldr	r1, [sp, #0]
 8009d22:	3201      	adds	r2, #1
 8009d24:	9207      	str	r2, [sp, #28]
 8009d26:	2230      	movs	r2, #48	; 0x30
 8009d28:	700a      	strb	r2, [r1, #0]
 8009d2a:	781a      	ldrb	r2, [r3, #0]
 8009d2c:	3201      	adds	r2, #1
 8009d2e:	701a      	strb	r2, [r3, #0]
 8009d30:	e78c      	b.n	8009c4c <_dtoa_r+0x63c>
 8009d32:	4b7f      	ldr	r3, [pc, #508]	; (8009f30 <_dtoa_r+0x920>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	f7f6 fc67 	bl	8000608 <__aeabi_dmul>
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	4606      	mov	r6, r0
 8009d40:	460f      	mov	r7, r1
 8009d42:	f7f6 fec9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	d09b      	beq.n	8009c82 <_dtoa_r+0x672>
 8009d4a:	e7cd      	b.n	8009ce8 <_dtoa_r+0x6d8>
 8009d4c:	9a08      	ldr	r2, [sp, #32]
 8009d4e:	2a00      	cmp	r2, #0
 8009d50:	f000 80c4 	beq.w	8009edc <_dtoa_r+0x8cc>
 8009d54:	9a05      	ldr	r2, [sp, #20]
 8009d56:	2a01      	cmp	r2, #1
 8009d58:	f300 80a8 	bgt.w	8009eac <_dtoa_r+0x89c>
 8009d5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d5e:	2a00      	cmp	r2, #0
 8009d60:	f000 80a0 	beq.w	8009ea4 <_dtoa_r+0x894>
 8009d64:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009d68:	9e06      	ldr	r6, [sp, #24]
 8009d6a:	4645      	mov	r5, r8
 8009d6c:	9a04      	ldr	r2, [sp, #16]
 8009d6e:	2101      	movs	r1, #1
 8009d70:	441a      	add	r2, r3
 8009d72:	4620      	mov	r0, r4
 8009d74:	4498      	add	r8, r3
 8009d76:	9204      	str	r2, [sp, #16]
 8009d78:	f000 fb3e 	bl	800a3f8 <__i2b>
 8009d7c:	4607      	mov	r7, r0
 8009d7e:	2d00      	cmp	r5, #0
 8009d80:	dd0b      	ble.n	8009d9a <_dtoa_r+0x78a>
 8009d82:	9b04      	ldr	r3, [sp, #16]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	dd08      	ble.n	8009d9a <_dtoa_r+0x78a>
 8009d88:	42ab      	cmp	r3, r5
 8009d8a:	9a04      	ldr	r2, [sp, #16]
 8009d8c:	bfa8      	it	ge
 8009d8e:	462b      	movge	r3, r5
 8009d90:	eba8 0803 	sub.w	r8, r8, r3
 8009d94:	1aed      	subs	r5, r5, r3
 8009d96:	1ad3      	subs	r3, r2, r3
 8009d98:	9304      	str	r3, [sp, #16]
 8009d9a:	9b06      	ldr	r3, [sp, #24]
 8009d9c:	b1fb      	cbz	r3, 8009dde <_dtoa_r+0x7ce>
 8009d9e:	9b08      	ldr	r3, [sp, #32]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	f000 809f 	beq.w	8009ee4 <_dtoa_r+0x8d4>
 8009da6:	2e00      	cmp	r6, #0
 8009da8:	dd11      	ble.n	8009dce <_dtoa_r+0x7be>
 8009daa:	4639      	mov	r1, r7
 8009dac:	4632      	mov	r2, r6
 8009dae:	4620      	mov	r0, r4
 8009db0:	f000 fbde 	bl	800a570 <__pow5mult>
 8009db4:	465a      	mov	r2, fp
 8009db6:	4601      	mov	r1, r0
 8009db8:	4607      	mov	r7, r0
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f000 fb32 	bl	800a424 <__multiply>
 8009dc0:	4659      	mov	r1, fp
 8009dc2:	9007      	str	r0, [sp, #28]
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f000 fa5b 	bl	800a280 <_Bfree>
 8009dca:	9b07      	ldr	r3, [sp, #28]
 8009dcc:	469b      	mov	fp, r3
 8009dce:	9b06      	ldr	r3, [sp, #24]
 8009dd0:	1b9a      	subs	r2, r3, r6
 8009dd2:	d004      	beq.n	8009dde <_dtoa_r+0x7ce>
 8009dd4:	4659      	mov	r1, fp
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f000 fbca 	bl	800a570 <__pow5mult>
 8009ddc:	4683      	mov	fp, r0
 8009dde:	2101      	movs	r1, #1
 8009de0:	4620      	mov	r0, r4
 8009de2:	f000 fb09 	bl	800a3f8 <__i2b>
 8009de6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	4606      	mov	r6, r0
 8009dec:	dd7c      	ble.n	8009ee8 <_dtoa_r+0x8d8>
 8009dee:	461a      	mov	r2, r3
 8009df0:	4601      	mov	r1, r0
 8009df2:	4620      	mov	r0, r4
 8009df4:	f000 fbbc 	bl	800a570 <__pow5mult>
 8009df8:	9b05      	ldr	r3, [sp, #20]
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	4606      	mov	r6, r0
 8009dfe:	dd76      	ble.n	8009eee <_dtoa_r+0x8de>
 8009e00:	2300      	movs	r3, #0
 8009e02:	9306      	str	r3, [sp, #24]
 8009e04:	6933      	ldr	r3, [r6, #16]
 8009e06:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009e0a:	6918      	ldr	r0, [r3, #16]
 8009e0c:	f000 faa4 	bl	800a358 <__hi0bits>
 8009e10:	f1c0 0020 	rsb	r0, r0, #32
 8009e14:	9b04      	ldr	r3, [sp, #16]
 8009e16:	4418      	add	r0, r3
 8009e18:	f010 001f 	ands.w	r0, r0, #31
 8009e1c:	f000 8086 	beq.w	8009f2c <_dtoa_r+0x91c>
 8009e20:	f1c0 0320 	rsb	r3, r0, #32
 8009e24:	2b04      	cmp	r3, #4
 8009e26:	dd7f      	ble.n	8009f28 <_dtoa_r+0x918>
 8009e28:	f1c0 001c 	rsb	r0, r0, #28
 8009e2c:	9b04      	ldr	r3, [sp, #16]
 8009e2e:	4403      	add	r3, r0
 8009e30:	4480      	add	r8, r0
 8009e32:	4405      	add	r5, r0
 8009e34:	9304      	str	r3, [sp, #16]
 8009e36:	f1b8 0f00 	cmp.w	r8, #0
 8009e3a:	dd05      	ble.n	8009e48 <_dtoa_r+0x838>
 8009e3c:	4659      	mov	r1, fp
 8009e3e:	4642      	mov	r2, r8
 8009e40:	4620      	mov	r0, r4
 8009e42:	f000 fbef 	bl	800a624 <__lshift>
 8009e46:	4683      	mov	fp, r0
 8009e48:	9b04      	ldr	r3, [sp, #16]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	dd05      	ble.n	8009e5a <_dtoa_r+0x84a>
 8009e4e:	4631      	mov	r1, r6
 8009e50:	461a      	mov	r2, r3
 8009e52:	4620      	mov	r0, r4
 8009e54:	f000 fbe6 	bl	800a624 <__lshift>
 8009e58:	4606      	mov	r6, r0
 8009e5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d069      	beq.n	8009f34 <_dtoa_r+0x924>
 8009e60:	4631      	mov	r1, r6
 8009e62:	4658      	mov	r0, fp
 8009e64:	f000 fc4a 	bl	800a6fc <__mcmp>
 8009e68:	2800      	cmp	r0, #0
 8009e6a:	da63      	bge.n	8009f34 <_dtoa_r+0x924>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	4659      	mov	r1, fp
 8009e70:	220a      	movs	r2, #10
 8009e72:	4620      	mov	r0, r4
 8009e74:	f000 fa26 	bl	800a2c4 <__multadd>
 8009e78:	9b08      	ldr	r3, [sp, #32]
 8009e7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e7e:	4683      	mov	fp, r0
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f000 818f 	beq.w	800a1a4 <_dtoa_r+0xb94>
 8009e86:	4639      	mov	r1, r7
 8009e88:	2300      	movs	r3, #0
 8009e8a:	220a      	movs	r2, #10
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	f000 fa19 	bl	800a2c4 <__multadd>
 8009e92:	f1b9 0f00 	cmp.w	r9, #0
 8009e96:	4607      	mov	r7, r0
 8009e98:	f300 808e 	bgt.w	8009fb8 <_dtoa_r+0x9a8>
 8009e9c:	9b05      	ldr	r3, [sp, #20]
 8009e9e:	2b02      	cmp	r3, #2
 8009ea0:	dc50      	bgt.n	8009f44 <_dtoa_r+0x934>
 8009ea2:	e089      	b.n	8009fb8 <_dtoa_r+0x9a8>
 8009ea4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ea6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009eaa:	e75d      	b.n	8009d68 <_dtoa_r+0x758>
 8009eac:	9b01      	ldr	r3, [sp, #4]
 8009eae:	1e5e      	subs	r6, r3, #1
 8009eb0:	9b06      	ldr	r3, [sp, #24]
 8009eb2:	42b3      	cmp	r3, r6
 8009eb4:	bfbf      	itttt	lt
 8009eb6:	9b06      	ldrlt	r3, [sp, #24]
 8009eb8:	9606      	strlt	r6, [sp, #24]
 8009eba:	1af2      	sublt	r2, r6, r3
 8009ebc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009ebe:	bfb6      	itet	lt
 8009ec0:	189b      	addlt	r3, r3, r2
 8009ec2:	1b9e      	subge	r6, r3, r6
 8009ec4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009ec6:	9b01      	ldr	r3, [sp, #4]
 8009ec8:	bfb8      	it	lt
 8009eca:	2600      	movlt	r6, #0
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	bfb5      	itete	lt
 8009ed0:	eba8 0503 	sublt.w	r5, r8, r3
 8009ed4:	9b01      	ldrge	r3, [sp, #4]
 8009ed6:	2300      	movlt	r3, #0
 8009ed8:	4645      	movge	r5, r8
 8009eda:	e747      	b.n	8009d6c <_dtoa_r+0x75c>
 8009edc:	9e06      	ldr	r6, [sp, #24]
 8009ede:	9f08      	ldr	r7, [sp, #32]
 8009ee0:	4645      	mov	r5, r8
 8009ee2:	e74c      	b.n	8009d7e <_dtoa_r+0x76e>
 8009ee4:	9a06      	ldr	r2, [sp, #24]
 8009ee6:	e775      	b.n	8009dd4 <_dtoa_r+0x7c4>
 8009ee8:	9b05      	ldr	r3, [sp, #20]
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	dc18      	bgt.n	8009f20 <_dtoa_r+0x910>
 8009eee:	9b02      	ldr	r3, [sp, #8]
 8009ef0:	b9b3      	cbnz	r3, 8009f20 <_dtoa_r+0x910>
 8009ef2:	9b03      	ldr	r3, [sp, #12]
 8009ef4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ef8:	b9a3      	cbnz	r3, 8009f24 <_dtoa_r+0x914>
 8009efa:	9b03      	ldr	r3, [sp, #12]
 8009efc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f00:	0d1b      	lsrs	r3, r3, #20
 8009f02:	051b      	lsls	r3, r3, #20
 8009f04:	b12b      	cbz	r3, 8009f12 <_dtoa_r+0x902>
 8009f06:	9b04      	ldr	r3, [sp, #16]
 8009f08:	3301      	adds	r3, #1
 8009f0a:	9304      	str	r3, [sp, #16]
 8009f0c:	f108 0801 	add.w	r8, r8, #1
 8009f10:	2301      	movs	r3, #1
 8009f12:	9306      	str	r3, [sp, #24]
 8009f14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	f47f af74 	bne.w	8009e04 <_dtoa_r+0x7f4>
 8009f1c:	2001      	movs	r0, #1
 8009f1e:	e779      	b.n	8009e14 <_dtoa_r+0x804>
 8009f20:	2300      	movs	r3, #0
 8009f22:	e7f6      	b.n	8009f12 <_dtoa_r+0x902>
 8009f24:	9b02      	ldr	r3, [sp, #8]
 8009f26:	e7f4      	b.n	8009f12 <_dtoa_r+0x902>
 8009f28:	d085      	beq.n	8009e36 <_dtoa_r+0x826>
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	301c      	adds	r0, #28
 8009f2e:	e77d      	b.n	8009e2c <_dtoa_r+0x81c>
 8009f30:	40240000 	.word	0x40240000
 8009f34:	9b01      	ldr	r3, [sp, #4]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	dc38      	bgt.n	8009fac <_dtoa_r+0x99c>
 8009f3a:	9b05      	ldr	r3, [sp, #20]
 8009f3c:	2b02      	cmp	r3, #2
 8009f3e:	dd35      	ble.n	8009fac <_dtoa_r+0x99c>
 8009f40:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009f44:	f1b9 0f00 	cmp.w	r9, #0
 8009f48:	d10d      	bne.n	8009f66 <_dtoa_r+0x956>
 8009f4a:	4631      	mov	r1, r6
 8009f4c:	464b      	mov	r3, r9
 8009f4e:	2205      	movs	r2, #5
 8009f50:	4620      	mov	r0, r4
 8009f52:	f000 f9b7 	bl	800a2c4 <__multadd>
 8009f56:	4601      	mov	r1, r0
 8009f58:	4606      	mov	r6, r0
 8009f5a:	4658      	mov	r0, fp
 8009f5c:	f000 fbce 	bl	800a6fc <__mcmp>
 8009f60:	2800      	cmp	r0, #0
 8009f62:	f73f adbd 	bgt.w	8009ae0 <_dtoa_r+0x4d0>
 8009f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f68:	9d00      	ldr	r5, [sp, #0]
 8009f6a:	ea6f 0a03 	mvn.w	sl, r3
 8009f6e:	f04f 0800 	mov.w	r8, #0
 8009f72:	4631      	mov	r1, r6
 8009f74:	4620      	mov	r0, r4
 8009f76:	f000 f983 	bl	800a280 <_Bfree>
 8009f7a:	2f00      	cmp	r7, #0
 8009f7c:	f43f aeb4 	beq.w	8009ce8 <_dtoa_r+0x6d8>
 8009f80:	f1b8 0f00 	cmp.w	r8, #0
 8009f84:	d005      	beq.n	8009f92 <_dtoa_r+0x982>
 8009f86:	45b8      	cmp	r8, r7
 8009f88:	d003      	beq.n	8009f92 <_dtoa_r+0x982>
 8009f8a:	4641      	mov	r1, r8
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	f000 f977 	bl	800a280 <_Bfree>
 8009f92:	4639      	mov	r1, r7
 8009f94:	4620      	mov	r0, r4
 8009f96:	f000 f973 	bl	800a280 <_Bfree>
 8009f9a:	e6a5      	b.n	8009ce8 <_dtoa_r+0x6d8>
 8009f9c:	2600      	movs	r6, #0
 8009f9e:	4637      	mov	r7, r6
 8009fa0:	e7e1      	b.n	8009f66 <_dtoa_r+0x956>
 8009fa2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009fa4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009fa8:	4637      	mov	r7, r6
 8009faa:	e599      	b.n	8009ae0 <_dtoa_r+0x4d0>
 8009fac:	9b08      	ldr	r3, [sp, #32]
 8009fae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f000 80fd 	beq.w	800a1b2 <_dtoa_r+0xba2>
 8009fb8:	2d00      	cmp	r5, #0
 8009fba:	dd05      	ble.n	8009fc8 <_dtoa_r+0x9b8>
 8009fbc:	4639      	mov	r1, r7
 8009fbe:	462a      	mov	r2, r5
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	f000 fb2f 	bl	800a624 <__lshift>
 8009fc6:	4607      	mov	r7, r0
 8009fc8:	9b06      	ldr	r3, [sp, #24]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d05c      	beq.n	800a088 <_dtoa_r+0xa78>
 8009fce:	6879      	ldr	r1, [r7, #4]
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	f000 f915 	bl	800a200 <_Balloc>
 8009fd6:	4605      	mov	r5, r0
 8009fd8:	b928      	cbnz	r0, 8009fe6 <_dtoa_r+0x9d6>
 8009fda:	4b80      	ldr	r3, [pc, #512]	; (800a1dc <_dtoa_r+0xbcc>)
 8009fdc:	4602      	mov	r2, r0
 8009fde:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009fe2:	f7ff bb2e 	b.w	8009642 <_dtoa_r+0x32>
 8009fe6:	693a      	ldr	r2, [r7, #16]
 8009fe8:	3202      	adds	r2, #2
 8009fea:	0092      	lsls	r2, r2, #2
 8009fec:	f107 010c 	add.w	r1, r7, #12
 8009ff0:	300c      	adds	r0, #12
 8009ff2:	f7fe fdcd 	bl	8008b90 <memcpy>
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	4629      	mov	r1, r5
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	f000 fb12 	bl	800a624 <__lshift>
 800a000:	9b00      	ldr	r3, [sp, #0]
 800a002:	3301      	adds	r3, #1
 800a004:	9301      	str	r3, [sp, #4]
 800a006:	9b00      	ldr	r3, [sp, #0]
 800a008:	444b      	add	r3, r9
 800a00a:	9307      	str	r3, [sp, #28]
 800a00c:	9b02      	ldr	r3, [sp, #8]
 800a00e:	f003 0301 	and.w	r3, r3, #1
 800a012:	46b8      	mov	r8, r7
 800a014:	9306      	str	r3, [sp, #24]
 800a016:	4607      	mov	r7, r0
 800a018:	9b01      	ldr	r3, [sp, #4]
 800a01a:	4631      	mov	r1, r6
 800a01c:	3b01      	subs	r3, #1
 800a01e:	4658      	mov	r0, fp
 800a020:	9302      	str	r3, [sp, #8]
 800a022:	f7ff fa69 	bl	80094f8 <quorem>
 800a026:	4603      	mov	r3, r0
 800a028:	3330      	adds	r3, #48	; 0x30
 800a02a:	9004      	str	r0, [sp, #16]
 800a02c:	4641      	mov	r1, r8
 800a02e:	4658      	mov	r0, fp
 800a030:	9308      	str	r3, [sp, #32]
 800a032:	f000 fb63 	bl	800a6fc <__mcmp>
 800a036:	463a      	mov	r2, r7
 800a038:	4681      	mov	r9, r0
 800a03a:	4631      	mov	r1, r6
 800a03c:	4620      	mov	r0, r4
 800a03e:	f000 fb79 	bl	800a734 <__mdiff>
 800a042:	68c2      	ldr	r2, [r0, #12]
 800a044:	9b08      	ldr	r3, [sp, #32]
 800a046:	4605      	mov	r5, r0
 800a048:	bb02      	cbnz	r2, 800a08c <_dtoa_r+0xa7c>
 800a04a:	4601      	mov	r1, r0
 800a04c:	4658      	mov	r0, fp
 800a04e:	f000 fb55 	bl	800a6fc <__mcmp>
 800a052:	9b08      	ldr	r3, [sp, #32]
 800a054:	4602      	mov	r2, r0
 800a056:	4629      	mov	r1, r5
 800a058:	4620      	mov	r0, r4
 800a05a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a05e:	f000 f90f 	bl	800a280 <_Bfree>
 800a062:	9b05      	ldr	r3, [sp, #20]
 800a064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a066:	9d01      	ldr	r5, [sp, #4]
 800a068:	ea43 0102 	orr.w	r1, r3, r2
 800a06c:	9b06      	ldr	r3, [sp, #24]
 800a06e:	430b      	orrs	r3, r1
 800a070:	9b08      	ldr	r3, [sp, #32]
 800a072:	d10d      	bne.n	800a090 <_dtoa_r+0xa80>
 800a074:	2b39      	cmp	r3, #57	; 0x39
 800a076:	d029      	beq.n	800a0cc <_dtoa_r+0xabc>
 800a078:	f1b9 0f00 	cmp.w	r9, #0
 800a07c:	dd01      	ble.n	800a082 <_dtoa_r+0xa72>
 800a07e:	9b04      	ldr	r3, [sp, #16]
 800a080:	3331      	adds	r3, #49	; 0x31
 800a082:	9a02      	ldr	r2, [sp, #8]
 800a084:	7013      	strb	r3, [r2, #0]
 800a086:	e774      	b.n	8009f72 <_dtoa_r+0x962>
 800a088:	4638      	mov	r0, r7
 800a08a:	e7b9      	b.n	800a000 <_dtoa_r+0x9f0>
 800a08c:	2201      	movs	r2, #1
 800a08e:	e7e2      	b.n	800a056 <_dtoa_r+0xa46>
 800a090:	f1b9 0f00 	cmp.w	r9, #0
 800a094:	db06      	blt.n	800a0a4 <_dtoa_r+0xa94>
 800a096:	9905      	ldr	r1, [sp, #20]
 800a098:	ea41 0909 	orr.w	r9, r1, r9
 800a09c:	9906      	ldr	r1, [sp, #24]
 800a09e:	ea59 0101 	orrs.w	r1, r9, r1
 800a0a2:	d120      	bne.n	800a0e6 <_dtoa_r+0xad6>
 800a0a4:	2a00      	cmp	r2, #0
 800a0a6:	ddec      	ble.n	800a082 <_dtoa_r+0xa72>
 800a0a8:	4659      	mov	r1, fp
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	9301      	str	r3, [sp, #4]
 800a0b0:	f000 fab8 	bl	800a624 <__lshift>
 800a0b4:	4631      	mov	r1, r6
 800a0b6:	4683      	mov	fp, r0
 800a0b8:	f000 fb20 	bl	800a6fc <__mcmp>
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	9b01      	ldr	r3, [sp, #4]
 800a0c0:	dc02      	bgt.n	800a0c8 <_dtoa_r+0xab8>
 800a0c2:	d1de      	bne.n	800a082 <_dtoa_r+0xa72>
 800a0c4:	07da      	lsls	r2, r3, #31
 800a0c6:	d5dc      	bpl.n	800a082 <_dtoa_r+0xa72>
 800a0c8:	2b39      	cmp	r3, #57	; 0x39
 800a0ca:	d1d8      	bne.n	800a07e <_dtoa_r+0xa6e>
 800a0cc:	9a02      	ldr	r2, [sp, #8]
 800a0ce:	2339      	movs	r3, #57	; 0x39
 800a0d0:	7013      	strb	r3, [r2, #0]
 800a0d2:	462b      	mov	r3, r5
 800a0d4:	461d      	mov	r5, r3
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a0dc:	2a39      	cmp	r2, #57	; 0x39
 800a0de:	d050      	beq.n	800a182 <_dtoa_r+0xb72>
 800a0e0:	3201      	adds	r2, #1
 800a0e2:	701a      	strb	r2, [r3, #0]
 800a0e4:	e745      	b.n	8009f72 <_dtoa_r+0x962>
 800a0e6:	2a00      	cmp	r2, #0
 800a0e8:	dd03      	ble.n	800a0f2 <_dtoa_r+0xae2>
 800a0ea:	2b39      	cmp	r3, #57	; 0x39
 800a0ec:	d0ee      	beq.n	800a0cc <_dtoa_r+0xabc>
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	e7c7      	b.n	800a082 <_dtoa_r+0xa72>
 800a0f2:	9a01      	ldr	r2, [sp, #4]
 800a0f4:	9907      	ldr	r1, [sp, #28]
 800a0f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a0fa:	428a      	cmp	r2, r1
 800a0fc:	d02a      	beq.n	800a154 <_dtoa_r+0xb44>
 800a0fe:	4659      	mov	r1, fp
 800a100:	2300      	movs	r3, #0
 800a102:	220a      	movs	r2, #10
 800a104:	4620      	mov	r0, r4
 800a106:	f000 f8dd 	bl	800a2c4 <__multadd>
 800a10a:	45b8      	cmp	r8, r7
 800a10c:	4683      	mov	fp, r0
 800a10e:	f04f 0300 	mov.w	r3, #0
 800a112:	f04f 020a 	mov.w	r2, #10
 800a116:	4641      	mov	r1, r8
 800a118:	4620      	mov	r0, r4
 800a11a:	d107      	bne.n	800a12c <_dtoa_r+0xb1c>
 800a11c:	f000 f8d2 	bl	800a2c4 <__multadd>
 800a120:	4680      	mov	r8, r0
 800a122:	4607      	mov	r7, r0
 800a124:	9b01      	ldr	r3, [sp, #4]
 800a126:	3301      	adds	r3, #1
 800a128:	9301      	str	r3, [sp, #4]
 800a12a:	e775      	b.n	800a018 <_dtoa_r+0xa08>
 800a12c:	f000 f8ca 	bl	800a2c4 <__multadd>
 800a130:	4639      	mov	r1, r7
 800a132:	4680      	mov	r8, r0
 800a134:	2300      	movs	r3, #0
 800a136:	220a      	movs	r2, #10
 800a138:	4620      	mov	r0, r4
 800a13a:	f000 f8c3 	bl	800a2c4 <__multadd>
 800a13e:	4607      	mov	r7, r0
 800a140:	e7f0      	b.n	800a124 <_dtoa_r+0xb14>
 800a142:	f1b9 0f00 	cmp.w	r9, #0
 800a146:	9a00      	ldr	r2, [sp, #0]
 800a148:	bfcc      	ite	gt
 800a14a:	464d      	movgt	r5, r9
 800a14c:	2501      	movle	r5, #1
 800a14e:	4415      	add	r5, r2
 800a150:	f04f 0800 	mov.w	r8, #0
 800a154:	4659      	mov	r1, fp
 800a156:	2201      	movs	r2, #1
 800a158:	4620      	mov	r0, r4
 800a15a:	9301      	str	r3, [sp, #4]
 800a15c:	f000 fa62 	bl	800a624 <__lshift>
 800a160:	4631      	mov	r1, r6
 800a162:	4683      	mov	fp, r0
 800a164:	f000 faca 	bl	800a6fc <__mcmp>
 800a168:	2800      	cmp	r0, #0
 800a16a:	dcb2      	bgt.n	800a0d2 <_dtoa_r+0xac2>
 800a16c:	d102      	bne.n	800a174 <_dtoa_r+0xb64>
 800a16e:	9b01      	ldr	r3, [sp, #4]
 800a170:	07db      	lsls	r3, r3, #31
 800a172:	d4ae      	bmi.n	800a0d2 <_dtoa_r+0xac2>
 800a174:	462b      	mov	r3, r5
 800a176:	461d      	mov	r5, r3
 800a178:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a17c:	2a30      	cmp	r2, #48	; 0x30
 800a17e:	d0fa      	beq.n	800a176 <_dtoa_r+0xb66>
 800a180:	e6f7      	b.n	8009f72 <_dtoa_r+0x962>
 800a182:	9a00      	ldr	r2, [sp, #0]
 800a184:	429a      	cmp	r2, r3
 800a186:	d1a5      	bne.n	800a0d4 <_dtoa_r+0xac4>
 800a188:	f10a 0a01 	add.w	sl, sl, #1
 800a18c:	2331      	movs	r3, #49	; 0x31
 800a18e:	e779      	b.n	800a084 <_dtoa_r+0xa74>
 800a190:	4b13      	ldr	r3, [pc, #76]	; (800a1e0 <_dtoa_r+0xbd0>)
 800a192:	f7ff baaf 	b.w	80096f4 <_dtoa_r+0xe4>
 800a196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f47f aa86 	bne.w	80096aa <_dtoa_r+0x9a>
 800a19e:	4b11      	ldr	r3, [pc, #68]	; (800a1e4 <_dtoa_r+0xbd4>)
 800a1a0:	f7ff baa8 	b.w	80096f4 <_dtoa_r+0xe4>
 800a1a4:	f1b9 0f00 	cmp.w	r9, #0
 800a1a8:	dc03      	bgt.n	800a1b2 <_dtoa_r+0xba2>
 800a1aa:	9b05      	ldr	r3, [sp, #20]
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	f73f aec9 	bgt.w	8009f44 <_dtoa_r+0x934>
 800a1b2:	9d00      	ldr	r5, [sp, #0]
 800a1b4:	4631      	mov	r1, r6
 800a1b6:	4658      	mov	r0, fp
 800a1b8:	f7ff f99e 	bl	80094f8 <quorem>
 800a1bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a1c0:	f805 3b01 	strb.w	r3, [r5], #1
 800a1c4:	9a00      	ldr	r2, [sp, #0]
 800a1c6:	1aaa      	subs	r2, r5, r2
 800a1c8:	4591      	cmp	r9, r2
 800a1ca:	ddba      	ble.n	800a142 <_dtoa_r+0xb32>
 800a1cc:	4659      	mov	r1, fp
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	220a      	movs	r2, #10
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	f000 f876 	bl	800a2c4 <__multadd>
 800a1d8:	4683      	mov	fp, r0
 800a1da:	e7eb      	b.n	800a1b4 <_dtoa_r+0xba4>
 800a1dc:	0800bbff 	.word	0x0800bbff
 800a1e0:	0800bb58 	.word	0x0800bb58
 800a1e4:	0800bb7c 	.word	0x0800bb7c

0800a1e8 <_localeconv_r>:
 800a1e8:	4800      	ldr	r0, [pc, #0]	; (800a1ec <_localeconv_r+0x4>)
 800a1ea:	4770      	bx	lr
 800a1ec:	20000184 	.word	0x20000184

0800a1f0 <malloc>:
 800a1f0:	4b02      	ldr	r3, [pc, #8]	; (800a1fc <malloc+0xc>)
 800a1f2:	4601      	mov	r1, r0
 800a1f4:	6818      	ldr	r0, [r3, #0]
 800a1f6:	f000 bbe1 	b.w	800a9bc <_malloc_r>
 800a1fa:	bf00      	nop
 800a1fc:	20000030 	.word	0x20000030

0800a200 <_Balloc>:
 800a200:	b570      	push	{r4, r5, r6, lr}
 800a202:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a204:	4604      	mov	r4, r0
 800a206:	460d      	mov	r5, r1
 800a208:	b976      	cbnz	r6, 800a228 <_Balloc+0x28>
 800a20a:	2010      	movs	r0, #16
 800a20c:	f7ff fff0 	bl	800a1f0 <malloc>
 800a210:	4602      	mov	r2, r0
 800a212:	6260      	str	r0, [r4, #36]	; 0x24
 800a214:	b920      	cbnz	r0, 800a220 <_Balloc+0x20>
 800a216:	4b18      	ldr	r3, [pc, #96]	; (800a278 <_Balloc+0x78>)
 800a218:	4818      	ldr	r0, [pc, #96]	; (800a27c <_Balloc+0x7c>)
 800a21a:	2166      	movs	r1, #102	; 0x66
 800a21c:	f000 fd94 	bl	800ad48 <__assert_func>
 800a220:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a224:	6006      	str	r6, [r0, #0]
 800a226:	60c6      	str	r6, [r0, #12]
 800a228:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a22a:	68f3      	ldr	r3, [r6, #12]
 800a22c:	b183      	cbz	r3, 800a250 <_Balloc+0x50>
 800a22e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a236:	b9b8      	cbnz	r0, 800a268 <_Balloc+0x68>
 800a238:	2101      	movs	r1, #1
 800a23a:	fa01 f605 	lsl.w	r6, r1, r5
 800a23e:	1d72      	adds	r2, r6, #5
 800a240:	0092      	lsls	r2, r2, #2
 800a242:	4620      	mov	r0, r4
 800a244:	f000 fb5a 	bl	800a8fc <_calloc_r>
 800a248:	b160      	cbz	r0, 800a264 <_Balloc+0x64>
 800a24a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a24e:	e00e      	b.n	800a26e <_Balloc+0x6e>
 800a250:	2221      	movs	r2, #33	; 0x21
 800a252:	2104      	movs	r1, #4
 800a254:	4620      	mov	r0, r4
 800a256:	f000 fb51 	bl	800a8fc <_calloc_r>
 800a25a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a25c:	60f0      	str	r0, [r6, #12]
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d1e4      	bne.n	800a22e <_Balloc+0x2e>
 800a264:	2000      	movs	r0, #0
 800a266:	bd70      	pop	{r4, r5, r6, pc}
 800a268:	6802      	ldr	r2, [r0, #0]
 800a26a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a26e:	2300      	movs	r3, #0
 800a270:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a274:	e7f7      	b.n	800a266 <_Balloc+0x66>
 800a276:	bf00      	nop
 800a278:	0800bb89 	.word	0x0800bb89
 800a27c:	0800bc10 	.word	0x0800bc10

0800a280 <_Bfree>:
 800a280:	b570      	push	{r4, r5, r6, lr}
 800a282:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a284:	4605      	mov	r5, r0
 800a286:	460c      	mov	r4, r1
 800a288:	b976      	cbnz	r6, 800a2a8 <_Bfree+0x28>
 800a28a:	2010      	movs	r0, #16
 800a28c:	f7ff ffb0 	bl	800a1f0 <malloc>
 800a290:	4602      	mov	r2, r0
 800a292:	6268      	str	r0, [r5, #36]	; 0x24
 800a294:	b920      	cbnz	r0, 800a2a0 <_Bfree+0x20>
 800a296:	4b09      	ldr	r3, [pc, #36]	; (800a2bc <_Bfree+0x3c>)
 800a298:	4809      	ldr	r0, [pc, #36]	; (800a2c0 <_Bfree+0x40>)
 800a29a:	218a      	movs	r1, #138	; 0x8a
 800a29c:	f000 fd54 	bl	800ad48 <__assert_func>
 800a2a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2a4:	6006      	str	r6, [r0, #0]
 800a2a6:	60c6      	str	r6, [r0, #12]
 800a2a8:	b13c      	cbz	r4, 800a2ba <_Bfree+0x3a>
 800a2aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a2ac:	6862      	ldr	r2, [r4, #4]
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2b4:	6021      	str	r1, [r4, #0]
 800a2b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a2ba:	bd70      	pop	{r4, r5, r6, pc}
 800a2bc:	0800bb89 	.word	0x0800bb89
 800a2c0:	0800bc10 	.word	0x0800bc10

0800a2c4 <__multadd>:
 800a2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c8:	690e      	ldr	r6, [r1, #16]
 800a2ca:	4607      	mov	r7, r0
 800a2cc:	4698      	mov	r8, r3
 800a2ce:	460c      	mov	r4, r1
 800a2d0:	f101 0014 	add.w	r0, r1, #20
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	6805      	ldr	r5, [r0, #0]
 800a2d8:	b2a9      	uxth	r1, r5
 800a2da:	fb02 8101 	mla	r1, r2, r1, r8
 800a2de:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a2e2:	0c2d      	lsrs	r5, r5, #16
 800a2e4:	fb02 c505 	mla	r5, r2, r5, ip
 800a2e8:	b289      	uxth	r1, r1
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a2f0:	429e      	cmp	r6, r3
 800a2f2:	f840 1b04 	str.w	r1, [r0], #4
 800a2f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a2fa:	dcec      	bgt.n	800a2d6 <__multadd+0x12>
 800a2fc:	f1b8 0f00 	cmp.w	r8, #0
 800a300:	d022      	beq.n	800a348 <__multadd+0x84>
 800a302:	68a3      	ldr	r3, [r4, #8]
 800a304:	42b3      	cmp	r3, r6
 800a306:	dc19      	bgt.n	800a33c <__multadd+0x78>
 800a308:	6861      	ldr	r1, [r4, #4]
 800a30a:	4638      	mov	r0, r7
 800a30c:	3101      	adds	r1, #1
 800a30e:	f7ff ff77 	bl	800a200 <_Balloc>
 800a312:	4605      	mov	r5, r0
 800a314:	b928      	cbnz	r0, 800a322 <__multadd+0x5e>
 800a316:	4602      	mov	r2, r0
 800a318:	4b0d      	ldr	r3, [pc, #52]	; (800a350 <__multadd+0x8c>)
 800a31a:	480e      	ldr	r0, [pc, #56]	; (800a354 <__multadd+0x90>)
 800a31c:	21b5      	movs	r1, #181	; 0xb5
 800a31e:	f000 fd13 	bl	800ad48 <__assert_func>
 800a322:	6922      	ldr	r2, [r4, #16]
 800a324:	3202      	adds	r2, #2
 800a326:	f104 010c 	add.w	r1, r4, #12
 800a32a:	0092      	lsls	r2, r2, #2
 800a32c:	300c      	adds	r0, #12
 800a32e:	f7fe fc2f 	bl	8008b90 <memcpy>
 800a332:	4621      	mov	r1, r4
 800a334:	4638      	mov	r0, r7
 800a336:	f7ff ffa3 	bl	800a280 <_Bfree>
 800a33a:	462c      	mov	r4, r5
 800a33c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a340:	3601      	adds	r6, #1
 800a342:	f8c3 8014 	str.w	r8, [r3, #20]
 800a346:	6126      	str	r6, [r4, #16]
 800a348:	4620      	mov	r0, r4
 800a34a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a34e:	bf00      	nop
 800a350:	0800bbff 	.word	0x0800bbff
 800a354:	0800bc10 	.word	0x0800bc10

0800a358 <__hi0bits>:
 800a358:	0c03      	lsrs	r3, r0, #16
 800a35a:	041b      	lsls	r3, r3, #16
 800a35c:	b9d3      	cbnz	r3, 800a394 <__hi0bits+0x3c>
 800a35e:	0400      	lsls	r0, r0, #16
 800a360:	2310      	movs	r3, #16
 800a362:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a366:	bf04      	itt	eq
 800a368:	0200      	lsleq	r0, r0, #8
 800a36a:	3308      	addeq	r3, #8
 800a36c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a370:	bf04      	itt	eq
 800a372:	0100      	lsleq	r0, r0, #4
 800a374:	3304      	addeq	r3, #4
 800a376:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a37a:	bf04      	itt	eq
 800a37c:	0080      	lsleq	r0, r0, #2
 800a37e:	3302      	addeq	r3, #2
 800a380:	2800      	cmp	r0, #0
 800a382:	db05      	blt.n	800a390 <__hi0bits+0x38>
 800a384:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a388:	f103 0301 	add.w	r3, r3, #1
 800a38c:	bf08      	it	eq
 800a38e:	2320      	moveq	r3, #32
 800a390:	4618      	mov	r0, r3
 800a392:	4770      	bx	lr
 800a394:	2300      	movs	r3, #0
 800a396:	e7e4      	b.n	800a362 <__hi0bits+0xa>

0800a398 <__lo0bits>:
 800a398:	6803      	ldr	r3, [r0, #0]
 800a39a:	f013 0207 	ands.w	r2, r3, #7
 800a39e:	4601      	mov	r1, r0
 800a3a0:	d00b      	beq.n	800a3ba <__lo0bits+0x22>
 800a3a2:	07da      	lsls	r2, r3, #31
 800a3a4:	d424      	bmi.n	800a3f0 <__lo0bits+0x58>
 800a3a6:	0798      	lsls	r0, r3, #30
 800a3a8:	bf49      	itett	mi
 800a3aa:	085b      	lsrmi	r3, r3, #1
 800a3ac:	089b      	lsrpl	r3, r3, #2
 800a3ae:	2001      	movmi	r0, #1
 800a3b0:	600b      	strmi	r3, [r1, #0]
 800a3b2:	bf5c      	itt	pl
 800a3b4:	600b      	strpl	r3, [r1, #0]
 800a3b6:	2002      	movpl	r0, #2
 800a3b8:	4770      	bx	lr
 800a3ba:	b298      	uxth	r0, r3
 800a3bc:	b9b0      	cbnz	r0, 800a3ec <__lo0bits+0x54>
 800a3be:	0c1b      	lsrs	r3, r3, #16
 800a3c0:	2010      	movs	r0, #16
 800a3c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a3c6:	bf04      	itt	eq
 800a3c8:	0a1b      	lsreq	r3, r3, #8
 800a3ca:	3008      	addeq	r0, #8
 800a3cc:	071a      	lsls	r2, r3, #28
 800a3ce:	bf04      	itt	eq
 800a3d0:	091b      	lsreq	r3, r3, #4
 800a3d2:	3004      	addeq	r0, #4
 800a3d4:	079a      	lsls	r2, r3, #30
 800a3d6:	bf04      	itt	eq
 800a3d8:	089b      	lsreq	r3, r3, #2
 800a3da:	3002      	addeq	r0, #2
 800a3dc:	07da      	lsls	r2, r3, #31
 800a3de:	d403      	bmi.n	800a3e8 <__lo0bits+0x50>
 800a3e0:	085b      	lsrs	r3, r3, #1
 800a3e2:	f100 0001 	add.w	r0, r0, #1
 800a3e6:	d005      	beq.n	800a3f4 <__lo0bits+0x5c>
 800a3e8:	600b      	str	r3, [r1, #0]
 800a3ea:	4770      	bx	lr
 800a3ec:	4610      	mov	r0, r2
 800a3ee:	e7e8      	b.n	800a3c2 <__lo0bits+0x2a>
 800a3f0:	2000      	movs	r0, #0
 800a3f2:	4770      	bx	lr
 800a3f4:	2020      	movs	r0, #32
 800a3f6:	4770      	bx	lr

0800a3f8 <__i2b>:
 800a3f8:	b510      	push	{r4, lr}
 800a3fa:	460c      	mov	r4, r1
 800a3fc:	2101      	movs	r1, #1
 800a3fe:	f7ff feff 	bl	800a200 <_Balloc>
 800a402:	4602      	mov	r2, r0
 800a404:	b928      	cbnz	r0, 800a412 <__i2b+0x1a>
 800a406:	4b05      	ldr	r3, [pc, #20]	; (800a41c <__i2b+0x24>)
 800a408:	4805      	ldr	r0, [pc, #20]	; (800a420 <__i2b+0x28>)
 800a40a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a40e:	f000 fc9b 	bl	800ad48 <__assert_func>
 800a412:	2301      	movs	r3, #1
 800a414:	6144      	str	r4, [r0, #20]
 800a416:	6103      	str	r3, [r0, #16]
 800a418:	bd10      	pop	{r4, pc}
 800a41a:	bf00      	nop
 800a41c:	0800bbff 	.word	0x0800bbff
 800a420:	0800bc10 	.word	0x0800bc10

0800a424 <__multiply>:
 800a424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a428:	4614      	mov	r4, r2
 800a42a:	690a      	ldr	r2, [r1, #16]
 800a42c:	6923      	ldr	r3, [r4, #16]
 800a42e:	429a      	cmp	r2, r3
 800a430:	bfb8      	it	lt
 800a432:	460b      	movlt	r3, r1
 800a434:	460d      	mov	r5, r1
 800a436:	bfbc      	itt	lt
 800a438:	4625      	movlt	r5, r4
 800a43a:	461c      	movlt	r4, r3
 800a43c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a440:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a444:	68ab      	ldr	r3, [r5, #8]
 800a446:	6869      	ldr	r1, [r5, #4]
 800a448:	eb0a 0709 	add.w	r7, sl, r9
 800a44c:	42bb      	cmp	r3, r7
 800a44e:	b085      	sub	sp, #20
 800a450:	bfb8      	it	lt
 800a452:	3101      	addlt	r1, #1
 800a454:	f7ff fed4 	bl	800a200 <_Balloc>
 800a458:	b930      	cbnz	r0, 800a468 <__multiply+0x44>
 800a45a:	4602      	mov	r2, r0
 800a45c:	4b42      	ldr	r3, [pc, #264]	; (800a568 <__multiply+0x144>)
 800a45e:	4843      	ldr	r0, [pc, #268]	; (800a56c <__multiply+0x148>)
 800a460:	f240 115d 	movw	r1, #349	; 0x15d
 800a464:	f000 fc70 	bl	800ad48 <__assert_func>
 800a468:	f100 0614 	add.w	r6, r0, #20
 800a46c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a470:	4633      	mov	r3, r6
 800a472:	2200      	movs	r2, #0
 800a474:	4543      	cmp	r3, r8
 800a476:	d31e      	bcc.n	800a4b6 <__multiply+0x92>
 800a478:	f105 0c14 	add.w	ip, r5, #20
 800a47c:	f104 0314 	add.w	r3, r4, #20
 800a480:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a484:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a488:	9202      	str	r2, [sp, #8]
 800a48a:	ebac 0205 	sub.w	r2, ip, r5
 800a48e:	3a15      	subs	r2, #21
 800a490:	f022 0203 	bic.w	r2, r2, #3
 800a494:	3204      	adds	r2, #4
 800a496:	f105 0115 	add.w	r1, r5, #21
 800a49a:	458c      	cmp	ip, r1
 800a49c:	bf38      	it	cc
 800a49e:	2204      	movcc	r2, #4
 800a4a0:	9201      	str	r2, [sp, #4]
 800a4a2:	9a02      	ldr	r2, [sp, #8]
 800a4a4:	9303      	str	r3, [sp, #12]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d808      	bhi.n	800a4bc <__multiply+0x98>
 800a4aa:	2f00      	cmp	r7, #0
 800a4ac:	dc55      	bgt.n	800a55a <__multiply+0x136>
 800a4ae:	6107      	str	r7, [r0, #16]
 800a4b0:	b005      	add	sp, #20
 800a4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4b6:	f843 2b04 	str.w	r2, [r3], #4
 800a4ba:	e7db      	b.n	800a474 <__multiply+0x50>
 800a4bc:	f8b3 a000 	ldrh.w	sl, [r3]
 800a4c0:	f1ba 0f00 	cmp.w	sl, #0
 800a4c4:	d020      	beq.n	800a508 <__multiply+0xe4>
 800a4c6:	f105 0e14 	add.w	lr, r5, #20
 800a4ca:	46b1      	mov	r9, r6
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a4d2:	f8d9 b000 	ldr.w	fp, [r9]
 800a4d6:	b2a1      	uxth	r1, r4
 800a4d8:	fa1f fb8b 	uxth.w	fp, fp
 800a4dc:	fb0a b101 	mla	r1, sl, r1, fp
 800a4e0:	4411      	add	r1, r2
 800a4e2:	f8d9 2000 	ldr.w	r2, [r9]
 800a4e6:	0c24      	lsrs	r4, r4, #16
 800a4e8:	0c12      	lsrs	r2, r2, #16
 800a4ea:	fb0a 2404 	mla	r4, sl, r4, r2
 800a4ee:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a4f2:	b289      	uxth	r1, r1
 800a4f4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a4f8:	45f4      	cmp	ip, lr
 800a4fa:	f849 1b04 	str.w	r1, [r9], #4
 800a4fe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a502:	d8e4      	bhi.n	800a4ce <__multiply+0xaa>
 800a504:	9901      	ldr	r1, [sp, #4]
 800a506:	5072      	str	r2, [r6, r1]
 800a508:	9a03      	ldr	r2, [sp, #12]
 800a50a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a50e:	3304      	adds	r3, #4
 800a510:	f1b9 0f00 	cmp.w	r9, #0
 800a514:	d01f      	beq.n	800a556 <__multiply+0x132>
 800a516:	6834      	ldr	r4, [r6, #0]
 800a518:	f105 0114 	add.w	r1, r5, #20
 800a51c:	46b6      	mov	lr, r6
 800a51e:	f04f 0a00 	mov.w	sl, #0
 800a522:	880a      	ldrh	r2, [r1, #0]
 800a524:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a528:	fb09 b202 	mla	r2, r9, r2, fp
 800a52c:	4492      	add	sl, r2
 800a52e:	b2a4      	uxth	r4, r4
 800a530:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a534:	f84e 4b04 	str.w	r4, [lr], #4
 800a538:	f851 4b04 	ldr.w	r4, [r1], #4
 800a53c:	f8be 2000 	ldrh.w	r2, [lr]
 800a540:	0c24      	lsrs	r4, r4, #16
 800a542:	fb09 2404 	mla	r4, r9, r4, r2
 800a546:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a54a:	458c      	cmp	ip, r1
 800a54c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a550:	d8e7      	bhi.n	800a522 <__multiply+0xfe>
 800a552:	9a01      	ldr	r2, [sp, #4]
 800a554:	50b4      	str	r4, [r6, r2]
 800a556:	3604      	adds	r6, #4
 800a558:	e7a3      	b.n	800a4a2 <__multiply+0x7e>
 800a55a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1a5      	bne.n	800a4ae <__multiply+0x8a>
 800a562:	3f01      	subs	r7, #1
 800a564:	e7a1      	b.n	800a4aa <__multiply+0x86>
 800a566:	bf00      	nop
 800a568:	0800bbff 	.word	0x0800bbff
 800a56c:	0800bc10 	.word	0x0800bc10

0800a570 <__pow5mult>:
 800a570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a574:	4615      	mov	r5, r2
 800a576:	f012 0203 	ands.w	r2, r2, #3
 800a57a:	4606      	mov	r6, r0
 800a57c:	460f      	mov	r7, r1
 800a57e:	d007      	beq.n	800a590 <__pow5mult+0x20>
 800a580:	4c25      	ldr	r4, [pc, #148]	; (800a618 <__pow5mult+0xa8>)
 800a582:	3a01      	subs	r2, #1
 800a584:	2300      	movs	r3, #0
 800a586:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a58a:	f7ff fe9b 	bl	800a2c4 <__multadd>
 800a58e:	4607      	mov	r7, r0
 800a590:	10ad      	asrs	r5, r5, #2
 800a592:	d03d      	beq.n	800a610 <__pow5mult+0xa0>
 800a594:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a596:	b97c      	cbnz	r4, 800a5b8 <__pow5mult+0x48>
 800a598:	2010      	movs	r0, #16
 800a59a:	f7ff fe29 	bl	800a1f0 <malloc>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	6270      	str	r0, [r6, #36]	; 0x24
 800a5a2:	b928      	cbnz	r0, 800a5b0 <__pow5mult+0x40>
 800a5a4:	4b1d      	ldr	r3, [pc, #116]	; (800a61c <__pow5mult+0xac>)
 800a5a6:	481e      	ldr	r0, [pc, #120]	; (800a620 <__pow5mult+0xb0>)
 800a5a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a5ac:	f000 fbcc 	bl	800ad48 <__assert_func>
 800a5b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5b4:	6004      	str	r4, [r0, #0]
 800a5b6:	60c4      	str	r4, [r0, #12]
 800a5b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a5bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a5c0:	b94c      	cbnz	r4, 800a5d6 <__pow5mult+0x66>
 800a5c2:	f240 2171 	movw	r1, #625	; 0x271
 800a5c6:	4630      	mov	r0, r6
 800a5c8:	f7ff ff16 	bl	800a3f8 <__i2b>
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	6003      	str	r3, [r0, #0]
 800a5d6:	f04f 0900 	mov.w	r9, #0
 800a5da:	07eb      	lsls	r3, r5, #31
 800a5dc:	d50a      	bpl.n	800a5f4 <__pow5mult+0x84>
 800a5de:	4639      	mov	r1, r7
 800a5e0:	4622      	mov	r2, r4
 800a5e2:	4630      	mov	r0, r6
 800a5e4:	f7ff ff1e 	bl	800a424 <__multiply>
 800a5e8:	4639      	mov	r1, r7
 800a5ea:	4680      	mov	r8, r0
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	f7ff fe47 	bl	800a280 <_Bfree>
 800a5f2:	4647      	mov	r7, r8
 800a5f4:	106d      	asrs	r5, r5, #1
 800a5f6:	d00b      	beq.n	800a610 <__pow5mult+0xa0>
 800a5f8:	6820      	ldr	r0, [r4, #0]
 800a5fa:	b938      	cbnz	r0, 800a60c <__pow5mult+0x9c>
 800a5fc:	4622      	mov	r2, r4
 800a5fe:	4621      	mov	r1, r4
 800a600:	4630      	mov	r0, r6
 800a602:	f7ff ff0f 	bl	800a424 <__multiply>
 800a606:	6020      	str	r0, [r4, #0]
 800a608:	f8c0 9000 	str.w	r9, [r0]
 800a60c:	4604      	mov	r4, r0
 800a60e:	e7e4      	b.n	800a5da <__pow5mult+0x6a>
 800a610:	4638      	mov	r0, r7
 800a612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a616:	bf00      	nop
 800a618:	0800bd60 	.word	0x0800bd60
 800a61c:	0800bb89 	.word	0x0800bb89
 800a620:	0800bc10 	.word	0x0800bc10

0800a624 <__lshift>:
 800a624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a628:	460c      	mov	r4, r1
 800a62a:	6849      	ldr	r1, [r1, #4]
 800a62c:	6923      	ldr	r3, [r4, #16]
 800a62e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a632:	68a3      	ldr	r3, [r4, #8]
 800a634:	4607      	mov	r7, r0
 800a636:	4691      	mov	r9, r2
 800a638:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a63c:	f108 0601 	add.w	r6, r8, #1
 800a640:	42b3      	cmp	r3, r6
 800a642:	db0b      	blt.n	800a65c <__lshift+0x38>
 800a644:	4638      	mov	r0, r7
 800a646:	f7ff fddb 	bl	800a200 <_Balloc>
 800a64a:	4605      	mov	r5, r0
 800a64c:	b948      	cbnz	r0, 800a662 <__lshift+0x3e>
 800a64e:	4602      	mov	r2, r0
 800a650:	4b28      	ldr	r3, [pc, #160]	; (800a6f4 <__lshift+0xd0>)
 800a652:	4829      	ldr	r0, [pc, #164]	; (800a6f8 <__lshift+0xd4>)
 800a654:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a658:	f000 fb76 	bl	800ad48 <__assert_func>
 800a65c:	3101      	adds	r1, #1
 800a65e:	005b      	lsls	r3, r3, #1
 800a660:	e7ee      	b.n	800a640 <__lshift+0x1c>
 800a662:	2300      	movs	r3, #0
 800a664:	f100 0114 	add.w	r1, r0, #20
 800a668:	f100 0210 	add.w	r2, r0, #16
 800a66c:	4618      	mov	r0, r3
 800a66e:	4553      	cmp	r3, sl
 800a670:	db33      	blt.n	800a6da <__lshift+0xb6>
 800a672:	6920      	ldr	r0, [r4, #16]
 800a674:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a678:	f104 0314 	add.w	r3, r4, #20
 800a67c:	f019 091f 	ands.w	r9, r9, #31
 800a680:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a684:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a688:	d02b      	beq.n	800a6e2 <__lshift+0xbe>
 800a68a:	f1c9 0e20 	rsb	lr, r9, #32
 800a68e:	468a      	mov	sl, r1
 800a690:	2200      	movs	r2, #0
 800a692:	6818      	ldr	r0, [r3, #0]
 800a694:	fa00 f009 	lsl.w	r0, r0, r9
 800a698:	4302      	orrs	r2, r0
 800a69a:	f84a 2b04 	str.w	r2, [sl], #4
 800a69e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6a2:	459c      	cmp	ip, r3
 800a6a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a6a8:	d8f3      	bhi.n	800a692 <__lshift+0x6e>
 800a6aa:	ebac 0304 	sub.w	r3, ip, r4
 800a6ae:	3b15      	subs	r3, #21
 800a6b0:	f023 0303 	bic.w	r3, r3, #3
 800a6b4:	3304      	adds	r3, #4
 800a6b6:	f104 0015 	add.w	r0, r4, #21
 800a6ba:	4584      	cmp	ip, r0
 800a6bc:	bf38      	it	cc
 800a6be:	2304      	movcc	r3, #4
 800a6c0:	50ca      	str	r2, [r1, r3]
 800a6c2:	b10a      	cbz	r2, 800a6c8 <__lshift+0xa4>
 800a6c4:	f108 0602 	add.w	r6, r8, #2
 800a6c8:	3e01      	subs	r6, #1
 800a6ca:	4638      	mov	r0, r7
 800a6cc:	612e      	str	r6, [r5, #16]
 800a6ce:	4621      	mov	r1, r4
 800a6d0:	f7ff fdd6 	bl	800a280 <_Bfree>
 800a6d4:	4628      	mov	r0, r5
 800a6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6da:	f842 0f04 	str.w	r0, [r2, #4]!
 800a6de:	3301      	adds	r3, #1
 800a6e0:	e7c5      	b.n	800a66e <__lshift+0x4a>
 800a6e2:	3904      	subs	r1, #4
 800a6e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a6ec:	459c      	cmp	ip, r3
 800a6ee:	d8f9      	bhi.n	800a6e4 <__lshift+0xc0>
 800a6f0:	e7ea      	b.n	800a6c8 <__lshift+0xa4>
 800a6f2:	bf00      	nop
 800a6f4:	0800bbff 	.word	0x0800bbff
 800a6f8:	0800bc10 	.word	0x0800bc10

0800a6fc <__mcmp>:
 800a6fc:	b530      	push	{r4, r5, lr}
 800a6fe:	6902      	ldr	r2, [r0, #16]
 800a700:	690c      	ldr	r4, [r1, #16]
 800a702:	1b12      	subs	r2, r2, r4
 800a704:	d10e      	bne.n	800a724 <__mcmp+0x28>
 800a706:	f100 0314 	add.w	r3, r0, #20
 800a70a:	3114      	adds	r1, #20
 800a70c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a710:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a714:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a718:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a71c:	42a5      	cmp	r5, r4
 800a71e:	d003      	beq.n	800a728 <__mcmp+0x2c>
 800a720:	d305      	bcc.n	800a72e <__mcmp+0x32>
 800a722:	2201      	movs	r2, #1
 800a724:	4610      	mov	r0, r2
 800a726:	bd30      	pop	{r4, r5, pc}
 800a728:	4283      	cmp	r3, r0
 800a72a:	d3f3      	bcc.n	800a714 <__mcmp+0x18>
 800a72c:	e7fa      	b.n	800a724 <__mcmp+0x28>
 800a72e:	f04f 32ff 	mov.w	r2, #4294967295
 800a732:	e7f7      	b.n	800a724 <__mcmp+0x28>

0800a734 <__mdiff>:
 800a734:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a738:	460c      	mov	r4, r1
 800a73a:	4606      	mov	r6, r0
 800a73c:	4611      	mov	r1, r2
 800a73e:	4620      	mov	r0, r4
 800a740:	4617      	mov	r7, r2
 800a742:	f7ff ffdb 	bl	800a6fc <__mcmp>
 800a746:	1e05      	subs	r5, r0, #0
 800a748:	d110      	bne.n	800a76c <__mdiff+0x38>
 800a74a:	4629      	mov	r1, r5
 800a74c:	4630      	mov	r0, r6
 800a74e:	f7ff fd57 	bl	800a200 <_Balloc>
 800a752:	b930      	cbnz	r0, 800a762 <__mdiff+0x2e>
 800a754:	4b39      	ldr	r3, [pc, #228]	; (800a83c <__mdiff+0x108>)
 800a756:	4602      	mov	r2, r0
 800a758:	f240 2132 	movw	r1, #562	; 0x232
 800a75c:	4838      	ldr	r0, [pc, #224]	; (800a840 <__mdiff+0x10c>)
 800a75e:	f000 faf3 	bl	800ad48 <__assert_func>
 800a762:	2301      	movs	r3, #1
 800a764:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a768:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a76c:	bfa4      	itt	ge
 800a76e:	463b      	movge	r3, r7
 800a770:	4627      	movge	r7, r4
 800a772:	4630      	mov	r0, r6
 800a774:	6879      	ldr	r1, [r7, #4]
 800a776:	bfa6      	itte	ge
 800a778:	461c      	movge	r4, r3
 800a77a:	2500      	movge	r5, #0
 800a77c:	2501      	movlt	r5, #1
 800a77e:	f7ff fd3f 	bl	800a200 <_Balloc>
 800a782:	b920      	cbnz	r0, 800a78e <__mdiff+0x5a>
 800a784:	4b2d      	ldr	r3, [pc, #180]	; (800a83c <__mdiff+0x108>)
 800a786:	4602      	mov	r2, r0
 800a788:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a78c:	e7e6      	b.n	800a75c <__mdiff+0x28>
 800a78e:	693e      	ldr	r6, [r7, #16]
 800a790:	60c5      	str	r5, [r0, #12]
 800a792:	6925      	ldr	r5, [r4, #16]
 800a794:	f107 0114 	add.w	r1, r7, #20
 800a798:	f104 0914 	add.w	r9, r4, #20
 800a79c:	f100 0e14 	add.w	lr, r0, #20
 800a7a0:	f107 0210 	add.w	r2, r7, #16
 800a7a4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a7a8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a7ac:	46f2      	mov	sl, lr
 800a7ae:	2700      	movs	r7, #0
 800a7b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a7b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a7b8:	fa1f f883 	uxth.w	r8, r3
 800a7bc:	fa17 f78b 	uxtah	r7, r7, fp
 800a7c0:	0c1b      	lsrs	r3, r3, #16
 800a7c2:	eba7 0808 	sub.w	r8, r7, r8
 800a7c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a7ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a7ce:	fa1f f888 	uxth.w	r8, r8
 800a7d2:	141f      	asrs	r7, r3, #16
 800a7d4:	454d      	cmp	r5, r9
 800a7d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a7da:	f84a 3b04 	str.w	r3, [sl], #4
 800a7de:	d8e7      	bhi.n	800a7b0 <__mdiff+0x7c>
 800a7e0:	1b2b      	subs	r3, r5, r4
 800a7e2:	3b15      	subs	r3, #21
 800a7e4:	f023 0303 	bic.w	r3, r3, #3
 800a7e8:	3304      	adds	r3, #4
 800a7ea:	3415      	adds	r4, #21
 800a7ec:	42a5      	cmp	r5, r4
 800a7ee:	bf38      	it	cc
 800a7f0:	2304      	movcc	r3, #4
 800a7f2:	4419      	add	r1, r3
 800a7f4:	4473      	add	r3, lr
 800a7f6:	469e      	mov	lr, r3
 800a7f8:	460d      	mov	r5, r1
 800a7fa:	4565      	cmp	r5, ip
 800a7fc:	d30e      	bcc.n	800a81c <__mdiff+0xe8>
 800a7fe:	f10c 0203 	add.w	r2, ip, #3
 800a802:	1a52      	subs	r2, r2, r1
 800a804:	f022 0203 	bic.w	r2, r2, #3
 800a808:	3903      	subs	r1, #3
 800a80a:	458c      	cmp	ip, r1
 800a80c:	bf38      	it	cc
 800a80e:	2200      	movcc	r2, #0
 800a810:	441a      	add	r2, r3
 800a812:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a816:	b17b      	cbz	r3, 800a838 <__mdiff+0x104>
 800a818:	6106      	str	r6, [r0, #16]
 800a81a:	e7a5      	b.n	800a768 <__mdiff+0x34>
 800a81c:	f855 8b04 	ldr.w	r8, [r5], #4
 800a820:	fa17 f488 	uxtah	r4, r7, r8
 800a824:	1422      	asrs	r2, r4, #16
 800a826:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a82a:	b2a4      	uxth	r4, r4
 800a82c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a830:	f84e 4b04 	str.w	r4, [lr], #4
 800a834:	1417      	asrs	r7, r2, #16
 800a836:	e7e0      	b.n	800a7fa <__mdiff+0xc6>
 800a838:	3e01      	subs	r6, #1
 800a83a:	e7ea      	b.n	800a812 <__mdiff+0xde>
 800a83c:	0800bbff 	.word	0x0800bbff
 800a840:	0800bc10 	.word	0x0800bc10

0800a844 <__d2b>:
 800a844:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a848:	4689      	mov	r9, r1
 800a84a:	2101      	movs	r1, #1
 800a84c:	ec57 6b10 	vmov	r6, r7, d0
 800a850:	4690      	mov	r8, r2
 800a852:	f7ff fcd5 	bl	800a200 <_Balloc>
 800a856:	4604      	mov	r4, r0
 800a858:	b930      	cbnz	r0, 800a868 <__d2b+0x24>
 800a85a:	4602      	mov	r2, r0
 800a85c:	4b25      	ldr	r3, [pc, #148]	; (800a8f4 <__d2b+0xb0>)
 800a85e:	4826      	ldr	r0, [pc, #152]	; (800a8f8 <__d2b+0xb4>)
 800a860:	f240 310a 	movw	r1, #778	; 0x30a
 800a864:	f000 fa70 	bl	800ad48 <__assert_func>
 800a868:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a86c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a870:	bb35      	cbnz	r5, 800a8c0 <__d2b+0x7c>
 800a872:	2e00      	cmp	r6, #0
 800a874:	9301      	str	r3, [sp, #4]
 800a876:	d028      	beq.n	800a8ca <__d2b+0x86>
 800a878:	4668      	mov	r0, sp
 800a87a:	9600      	str	r6, [sp, #0]
 800a87c:	f7ff fd8c 	bl	800a398 <__lo0bits>
 800a880:	9900      	ldr	r1, [sp, #0]
 800a882:	b300      	cbz	r0, 800a8c6 <__d2b+0x82>
 800a884:	9a01      	ldr	r2, [sp, #4]
 800a886:	f1c0 0320 	rsb	r3, r0, #32
 800a88a:	fa02 f303 	lsl.w	r3, r2, r3
 800a88e:	430b      	orrs	r3, r1
 800a890:	40c2      	lsrs	r2, r0
 800a892:	6163      	str	r3, [r4, #20]
 800a894:	9201      	str	r2, [sp, #4]
 800a896:	9b01      	ldr	r3, [sp, #4]
 800a898:	61a3      	str	r3, [r4, #24]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	bf14      	ite	ne
 800a89e:	2202      	movne	r2, #2
 800a8a0:	2201      	moveq	r2, #1
 800a8a2:	6122      	str	r2, [r4, #16]
 800a8a4:	b1d5      	cbz	r5, 800a8dc <__d2b+0x98>
 800a8a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a8aa:	4405      	add	r5, r0
 800a8ac:	f8c9 5000 	str.w	r5, [r9]
 800a8b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a8b4:	f8c8 0000 	str.w	r0, [r8]
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	b003      	add	sp, #12
 800a8bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8c4:	e7d5      	b.n	800a872 <__d2b+0x2e>
 800a8c6:	6161      	str	r1, [r4, #20]
 800a8c8:	e7e5      	b.n	800a896 <__d2b+0x52>
 800a8ca:	a801      	add	r0, sp, #4
 800a8cc:	f7ff fd64 	bl	800a398 <__lo0bits>
 800a8d0:	9b01      	ldr	r3, [sp, #4]
 800a8d2:	6163      	str	r3, [r4, #20]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	6122      	str	r2, [r4, #16]
 800a8d8:	3020      	adds	r0, #32
 800a8da:	e7e3      	b.n	800a8a4 <__d2b+0x60>
 800a8dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a8e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a8e4:	f8c9 0000 	str.w	r0, [r9]
 800a8e8:	6918      	ldr	r0, [r3, #16]
 800a8ea:	f7ff fd35 	bl	800a358 <__hi0bits>
 800a8ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a8f2:	e7df      	b.n	800a8b4 <__d2b+0x70>
 800a8f4:	0800bbff 	.word	0x0800bbff
 800a8f8:	0800bc10 	.word	0x0800bc10

0800a8fc <_calloc_r>:
 800a8fc:	b513      	push	{r0, r1, r4, lr}
 800a8fe:	434a      	muls	r2, r1
 800a900:	4611      	mov	r1, r2
 800a902:	9201      	str	r2, [sp, #4]
 800a904:	f000 f85a 	bl	800a9bc <_malloc_r>
 800a908:	4604      	mov	r4, r0
 800a90a:	b118      	cbz	r0, 800a914 <_calloc_r+0x18>
 800a90c:	9a01      	ldr	r2, [sp, #4]
 800a90e:	2100      	movs	r1, #0
 800a910:	f7fe f94c 	bl	8008bac <memset>
 800a914:	4620      	mov	r0, r4
 800a916:	b002      	add	sp, #8
 800a918:	bd10      	pop	{r4, pc}
	...

0800a91c <_free_r>:
 800a91c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a91e:	2900      	cmp	r1, #0
 800a920:	d048      	beq.n	800a9b4 <_free_r+0x98>
 800a922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a926:	9001      	str	r0, [sp, #4]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f1a1 0404 	sub.w	r4, r1, #4
 800a92e:	bfb8      	it	lt
 800a930:	18e4      	addlt	r4, r4, r3
 800a932:	f000 fa65 	bl	800ae00 <__malloc_lock>
 800a936:	4a20      	ldr	r2, [pc, #128]	; (800a9b8 <_free_r+0x9c>)
 800a938:	9801      	ldr	r0, [sp, #4]
 800a93a:	6813      	ldr	r3, [r2, #0]
 800a93c:	4615      	mov	r5, r2
 800a93e:	b933      	cbnz	r3, 800a94e <_free_r+0x32>
 800a940:	6063      	str	r3, [r4, #4]
 800a942:	6014      	str	r4, [r2, #0]
 800a944:	b003      	add	sp, #12
 800a946:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a94a:	f000 ba5f 	b.w	800ae0c <__malloc_unlock>
 800a94e:	42a3      	cmp	r3, r4
 800a950:	d90b      	bls.n	800a96a <_free_r+0x4e>
 800a952:	6821      	ldr	r1, [r4, #0]
 800a954:	1862      	adds	r2, r4, r1
 800a956:	4293      	cmp	r3, r2
 800a958:	bf04      	itt	eq
 800a95a:	681a      	ldreq	r2, [r3, #0]
 800a95c:	685b      	ldreq	r3, [r3, #4]
 800a95e:	6063      	str	r3, [r4, #4]
 800a960:	bf04      	itt	eq
 800a962:	1852      	addeq	r2, r2, r1
 800a964:	6022      	streq	r2, [r4, #0]
 800a966:	602c      	str	r4, [r5, #0]
 800a968:	e7ec      	b.n	800a944 <_free_r+0x28>
 800a96a:	461a      	mov	r2, r3
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	b10b      	cbz	r3, 800a974 <_free_r+0x58>
 800a970:	42a3      	cmp	r3, r4
 800a972:	d9fa      	bls.n	800a96a <_free_r+0x4e>
 800a974:	6811      	ldr	r1, [r2, #0]
 800a976:	1855      	adds	r5, r2, r1
 800a978:	42a5      	cmp	r5, r4
 800a97a:	d10b      	bne.n	800a994 <_free_r+0x78>
 800a97c:	6824      	ldr	r4, [r4, #0]
 800a97e:	4421      	add	r1, r4
 800a980:	1854      	adds	r4, r2, r1
 800a982:	42a3      	cmp	r3, r4
 800a984:	6011      	str	r1, [r2, #0]
 800a986:	d1dd      	bne.n	800a944 <_free_r+0x28>
 800a988:	681c      	ldr	r4, [r3, #0]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	6053      	str	r3, [r2, #4]
 800a98e:	4421      	add	r1, r4
 800a990:	6011      	str	r1, [r2, #0]
 800a992:	e7d7      	b.n	800a944 <_free_r+0x28>
 800a994:	d902      	bls.n	800a99c <_free_r+0x80>
 800a996:	230c      	movs	r3, #12
 800a998:	6003      	str	r3, [r0, #0]
 800a99a:	e7d3      	b.n	800a944 <_free_r+0x28>
 800a99c:	6825      	ldr	r5, [r4, #0]
 800a99e:	1961      	adds	r1, r4, r5
 800a9a0:	428b      	cmp	r3, r1
 800a9a2:	bf04      	itt	eq
 800a9a4:	6819      	ldreq	r1, [r3, #0]
 800a9a6:	685b      	ldreq	r3, [r3, #4]
 800a9a8:	6063      	str	r3, [r4, #4]
 800a9aa:	bf04      	itt	eq
 800a9ac:	1949      	addeq	r1, r1, r5
 800a9ae:	6021      	streq	r1, [r4, #0]
 800a9b0:	6054      	str	r4, [r2, #4]
 800a9b2:	e7c7      	b.n	800a944 <_free_r+0x28>
 800a9b4:	b003      	add	sp, #12
 800a9b6:	bd30      	pop	{r4, r5, pc}
 800a9b8:	200026b0 	.word	0x200026b0

0800a9bc <_malloc_r>:
 800a9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9be:	1ccd      	adds	r5, r1, #3
 800a9c0:	f025 0503 	bic.w	r5, r5, #3
 800a9c4:	3508      	adds	r5, #8
 800a9c6:	2d0c      	cmp	r5, #12
 800a9c8:	bf38      	it	cc
 800a9ca:	250c      	movcc	r5, #12
 800a9cc:	2d00      	cmp	r5, #0
 800a9ce:	4606      	mov	r6, r0
 800a9d0:	db01      	blt.n	800a9d6 <_malloc_r+0x1a>
 800a9d2:	42a9      	cmp	r1, r5
 800a9d4:	d903      	bls.n	800a9de <_malloc_r+0x22>
 800a9d6:	230c      	movs	r3, #12
 800a9d8:	6033      	str	r3, [r6, #0]
 800a9da:	2000      	movs	r0, #0
 800a9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9de:	f000 fa0f 	bl	800ae00 <__malloc_lock>
 800a9e2:	4921      	ldr	r1, [pc, #132]	; (800aa68 <_malloc_r+0xac>)
 800a9e4:	680a      	ldr	r2, [r1, #0]
 800a9e6:	4614      	mov	r4, r2
 800a9e8:	b99c      	cbnz	r4, 800aa12 <_malloc_r+0x56>
 800a9ea:	4f20      	ldr	r7, [pc, #128]	; (800aa6c <_malloc_r+0xb0>)
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	b923      	cbnz	r3, 800a9fa <_malloc_r+0x3e>
 800a9f0:	4621      	mov	r1, r4
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	f000 f998 	bl	800ad28 <_sbrk_r>
 800a9f8:	6038      	str	r0, [r7, #0]
 800a9fa:	4629      	mov	r1, r5
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	f000 f993 	bl	800ad28 <_sbrk_r>
 800aa02:	1c43      	adds	r3, r0, #1
 800aa04:	d123      	bne.n	800aa4e <_malloc_r+0x92>
 800aa06:	230c      	movs	r3, #12
 800aa08:	6033      	str	r3, [r6, #0]
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	f000 f9fe 	bl	800ae0c <__malloc_unlock>
 800aa10:	e7e3      	b.n	800a9da <_malloc_r+0x1e>
 800aa12:	6823      	ldr	r3, [r4, #0]
 800aa14:	1b5b      	subs	r3, r3, r5
 800aa16:	d417      	bmi.n	800aa48 <_malloc_r+0x8c>
 800aa18:	2b0b      	cmp	r3, #11
 800aa1a:	d903      	bls.n	800aa24 <_malloc_r+0x68>
 800aa1c:	6023      	str	r3, [r4, #0]
 800aa1e:	441c      	add	r4, r3
 800aa20:	6025      	str	r5, [r4, #0]
 800aa22:	e004      	b.n	800aa2e <_malloc_r+0x72>
 800aa24:	6863      	ldr	r3, [r4, #4]
 800aa26:	42a2      	cmp	r2, r4
 800aa28:	bf0c      	ite	eq
 800aa2a:	600b      	streq	r3, [r1, #0]
 800aa2c:	6053      	strne	r3, [r2, #4]
 800aa2e:	4630      	mov	r0, r6
 800aa30:	f000 f9ec 	bl	800ae0c <__malloc_unlock>
 800aa34:	f104 000b 	add.w	r0, r4, #11
 800aa38:	1d23      	adds	r3, r4, #4
 800aa3a:	f020 0007 	bic.w	r0, r0, #7
 800aa3e:	1ac2      	subs	r2, r0, r3
 800aa40:	d0cc      	beq.n	800a9dc <_malloc_r+0x20>
 800aa42:	1a1b      	subs	r3, r3, r0
 800aa44:	50a3      	str	r3, [r4, r2]
 800aa46:	e7c9      	b.n	800a9dc <_malloc_r+0x20>
 800aa48:	4622      	mov	r2, r4
 800aa4a:	6864      	ldr	r4, [r4, #4]
 800aa4c:	e7cc      	b.n	800a9e8 <_malloc_r+0x2c>
 800aa4e:	1cc4      	adds	r4, r0, #3
 800aa50:	f024 0403 	bic.w	r4, r4, #3
 800aa54:	42a0      	cmp	r0, r4
 800aa56:	d0e3      	beq.n	800aa20 <_malloc_r+0x64>
 800aa58:	1a21      	subs	r1, r4, r0
 800aa5a:	4630      	mov	r0, r6
 800aa5c:	f000 f964 	bl	800ad28 <_sbrk_r>
 800aa60:	3001      	adds	r0, #1
 800aa62:	d1dd      	bne.n	800aa20 <_malloc_r+0x64>
 800aa64:	e7cf      	b.n	800aa06 <_malloc_r+0x4a>
 800aa66:	bf00      	nop
 800aa68:	200026b0 	.word	0x200026b0
 800aa6c:	200026b4 	.word	0x200026b4

0800aa70 <__ssputs_r>:
 800aa70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa74:	688e      	ldr	r6, [r1, #8]
 800aa76:	429e      	cmp	r6, r3
 800aa78:	4682      	mov	sl, r0
 800aa7a:	460c      	mov	r4, r1
 800aa7c:	4690      	mov	r8, r2
 800aa7e:	461f      	mov	r7, r3
 800aa80:	d838      	bhi.n	800aaf4 <__ssputs_r+0x84>
 800aa82:	898a      	ldrh	r2, [r1, #12]
 800aa84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa88:	d032      	beq.n	800aaf0 <__ssputs_r+0x80>
 800aa8a:	6825      	ldr	r5, [r4, #0]
 800aa8c:	6909      	ldr	r1, [r1, #16]
 800aa8e:	eba5 0901 	sub.w	r9, r5, r1
 800aa92:	6965      	ldr	r5, [r4, #20]
 800aa94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	444b      	add	r3, r9
 800aaa0:	106d      	asrs	r5, r5, #1
 800aaa2:	429d      	cmp	r5, r3
 800aaa4:	bf38      	it	cc
 800aaa6:	461d      	movcc	r5, r3
 800aaa8:	0553      	lsls	r3, r2, #21
 800aaaa:	d531      	bpl.n	800ab10 <__ssputs_r+0xa0>
 800aaac:	4629      	mov	r1, r5
 800aaae:	f7ff ff85 	bl	800a9bc <_malloc_r>
 800aab2:	4606      	mov	r6, r0
 800aab4:	b950      	cbnz	r0, 800aacc <__ssputs_r+0x5c>
 800aab6:	230c      	movs	r3, #12
 800aab8:	f8ca 3000 	str.w	r3, [sl]
 800aabc:	89a3      	ldrh	r3, [r4, #12]
 800aabe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aac2:	81a3      	strh	r3, [r4, #12]
 800aac4:	f04f 30ff 	mov.w	r0, #4294967295
 800aac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aacc:	6921      	ldr	r1, [r4, #16]
 800aace:	464a      	mov	r2, r9
 800aad0:	f7fe f85e 	bl	8008b90 <memcpy>
 800aad4:	89a3      	ldrh	r3, [r4, #12]
 800aad6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aade:	81a3      	strh	r3, [r4, #12]
 800aae0:	6126      	str	r6, [r4, #16]
 800aae2:	6165      	str	r5, [r4, #20]
 800aae4:	444e      	add	r6, r9
 800aae6:	eba5 0509 	sub.w	r5, r5, r9
 800aaea:	6026      	str	r6, [r4, #0]
 800aaec:	60a5      	str	r5, [r4, #8]
 800aaee:	463e      	mov	r6, r7
 800aaf0:	42be      	cmp	r6, r7
 800aaf2:	d900      	bls.n	800aaf6 <__ssputs_r+0x86>
 800aaf4:	463e      	mov	r6, r7
 800aaf6:	4632      	mov	r2, r6
 800aaf8:	6820      	ldr	r0, [r4, #0]
 800aafa:	4641      	mov	r1, r8
 800aafc:	f000 f966 	bl	800adcc <memmove>
 800ab00:	68a3      	ldr	r3, [r4, #8]
 800ab02:	6822      	ldr	r2, [r4, #0]
 800ab04:	1b9b      	subs	r3, r3, r6
 800ab06:	4432      	add	r2, r6
 800ab08:	60a3      	str	r3, [r4, #8]
 800ab0a:	6022      	str	r2, [r4, #0]
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	e7db      	b.n	800aac8 <__ssputs_r+0x58>
 800ab10:	462a      	mov	r2, r5
 800ab12:	f000 f981 	bl	800ae18 <_realloc_r>
 800ab16:	4606      	mov	r6, r0
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	d1e1      	bne.n	800aae0 <__ssputs_r+0x70>
 800ab1c:	6921      	ldr	r1, [r4, #16]
 800ab1e:	4650      	mov	r0, sl
 800ab20:	f7ff fefc 	bl	800a91c <_free_r>
 800ab24:	e7c7      	b.n	800aab6 <__ssputs_r+0x46>
	...

0800ab28 <_svfiprintf_r>:
 800ab28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2c:	4698      	mov	r8, r3
 800ab2e:	898b      	ldrh	r3, [r1, #12]
 800ab30:	061b      	lsls	r3, r3, #24
 800ab32:	b09d      	sub	sp, #116	; 0x74
 800ab34:	4607      	mov	r7, r0
 800ab36:	460d      	mov	r5, r1
 800ab38:	4614      	mov	r4, r2
 800ab3a:	d50e      	bpl.n	800ab5a <_svfiprintf_r+0x32>
 800ab3c:	690b      	ldr	r3, [r1, #16]
 800ab3e:	b963      	cbnz	r3, 800ab5a <_svfiprintf_r+0x32>
 800ab40:	2140      	movs	r1, #64	; 0x40
 800ab42:	f7ff ff3b 	bl	800a9bc <_malloc_r>
 800ab46:	6028      	str	r0, [r5, #0]
 800ab48:	6128      	str	r0, [r5, #16]
 800ab4a:	b920      	cbnz	r0, 800ab56 <_svfiprintf_r+0x2e>
 800ab4c:	230c      	movs	r3, #12
 800ab4e:	603b      	str	r3, [r7, #0]
 800ab50:	f04f 30ff 	mov.w	r0, #4294967295
 800ab54:	e0d1      	b.n	800acfa <_svfiprintf_r+0x1d2>
 800ab56:	2340      	movs	r3, #64	; 0x40
 800ab58:	616b      	str	r3, [r5, #20]
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ab5e:	2320      	movs	r3, #32
 800ab60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab64:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab68:	2330      	movs	r3, #48	; 0x30
 800ab6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ad14 <_svfiprintf_r+0x1ec>
 800ab6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab72:	f04f 0901 	mov.w	r9, #1
 800ab76:	4623      	mov	r3, r4
 800ab78:	469a      	mov	sl, r3
 800ab7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab7e:	b10a      	cbz	r2, 800ab84 <_svfiprintf_r+0x5c>
 800ab80:	2a25      	cmp	r2, #37	; 0x25
 800ab82:	d1f9      	bne.n	800ab78 <_svfiprintf_r+0x50>
 800ab84:	ebba 0b04 	subs.w	fp, sl, r4
 800ab88:	d00b      	beq.n	800aba2 <_svfiprintf_r+0x7a>
 800ab8a:	465b      	mov	r3, fp
 800ab8c:	4622      	mov	r2, r4
 800ab8e:	4629      	mov	r1, r5
 800ab90:	4638      	mov	r0, r7
 800ab92:	f7ff ff6d 	bl	800aa70 <__ssputs_r>
 800ab96:	3001      	adds	r0, #1
 800ab98:	f000 80aa 	beq.w	800acf0 <_svfiprintf_r+0x1c8>
 800ab9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab9e:	445a      	add	r2, fp
 800aba0:	9209      	str	r2, [sp, #36]	; 0x24
 800aba2:	f89a 3000 	ldrb.w	r3, [sl]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	f000 80a2 	beq.w	800acf0 <_svfiprintf_r+0x1c8>
 800abac:	2300      	movs	r3, #0
 800abae:	f04f 32ff 	mov.w	r2, #4294967295
 800abb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abb6:	f10a 0a01 	add.w	sl, sl, #1
 800abba:	9304      	str	r3, [sp, #16]
 800abbc:	9307      	str	r3, [sp, #28]
 800abbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abc2:	931a      	str	r3, [sp, #104]	; 0x68
 800abc4:	4654      	mov	r4, sl
 800abc6:	2205      	movs	r2, #5
 800abc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abcc:	4851      	ldr	r0, [pc, #324]	; (800ad14 <_svfiprintf_r+0x1ec>)
 800abce:	f7f5 fb0f 	bl	80001f0 <memchr>
 800abd2:	9a04      	ldr	r2, [sp, #16]
 800abd4:	b9d8      	cbnz	r0, 800ac0e <_svfiprintf_r+0xe6>
 800abd6:	06d0      	lsls	r0, r2, #27
 800abd8:	bf44      	itt	mi
 800abda:	2320      	movmi	r3, #32
 800abdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abe0:	0711      	lsls	r1, r2, #28
 800abe2:	bf44      	itt	mi
 800abe4:	232b      	movmi	r3, #43	; 0x2b
 800abe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abea:	f89a 3000 	ldrb.w	r3, [sl]
 800abee:	2b2a      	cmp	r3, #42	; 0x2a
 800abf0:	d015      	beq.n	800ac1e <_svfiprintf_r+0xf6>
 800abf2:	9a07      	ldr	r2, [sp, #28]
 800abf4:	4654      	mov	r4, sl
 800abf6:	2000      	movs	r0, #0
 800abf8:	f04f 0c0a 	mov.w	ip, #10
 800abfc:	4621      	mov	r1, r4
 800abfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac02:	3b30      	subs	r3, #48	; 0x30
 800ac04:	2b09      	cmp	r3, #9
 800ac06:	d94e      	bls.n	800aca6 <_svfiprintf_r+0x17e>
 800ac08:	b1b0      	cbz	r0, 800ac38 <_svfiprintf_r+0x110>
 800ac0a:	9207      	str	r2, [sp, #28]
 800ac0c:	e014      	b.n	800ac38 <_svfiprintf_r+0x110>
 800ac0e:	eba0 0308 	sub.w	r3, r0, r8
 800ac12:	fa09 f303 	lsl.w	r3, r9, r3
 800ac16:	4313      	orrs	r3, r2
 800ac18:	9304      	str	r3, [sp, #16]
 800ac1a:	46a2      	mov	sl, r4
 800ac1c:	e7d2      	b.n	800abc4 <_svfiprintf_r+0x9c>
 800ac1e:	9b03      	ldr	r3, [sp, #12]
 800ac20:	1d19      	adds	r1, r3, #4
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	9103      	str	r1, [sp, #12]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	bfbb      	ittet	lt
 800ac2a:	425b      	neglt	r3, r3
 800ac2c:	f042 0202 	orrlt.w	r2, r2, #2
 800ac30:	9307      	strge	r3, [sp, #28]
 800ac32:	9307      	strlt	r3, [sp, #28]
 800ac34:	bfb8      	it	lt
 800ac36:	9204      	strlt	r2, [sp, #16]
 800ac38:	7823      	ldrb	r3, [r4, #0]
 800ac3a:	2b2e      	cmp	r3, #46	; 0x2e
 800ac3c:	d10c      	bne.n	800ac58 <_svfiprintf_r+0x130>
 800ac3e:	7863      	ldrb	r3, [r4, #1]
 800ac40:	2b2a      	cmp	r3, #42	; 0x2a
 800ac42:	d135      	bne.n	800acb0 <_svfiprintf_r+0x188>
 800ac44:	9b03      	ldr	r3, [sp, #12]
 800ac46:	1d1a      	adds	r2, r3, #4
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	9203      	str	r2, [sp, #12]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	bfb8      	it	lt
 800ac50:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac54:	3402      	adds	r4, #2
 800ac56:	9305      	str	r3, [sp, #20]
 800ac58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ad24 <_svfiprintf_r+0x1fc>
 800ac5c:	7821      	ldrb	r1, [r4, #0]
 800ac5e:	2203      	movs	r2, #3
 800ac60:	4650      	mov	r0, sl
 800ac62:	f7f5 fac5 	bl	80001f0 <memchr>
 800ac66:	b140      	cbz	r0, 800ac7a <_svfiprintf_r+0x152>
 800ac68:	2340      	movs	r3, #64	; 0x40
 800ac6a:	eba0 000a 	sub.w	r0, r0, sl
 800ac6e:	fa03 f000 	lsl.w	r0, r3, r0
 800ac72:	9b04      	ldr	r3, [sp, #16]
 800ac74:	4303      	orrs	r3, r0
 800ac76:	3401      	adds	r4, #1
 800ac78:	9304      	str	r3, [sp, #16]
 800ac7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac7e:	4826      	ldr	r0, [pc, #152]	; (800ad18 <_svfiprintf_r+0x1f0>)
 800ac80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac84:	2206      	movs	r2, #6
 800ac86:	f7f5 fab3 	bl	80001f0 <memchr>
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	d038      	beq.n	800ad00 <_svfiprintf_r+0x1d8>
 800ac8e:	4b23      	ldr	r3, [pc, #140]	; (800ad1c <_svfiprintf_r+0x1f4>)
 800ac90:	bb1b      	cbnz	r3, 800acda <_svfiprintf_r+0x1b2>
 800ac92:	9b03      	ldr	r3, [sp, #12]
 800ac94:	3307      	adds	r3, #7
 800ac96:	f023 0307 	bic.w	r3, r3, #7
 800ac9a:	3308      	adds	r3, #8
 800ac9c:	9303      	str	r3, [sp, #12]
 800ac9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aca0:	4433      	add	r3, r6
 800aca2:	9309      	str	r3, [sp, #36]	; 0x24
 800aca4:	e767      	b.n	800ab76 <_svfiprintf_r+0x4e>
 800aca6:	fb0c 3202 	mla	r2, ip, r2, r3
 800acaa:	460c      	mov	r4, r1
 800acac:	2001      	movs	r0, #1
 800acae:	e7a5      	b.n	800abfc <_svfiprintf_r+0xd4>
 800acb0:	2300      	movs	r3, #0
 800acb2:	3401      	adds	r4, #1
 800acb4:	9305      	str	r3, [sp, #20]
 800acb6:	4619      	mov	r1, r3
 800acb8:	f04f 0c0a 	mov.w	ip, #10
 800acbc:	4620      	mov	r0, r4
 800acbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acc2:	3a30      	subs	r2, #48	; 0x30
 800acc4:	2a09      	cmp	r2, #9
 800acc6:	d903      	bls.n	800acd0 <_svfiprintf_r+0x1a8>
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d0c5      	beq.n	800ac58 <_svfiprintf_r+0x130>
 800accc:	9105      	str	r1, [sp, #20]
 800acce:	e7c3      	b.n	800ac58 <_svfiprintf_r+0x130>
 800acd0:	fb0c 2101 	mla	r1, ip, r1, r2
 800acd4:	4604      	mov	r4, r0
 800acd6:	2301      	movs	r3, #1
 800acd8:	e7f0      	b.n	800acbc <_svfiprintf_r+0x194>
 800acda:	ab03      	add	r3, sp, #12
 800acdc:	9300      	str	r3, [sp, #0]
 800acde:	462a      	mov	r2, r5
 800ace0:	4b0f      	ldr	r3, [pc, #60]	; (800ad20 <_svfiprintf_r+0x1f8>)
 800ace2:	a904      	add	r1, sp, #16
 800ace4:	4638      	mov	r0, r7
 800ace6:	f7fe f809 	bl	8008cfc <_printf_float>
 800acea:	1c42      	adds	r2, r0, #1
 800acec:	4606      	mov	r6, r0
 800acee:	d1d6      	bne.n	800ac9e <_svfiprintf_r+0x176>
 800acf0:	89ab      	ldrh	r3, [r5, #12]
 800acf2:	065b      	lsls	r3, r3, #25
 800acf4:	f53f af2c 	bmi.w	800ab50 <_svfiprintf_r+0x28>
 800acf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acfa:	b01d      	add	sp, #116	; 0x74
 800acfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad00:	ab03      	add	r3, sp, #12
 800ad02:	9300      	str	r3, [sp, #0]
 800ad04:	462a      	mov	r2, r5
 800ad06:	4b06      	ldr	r3, [pc, #24]	; (800ad20 <_svfiprintf_r+0x1f8>)
 800ad08:	a904      	add	r1, sp, #16
 800ad0a:	4638      	mov	r0, r7
 800ad0c:	f7fe fa9a 	bl	8009244 <_printf_i>
 800ad10:	e7eb      	b.n	800acea <_svfiprintf_r+0x1c2>
 800ad12:	bf00      	nop
 800ad14:	0800bd6c 	.word	0x0800bd6c
 800ad18:	0800bd76 	.word	0x0800bd76
 800ad1c:	08008cfd 	.word	0x08008cfd
 800ad20:	0800aa71 	.word	0x0800aa71
 800ad24:	0800bd72 	.word	0x0800bd72

0800ad28 <_sbrk_r>:
 800ad28:	b538      	push	{r3, r4, r5, lr}
 800ad2a:	4d06      	ldr	r5, [pc, #24]	; (800ad44 <_sbrk_r+0x1c>)
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	4604      	mov	r4, r0
 800ad30:	4608      	mov	r0, r1
 800ad32:	602b      	str	r3, [r5, #0]
 800ad34:	f7f6 fb64 	bl	8001400 <_sbrk>
 800ad38:	1c43      	adds	r3, r0, #1
 800ad3a:	d102      	bne.n	800ad42 <_sbrk_r+0x1a>
 800ad3c:	682b      	ldr	r3, [r5, #0]
 800ad3e:	b103      	cbz	r3, 800ad42 <_sbrk_r+0x1a>
 800ad40:	6023      	str	r3, [r4, #0]
 800ad42:	bd38      	pop	{r3, r4, r5, pc}
 800ad44:	200027f0 	.word	0x200027f0

0800ad48 <__assert_func>:
 800ad48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad4a:	4614      	mov	r4, r2
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	4b09      	ldr	r3, [pc, #36]	; (800ad74 <__assert_func+0x2c>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4605      	mov	r5, r0
 800ad54:	68d8      	ldr	r0, [r3, #12]
 800ad56:	b14c      	cbz	r4, 800ad6c <__assert_func+0x24>
 800ad58:	4b07      	ldr	r3, [pc, #28]	; (800ad78 <__assert_func+0x30>)
 800ad5a:	9100      	str	r1, [sp, #0]
 800ad5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad60:	4906      	ldr	r1, [pc, #24]	; (800ad7c <__assert_func+0x34>)
 800ad62:	462b      	mov	r3, r5
 800ad64:	f000 f80e 	bl	800ad84 <fiprintf>
 800ad68:	f000 faa4 	bl	800b2b4 <abort>
 800ad6c:	4b04      	ldr	r3, [pc, #16]	; (800ad80 <__assert_func+0x38>)
 800ad6e:	461c      	mov	r4, r3
 800ad70:	e7f3      	b.n	800ad5a <__assert_func+0x12>
 800ad72:	bf00      	nop
 800ad74:	20000030 	.word	0x20000030
 800ad78:	0800bd7d 	.word	0x0800bd7d
 800ad7c:	0800bd8a 	.word	0x0800bd8a
 800ad80:	0800bdb8 	.word	0x0800bdb8

0800ad84 <fiprintf>:
 800ad84:	b40e      	push	{r1, r2, r3}
 800ad86:	b503      	push	{r0, r1, lr}
 800ad88:	4601      	mov	r1, r0
 800ad8a:	ab03      	add	r3, sp, #12
 800ad8c:	4805      	ldr	r0, [pc, #20]	; (800ada4 <fiprintf+0x20>)
 800ad8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad92:	6800      	ldr	r0, [r0, #0]
 800ad94:	9301      	str	r3, [sp, #4]
 800ad96:	f000 f88f 	bl	800aeb8 <_vfiprintf_r>
 800ad9a:	b002      	add	sp, #8
 800ad9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ada0:	b003      	add	sp, #12
 800ada2:	4770      	bx	lr
 800ada4:	20000030 	.word	0x20000030

0800ada8 <__ascii_mbtowc>:
 800ada8:	b082      	sub	sp, #8
 800adaa:	b901      	cbnz	r1, 800adae <__ascii_mbtowc+0x6>
 800adac:	a901      	add	r1, sp, #4
 800adae:	b142      	cbz	r2, 800adc2 <__ascii_mbtowc+0x1a>
 800adb0:	b14b      	cbz	r3, 800adc6 <__ascii_mbtowc+0x1e>
 800adb2:	7813      	ldrb	r3, [r2, #0]
 800adb4:	600b      	str	r3, [r1, #0]
 800adb6:	7812      	ldrb	r2, [r2, #0]
 800adb8:	1e10      	subs	r0, r2, #0
 800adba:	bf18      	it	ne
 800adbc:	2001      	movne	r0, #1
 800adbe:	b002      	add	sp, #8
 800adc0:	4770      	bx	lr
 800adc2:	4610      	mov	r0, r2
 800adc4:	e7fb      	b.n	800adbe <__ascii_mbtowc+0x16>
 800adc6:	f06f 0001 	mvn.w	r0, #1
 800adca:	e7f8      	b.n	800adbe <__ascii_mbtowc+0x16>

0800adcc <memmove>:
 800adcc:	4288      	cmp	r0, r1
 800adce:	b510      	push	{r4, lr}
 800add0:	eb01 0402 	add.w	r4, r1, r2
 800add4:	d902      	bls.n	800addc <memmove+0x10>
 800add6:	4284      	cmp	r4, r0
 800add8:	4623      	mov	r3, r4
 800adda:	d807      	bhi.n	800adec <memmove+0x20>
 800addc:	1e43      	subs	r3, r0, #1
 800adde:	42a1      	cmp	r1, r4
 800ade0:	d008      	beq.n	800adf4 <memmove+0x28>
 800ade2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ade6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adea:	e7f8      	b.n	800adde <memmove+0x12>
 800adec:	4402      	add	r2, r0
 800adee:	4601      	mov	r1, r0
 800adf0:	428a      	cmp	r2, r1
 800adf2:	d100      	bne.n	800adf6 <memmove+0x2a>
 800adf4:	bd10      	pop	{r4, pc}
 800adf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800adfe:	e7f7      	b.n	800adf0 <memmove+0x24>

0800ae00 <__malloc_lock>:
 800ae00:	4801      	ldr	r0, [pc, #4]	; (800ae08 <__malloc_lock+0x8>)
 800ae02:	f000 bc17 	b.w	800b634 <__retarget_lock_acquire_recursive>
 800ae06:	bf00      	nop
 800ae08:	200027f8 	.word	0x200027f8

0800ae0c <__malloc_unlock>:
 800ae0c:	4801      	ldr	r0, [pc, #4]	; (800ae14 <__malloc_unlock+0x8>)
 800ae0e:	f000 bc12 	b.w	800b636 <__retarget_lock_release_recursive>
 800ae12:	bf00      	nop
 800ae14:	200027f8 	.word	0x200027f8

0800ae18 <_realloc_r>:
 800ae18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae1a:	4607      	mov	r7, r0
 800ae1c:	4614      	mov	r4, r2
 800ae1e:	460e      	mov	r6, r1
 800ae20:	b921      	cbnz	r1, 800ae2c <_realloc_r+0x14>
 800ae22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ae26:	4611      	mov	r1, r2
 800ae28:	f7ff bdc8 	b.w	800a9bc <_malloc_r>
 800ae2c:	b922      	cbnz	r2, 800ae38 <_realloc_r+0x20>
 800ae2e:	f7ff fd75 	bl	800a91c <_free_r>
 800ae32:	4625      	mov	r5, r4
 800ae34:	4628      	mov	r0, r5
 800ae36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae38:	f000 fc62 	bl	800b700 <_malloc_usable_size_r>
 800ae3c:	42a0      	cmp	r0, r4
 800ae3e:	d20f      	bcs.n	800ae60 <_realloc_r+0x48>
 800ae40:	4621      	mov	r1, r4
 800ae42:	4638      	mov	r0, r7
 800ae44:	f7ff fdba 	bl	800a9bc <_malloc_r>
 800ae48:	4605      	mov	r5, r0
 800ae4a:	2800      	cmp	r0, #0
 800ae4c:	d0f2      	beq.n	800ae34 <_realloc_r+0x1c>
 800ae4e:	4631      	mov	r1, r6
 800ae50:	4622      	mov	r2, r4
 800ae52:	f7fd fe9d 	bl	8008b90 <memcpy>
 800ae56:	4631      	mov	r1, r6
 800ae58:	4638      	mov	r0, r7
 800ae5a:	f7ff fd5f 	bl	800a91c <_free_r>
 800ae5e:	e7e9      	b.n	800ae34 <_realloc_r+0x1c>
 800ae60:	4635      	mov	r5, r6
 800ae62:	e7e7      	b.n	800ae34 <_realloc_r+0x1c>

0800ae64 <__sfputc_r>:
 800ae64:	6893      	ldr	r3, [r2, #8]
 800ae66:	3b01      	subs	r3, #1
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	b410      	push	{r4}
 800ae6c:	6093      	str	r3, [r2, #8]
 800ae6e:	da08      	bge.n	800ae82 <__sfputc_r+0x1e>
 800ae70:	6994      	ldr	r4, [r2, #24]
 800ae72:	42a3      	cmp	r3, r4
 800ae74:	db01      	blt.n	800ae7a <__sfputc_r+0x16>
 800ae76:	290a      	cmp	r1, #10
 800ae78:	d103      	bne.n	800ae82 <__sfputc_r+0x1e>
 800ae7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae7e:	f000 b94b 	b.w	800b118 <__swbuf_r>
 800ae82:	6813      	ldr	r3, [r2, #0]
 800ae84:	1c58      	adds	r0, r3, #1
 800ae86:	6010      	str	r0, [r2, #0]
 800ae88:	7019      	strb	r1, [r3, #0]
 800ae8a:	4608      	mov	r0, r1
 800ae8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae90:	4770      	bx	lr

0800ae92 <__sfputs_r>:
 800ae92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae94:	4606      	mov	r6, r0
 800ae96:	460f      	mov	r7, r1
 800ae98:	4614      	mov	r4, r2
 800ae9a:	18d5      	adds	r5, r2, r3
 800ae9c:	42ac      	cmp	r4, r5
 800ae9e:	d101      	bne.n	800aea4 <__sfputs_r+0x12>
 800aea0:	2000      	movs	r0, #0
 800aea2:	e007      	b.n	800aeb4 <__sfputs_r+0x22>
 800aea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aea8:	463a      	mov	r2, r7
 800aeaa:	4630      	mov	r0, r6
 800aeac:	f7ff ffda 	bl	800ae64 <__sfputc_r>
 800aeb0:	1c43      	adds	r3, r0, #1
 800aeb2:	d1f3      	bne.n	800ae9c <__sfputs_r+0xa>
 800aeb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aeb8 <_vfiprintf_r>:
 800aeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aebc:	460d      	mov	r5, r1
 800aebe:	b09d      	sub	sp, #116	; 0x74
 800aec0:	4614      	mov	r4, r2
 800aec2:	4698      	mov	r8, r3
 800aec4:	4606      	mov	r6, r0
 800aec6:	b118      	cbz	r0, 800aed0 <_vfiprintf_r+0x18>
 800aec8:	6983      	ldr	r3, [r0, #24]
 800aeca:	b90b      	cbnz	r3, 800aed0 <_vfiprintf_r+0x18>
 800aecc:	f000 fb14 	bl	800b4f8 <__sinit>
 800aed0:	4b89      	ldr	r3, [pc, #548]	; (800b0f8 <_vfiprintf_r+0x240>)
 800aed2:	429d      	cmp	r5, r3
 800aed4:	d11b      	bne.n	800af0e <_vfiprintf_r+0x56>
 800aed6:	6875      	ldr	r5, [r6, #4]
 800aed8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aeda:	07d9      	lsls	r1, r3, #31
 800aedc:	d405      	bmi.n	800aeea <_vfiprintf_r+0x32>
 800aede:	89ab      	ldrh	r3, [r5, #12]
 800aee0:	059a      	lsls	r2, r3, #22
 800aee2:	d402      	bmi.n	800aeea <_vfiprintf_r+0x32>
 800aee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aee6:	f000 fba5 	bl	800b634 <__retarget_lock_acquire_recursive>
 800aeea:	89ab      	ldrh	r3, [r5, #12]
 800aeec:	071b      	lsls	r3, r3, #28
 800aeee:	d501      	bpl.n	800aef4 <_vfiprintf_r+0x3c>
 800aef0:	692b      	ldr	r3, [r5, #16]
 800aef2:	b9eb      	cbnz	r3, 800af30 <_vfiprintf_r+0x78>
 800aef4:	4629      	mov	r1, r5
 800aef6:	4630      	mov	r0, r6
 800aef8:	f000 f96e 	bl	800b1d8 <__swsetup_r>
 800aefc:	b1c0      	cbz	r0, 800af30 <_vfiprintf_r+0x78>
 800aefe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af00:	07dc      	lsls	r4, r3, #31
 800af02:	d50e      	bpl.n	800af22 <_vfiprintf_r+0x6a>
 800af04:	f04f 30ff 	mov.w	r0, #4294967295
 800af08:	b01d      	add	sp, #116	; 0x74
 800af0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af0e:	4b7b      	ldr	r3, [pc, #492]	; (800b0fc <_vfiprintf_r+0x244>)
 800af10:	429d      	cmp	r5, r3
 800af12:	d101      	bne.n	800af18 <_vfiprintf_r+0x60>
 800af14:	68b5      	ldr	r5, [r6, #8]
 800af16:	e7df      	b.n	800aed8 <_vfiprintf_r+0x20>
 800af18:	4b79      	ldr	r3, [pc, #484]	; (800b100 <_vfiprintf_r+0x248>)
 800af1a:	429d      	cmp	r5, r3
 800af1c:	bf08      	it	eq
 800af1e:	68f5      	ldreq	r5, [r6, #12]
 800af20:	e7da      	b.n	800aed8 <_vfiprintf_r+0x20>
 800af22:	89ab      	ldrh	r3, [r5, #12]
 800af24:	0598      	lsls	r0, r3, #22
 800af26:	d4ed      	bmi.n	800af04 <_vfiprintf_r+0x4c>
 800af28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af2a:	f000 fb84 	bl	800b636 <__retarget_lock_release_recursive>
 800af2e:	e7e9      	b.n	800af04 <_vfiprintf_r+0x4c>
 800af30:	2300      	movs	r3, #0
 800af32:	9309      	str	r3, [sp, #36]	; 0x24
 800af34:	2320      	movs	r3, #32
 800af36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af3a:	f8cd 800c 	str.w	r8, [sp, #12]
 800af3e:	2330      	movs	r3, #48	; 0x30
 800af40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b104 <_vfiprintf_r+0x24c>
 800af44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af48:	f04f 0901 	mov.w	r9, #1
 800af4c:	4623      	mov	r3, r4
 800af4e:	469a      	mov	sl, r3
 800af50:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af54:	b10a      	cbz	r2, 800af5a <_vfiprintf_r+0xa2>
 800af56:	2a25      	cmp	r2, #37	; 0x25
 800af58:	d1f9      	bne.n	800af4e <_vfiprintf_r+0x96>
 800af5a:	ebba 0b04 	subs.w	fp, sl, r4
 800af5e:	d00b      	beq.n	800af78 <_vfiprintf_r+0xc0>
 800af60:	465b      	mov	r3, fp
 800af62:	4622      	mov	r2, r4
 800af64:	4629      	mov	r1, r5
 800af66:	4630      	mov	r0, r6
 800af68:	f7ff ff93 	bl	800ae92 <__sfputs_r>
 800af6c:	3001      	adds	r0, #1
 800af6e:	f000 80aa 	beq.w	800b0c6 <_vfiprintf_r+0x20e>
 800af72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af74:	445a      	add	r2, fp
 800af76:	9209      	str	r2, [sp, #36]	; 0x24
 800af78:	f89a 3000 	ldrb.w	r3, [sl]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	f000 80a2 	beq.w	800b0c6 <_vfiprintf_r+0x20e>
 800af82:	2300      	movs	r3, #0
 800af84:	f04f 32ff 	mov.w	r2, #4294967295
 800af88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af8c:	f10a 0a01 	add.w	sl, sl, #1
 800af90:	9304      	str	r3, [sp, #16]
 800af92:	9307      	str	r3, [sp, #28]
 800af94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af98:	931a      	str	r3, [sp, #104]	; 0x68
 800af9a:	4654      	mov	r4, sl
 800af9c:	2205      	movs	r2, #5
 800af9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afa2:	4858      	ldr	r0, [pc, #352]	; (800b104 <_vfiprintf_r+0x24c>)
 800afa4:	f7f5 f924 	bl	80001f0 <memchr>
 800afa8:	9a04      	ldr	r2, [sp, #16]
 800afaa:	b9d8      	cbnz	r0, 800afe4 <_vfiprintf_r+0x12c>
 800afac:	06d1      	lsls	r1, r2, #27
 800afae:	bf44      	itt	mi
 800afb0:	2320      	movmi	r3, #32
 800afb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afb6:	0713      	lsls	r3, r2, #28
 800afb8:	bf44      	itt	mi
 800afba:	232b      	movmi	r3, #43	; 0x2b
 800afbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afc0:	f89a 3000 	ldrb.w	r3, [sl]
 800afc4:	2b2a      	cmp	r3, #42	; 0x2a
 800afc6:	d015      	beq.n	800aff4 <_vfiprintf_r+0x13c>
 800afc8:	9a07      	ldr	r2, [sp, #28]
 800afca:	4654      	mov	r4, sl
 800afcc:	2000      	movs	r0, #0
 800afce:	f04f 0c0a 	mov.w	ip, #10
 800afd2:	4621      	mov	r1, r4
 800afd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afd8:	3b30      	subs	r3, #48	; 0x30
 800afda:	2b09      	cmp	r3, #9
 800afdc:	d94e      	bls.n	800b07c <_vfiprintf_r+0x1c4>
 800afde:	b1b0      	cbz	r0, 800b00e <_vfiprintf_r+0x156>
 800afe0:	9207      	str	r2, [sp, #28]
 800afe2:	e014      	b.n	800b00e <_vfiprintf_r+0x156>
 800afe4:	eba0 0308 	sub.w	r3, r0, r8
 800afe8:	fa09 f303 	lsl.w	r3, r9, r3
 800afec:	4313      	orrs	r3, r2
 800afee:	9304      	str	r3, [sp, #16]
 800aff0:	46a2      	mov	sl, r4
 800aff2:	e7d2      	b.n	800af9a <_vfiprintf_r+0xe2>
 800aff4:	9b03      	ldr	r3, [sp, #12]
 800aff6:	1d19      	adds	r1, r3, #4
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	9103      	str	r1, [sp, #12]
 800affc:	2b00      	cmp	r3, #0
 800affe:	bfbb      	ittet	lt
 800b000:	425b      	neglt	r3, r3
 800b002:	f042 0202 	orrlt.w	r2, r2, #2
 800b006:	9307      	strge	r3, [sp, #28]
 800b008:	9307      	strlt	r3, [sp, #28]
 800b00a:	bfb8      	it	lt
 800b00c:	9204      	strlt	r2, [sp, #16]
 800b00e:	7823      	ldrb	r3, [r4, #0]
 800b010:	2b2e      	cmp	r3, #46	; 0x2e
 800b012:	d10c      	bne.n	800b02e <_vfiprintf_r+0x176>
 800b014:	7863      	ldrb	r3, [r4, #1]
 800b016:	2b2a      	cmp	r3, #42	; 0x2a
 800b018:	d135      	bne.n	800b086 <_vfiprintf_r+0x1ce>
 800b01a:	9b03      	ldr	r3, [sp, #12]
 800b01c:	1d1a      	adds	r2, r3, #4
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	9203      	str	r2, [sp, #12]
 800b022:	2b00      	cmp	r3, #0
 800b024:	bfb8      	it	lt
 800b026:	f04f 33ff 	movlt.w	r3, #4294967295
 800b02a:	3402      	adds	r4, #2
 800b02c:	9305      	str	r3, [sp, #20]
 800b02e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b114 <_vfiprintf_r+0x25c>
 800b032:	7821      	ldrb	r1, [r4, #0]
 800b034:	2203      	movs	r2, #3
 800b036:	4650      	mov	r0, sl
 800b038:	f7f5 f8da 	bl	80001f0 <memchr>
 800b03c:	b140      	cbz	r0, 800b050 <_vfiprintf_r+0x198>
 800b03e:	2340      	movs	r3, #64	; 0x40
 800b040:	eba0 000a 	sub.w	r0, r0, sl
 800b044:	fa03 f000 	lsl.w	r0, r3, r0
 800b048:	9b04      	ldr	r3, [sp, #16]
 800b04a:	4303      	orrs	r3, r0
 800b04c:	3401      	adds	r4, #1
 800b04e:	9304      	str	r3, [sp, #16]
 800b050:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b054:	482c      	ldr	r0, [pc, #176]	; (800b108 <_vfiprintf_r+0x250>)
 800b056:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b05a:	2206      	movs	r2, #6
 800b05c:	f7f5 f8c8 	bl	80001f0 <memchr>
 800b060:	2800      	cmp	r0, #0
 800b062:	d03f      	beq.n	800b0e4 <_vfiprintf_r+0x22c>
 800b064:	4b29      	ldr	r3, [pc, #164]	; (800b10c <_vfiprintf_r+0x254>)
 800b066:	bb1b      	cbnz	r3, 800b0b0 <_vfiprintf_r+0x1f8>
 800b068:	9b03      	ldr	r3, [sp, #12]
 800b06a:	3307      	adds	r3, #7
 800b06c:	f023 0307 	bic.w	r3, r3, #7
 800b070:	3308      	adds	r3, #8
 800b072:	9303      	str	r3, [sp, #12]
 800b074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b076:	443b      	add	r3, r7
 800b078:	9309      	str	r3, [sp, #36]	; 0x24
 800b07a:	e767      	b.n	800af4c <_vfiprintf_r+0x94>
 800b07c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b080:	460c      	mov	r4, r1
 800b082:	2001      	movs	r0, #1
 800b084:	e7a5      	b.n	800afd2 <_vfiprintf_r+0x11a>
 800b086:	2300      	movs	r3, #0
 800b088:	3401      	adds	r4, #1
 800b08a:	9305      	str	r3, [sp, #20]
 800b08c:	4619      	mov	r1, r3
 800b08e:	f04f 0c0a 	mov.w	ip, #10
 800b092:	4620      	mov	r0, r4
 800b094:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b098:	3a30      	subs	r2, #48	; 0x30
 800b09a:	2a09      	cmp	r2, #9
 800b09c:	d903      	bls.n	800b0a6 <_vfiprintf_r+0x1ee>
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d0c5      	beq.n	800b02e <_vfiprintf_r+0x176>
 800b0a2:	9105      	str	r1, [sp, #20]
 800b0a4:	e7c3      	b.n	800b02e <_vfiprintf_r+0x176>
 800b0a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0aa:	4604      	mov	r4, r0
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e7f0      	b.n	800b092 <_vfiprintf_r+0x1da>
 800b0b0:	ab03      	add	r3, sp, #12
 800b0b2:	9300      	str	r3, [sp, #0]
 800b0b4:	462a      	mov	r2, r5
 800b0b6:	4b16      	ldr	r3, [pc, #88]	; (800b110 <_vfiprintf_r+0x258>)
 800b0b8:	a904      	add	r1, sp, #16
 800b0ba:	4630      	mov	r0, r6
 800b0bc:	f7fd fe1e 	bl	8008cfc <_printf_float>
 800b0c0:	4607      	mov	r7, r0
 800b0c2:	1c78      	adds	r0, r7, #1
 800b0c4:	d1d6      	bne.n	800b074 <_vfiprintf_r+0x1bc>
 800b0c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0c8:	07d9      	lsls	r1, r3, #31
 800b0ca:	d405      	bmi.n	800b0d8 <_vfiprintf_r+0x220>
 800b0cc:	89ab      	ldrh	r3, [r5, #12]
 800b0ce:	059a      	lsls	r2, r3, #22
 800b0d0:	d402      	bmi.n	800b0d8 <_vfiprintf_r+0x220>
 800b0d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0d4:	f000 faaf 	bl	800b636 <__retarget_lock_release_recursive>
 800b0d8:	89ab      	ldrh	r3, [r5, #12]
 800b0da:	065b      	lsls	r3, r3, #25
 800b0dc:	f53f af12 	bmi.w	800af04 <_vfiprintf_r+0x4c>
 800b0e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0e2:	e711      	b.n	800af08 <_vfiprintf_r+0x50>
 800b0e4:	ab03      	add	r3, sp, #12
 800b0e6:	9300      	str	r3, [sp, #0]
 800b0e8:	462a      	mov	r2, r5
 800b0ea:	4b09      	ldr	r3, [pc, #36]	; (800b110 <_vfiprintf_r+0x258>)
 800b0ec:	a904      	add	r1, sp, #16
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	f7fe f8a8 	bl	8009244 <_printf_i>
 800b0f4:	e7e4      	b.n	800b0c0 <_vfiprintf_r+0x208>
 800b0f6:	bf00      	nop
 800b0f8:	0800bee4 	.word	0x0800bee4
 800b0fc:	0800bf04 	.word	0x0800bf04
 800b100:	0800bec4 	.word	0x0800bec4
 800b104:	0800bd6c 	.word	0x0800bd6c
 800b108:	0800bd76 	.word	0x0800bd76
 800b10c:	08008cfd 	.word	0x08008cfd
 800b110:	0800ae93 	.word	0x0800ae93
 800b114:	0800bd72 	.word	0x0800bd72

0800b118 <__swbuf_r>:
 800b118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11a:	460e      	mov	r6, r1
 800b11c:	4614      	mov	r4, r2
 800b11e:	4605      	mov	r5, r0
 800b120:	b118      	cbz	r0, 800b12a <__swbuf_r+0x12>
 800b122:	6983      	ldr	r3, [r0, #24]
 800b124:	b90b      	cbnz	r3, 800b12a <__swbuf_r+0x12>
 800b126:	f000 f9e7 	bl	800b4f8 <__sinit>
 800b12a:	4b21      	ldr	r3, [pc, #132]	; (800b1b0 <__swbuf_r+0x98>)
 800b12c:	429c      	cmp	r4, r3
 800b12e:	d12b      	bne.n	800b188 <__swbuf_r+0x70>
 800b130:	686c      	ldr	r4, [r5, #4]
 800b132:	69a3      	ldr	r3, [r4, #24]
 800b134:	60a3      	str	r3, [r4, #8]
 800b136:	89a3      	ldrh	r3, [r4, #12]
 800b138:	071a      	lsls	r2, r3, #28
 800b13a:	d52f      	bpl.n	800b19c <__swbuf_r+0x84>
 800b13c:	6923      	ldr	r3, [r4, #16]
 800b13e:	b36b      	cbz	r3, 800b19c <__swbuf_r+0x84>
 800b140:	6923      	ldr	r3, [r4, #16]
 800b142:	6820      	ldr	r0, [r4, #0]
 800b144:	1ac0      	subs	r0, r0, r3
 800b146:	6963      	ldr	r3, [r4, #20]
 800b148:	b2f6      	uxtb	r6, r6
 800b14a:	4283      	cmp	r3, r0
 800b14c:	4637      	mov	r7, r6
 800b14e:	dc04      	bgt.n	800b15a <__swbuf_r+0x42>
 800b150:	4621      	mov	r1, r4
 800b152:	4628      	mov	r0, r5
 800b154:	f000 f93c 	bl	800b3d0 <_fflush_r>
 800b158:	bb30      	cbnz	r0, 800b1a8 <__swbuf_r+0x90>
 800b15a:	68a3      	ldr	r3, [r4, #8]
 800b15c:	3b01      	subs	r3, #1
 800b15e:	60a3      	str	r3, [r4, #8]
 800b160:	6823      	ldr	r3, [r4, #0]
 800b162:	1c5a      	adds	r2, r3, #1
 800b164:	6022      	str	r2, [r4, #0]
 800b166:	701e      	strb	r6, [r3, #0]
 800b168:	6963      	ldr	r3, [r4, #20]
 800b16a:	3001      	adds	r0, #1
 800b16c:	4283      	cmp	r3, r0
 800b16e:	d004      	beq.n	800b17a <__swbuf_r+0x62>
 800b170:	89a3      	ldrh	r3, [r4, #12]
 800b172:	07db      	lsls	r3, r3, #31
 800b174:	d506      	bpl.n	800b184 <__swbuf_r+0x6c>
 800b176:	2e0a      	cmp	r6, #10
 800b178:	d104      	bne.n	800b184 <__swbuf_r+0x6c>
 800b17a:	4621      	mov	r1, r4
 800b17c:	4628      	mov	r0, r5
 800b17e:	f000 f927 	bl	800b3d0 <_fflush_r>
 800b182:	b988      	cbnz	r0, 800b1a8 <__swbuf_r+0x90>
 800b184:	4638      	mov	r0, r7
 800b186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b188:	4b0a      	ldr	r3, [pc, #40]	; (800b1b4 <__swbuf_r+0x9c>)
 800b18a:	429c      	cmp	r4, r3
 800b18c:	d101      	bne.n	800b192 <__swbuf_r+0x7a>
 800b18e:	68ac      	ldr	r4, [r5, #8]
 800b190:	e7cf      	b.n	800b132 <__swbuf_r+0x1a>
 800b192:	4b09      	ldr	r3, [pc, #36]	; (800b1b8 <__swbuf_r+0xa0>)
 800b194:	429c      	cmp	r4, r3
 800b196:	bf08      	it	eq
 800b198:	68ec      	ldreq	r4, [r5, #12]
 800b19a:	e7ca      	b.n	800b132 <__swbuf_r+0x1a>
 800b19c:	4621      	mov	r1, r4
 800b19e:	4628      	mov	r0, r5
 800b1a0:	f000 f81a 	bl	800b1d8 <__swsetup_r>
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	d0cb      	beq.n	800b140 <__swbuf_r+0x28>
 800b1a8:	f04f 37ff 	mov.w	r7, #4294967295
 800b1ac:	e7ea      	b.n	800b184 <__swbuf_r+0x6c>
 800b1ae:	bf00      	nop
 800b1b0:	0800bee4 	.word	0x0800bee4
 800b1b4:	0800bf04 	.word	0x0800bf04
 800b1b8:	0800bec4 	.word	0x0800bec4

0800b1bc <__ascii_wctomb>:
 800b1bc:	b149      	cbz	r1, 800b1d2 <__ascii_wctomb+0x16>
 800b1be:	2aff      	cmp	r2, #255	; 0xff
 800b1c0:	bf85      	ittet	hi
 800b1c2:	238a      	movhi	r3, #138	; 0x8a
 800b1c4:	6003      	strhi	r3, [r0, #0]
 800b1c6:	700a      	strbls	r2, [r1, #0]
 800b1c8:	f04f 30ff 	movhi.w	r0, #4294967295
 800b1cc:	bf98      	it	ls
 800b1ce:	2001      	movls	r0, #1
 800b1d0:	4770      	bx	lr
 800b1d2:	4608      	mov	r0, r1
 800b1d4:	4770      	bx	lr
	...

0800b1d8 <__swsetup_r>:
 800b1d8:	4b32      	ldr	r3, [pc, #200]	; (800b2a4 <__swsetup_r+0xcc>)
 800b1da:	b570      	push	{r4, r5, r6, lr}
 800b1dc:	681d      	ldr	r5, [r3, #0]
 800b1de:	4606      	mov	r6, r0
 800b1e0:	460c      	mov	r4, r1
 800b1e2:	b125      	cbz	r5, 800b1ee <__swsetup_r+0x16>
 800b1e4:	69ab      	ldr	r3, [r5, #24]
 800b1e6:	b913      	cbnz	r3, 800b1ee <__swsetup_r+0x16>
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	f000 f985 	bl	800b4f8 <__sinit>
 800b1ee:	4b2e      	ldr	r3, [pc, #184]	; (800b2a8 <__swsetup_r+0xd0>)
 800b1f0:	429c      	cmp	r4, r3
 800b1f2:	d10f      	bne.n	800b214 <__swsetup_r+0x3c>
 800b1f4:	686c      	ldr	r4, [r5, #4]
 800b1f6:	89a3      	ldrh	r3, [r4, #12]
 800b1f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1fc:	0719      	lsls	r1, r3, #28
 800b1fe:	d42c      	bmi.n	800b25a <__swsetup_r+0x82>
 800b200:	06dd      	lsls	r5, r3, #27
 800b202:	d411      	bmi.n	800b228 <__swsetup_r+0x50>
 800b204:	2309      	movs	r3, #9
 800b206:	6033      	str	r3, [r6, #0]
 800b208:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b20c:	81a3      	strh	r3, [r4, #12]
 800b20e:	f04f 30ff 	mov.w	r0, #4294967295
 800b212:	e03e      	b.n	800b292 <__swsetup_r+0xba>
 800b214:	4b25      	ldr	r3, [pc, #148]	; (800b2ac <__swsetup_r+0xd4>)
 800b216:	429c      	cmp	r4, r3
 800b218:	d101      	bne.n	800b21e <__swsetup_r+0x46>
 800b21a:	68ac      	ldr	r4, [r5, #8]
 800b21c:	e7eb      	b.n	800b1f6 <__swsetup_r+0x1e>
 800b21e:	4b24      	ldr	r3, [pc, #144]	; (800b2b0 <__swsetup_r+0xd8>)
 800b220:	429c      	cmp	r4, r3
 800b222:	bf08      	it	eq
 800b224:	68ec      	ldreq	r4, [r5, #12]
 800b226:	e7e6      	b.n	800b1f6 <__swsetup_r+0x1e>
 800b228:	0758      	lsls	r0, r3, #29
 800b22a:	d512      	bpl.n	800b252 <__swsetup_r+0x7a>
 800b22c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b22e:	b141      	cbz	r1, 800b242 <__swsetup_r+0x6a>
 800b230:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b234:	4299      	cmp	r1, r3
 800b236:	d002      	beq.n	800b23e <__swsetup_r+0x66>
 800b238:	4630      	mov	r0, r6
 800b23a:	f7ff fb6f 	bl	800a91c <_free_r>
 800b23e:	2300      	movs	r3, #0
 800b240:	6363      	str	r3, [r4, #52]	; 0x34
 800b242:	89a3      	ldrh	r3, [r4, #12]
 800b244:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b248:	81a3      	strh	r3, [r4, #12]
 800b24a:	2300      	movs	r3, #0
 800b24c:	6063      	str	r3, [r4, #4]
 800b24e:	6923      	ldr	r3, [r4, #16]
 800b250:	6023      	str	r3, [r4, #0]
 800b252:	89a3      	ldrh	r3, [r4, #12]
 800b254:	f043 0308 	orr.w	r3, r3, #8
 800b258:	81a3      	strh	r3, [r4, #12]
 800b25a:	6923      	ldr	r3, [r4, #16]
 800b25c:	b94b      	cbnz	r3, 800b272 <__swsetup_r+0x9a>
 800b25e:	89a3      	ldrh	r3, [r4, #12]
 800b260:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b268:	d003      	beq.n	800b272 <__swsetup_r+0x9a>
 800b26a:	4621      	mov	r1, r4
 800b26c:	4630      	mov	r0, r6
 800b26e:	f000 fa07 	bl	800b680 <__smakebuf_r>
 800b272:	89a0      	ldrh	r0, [r4, #12]
 800b274:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b278:	f010 0301 	ands.w	r3, r0, #1
 800b27c:	d00a      	beq.n	800b294 <__swsetup_r+0xbc>
 800b27e:	2300      	movs	r3, #0
 800b280:	60a3      	str	r3, [r4, #8]
 800b282:	6963      	ldr	r3, [r4, #20]
 800b284:	425b      	negs	r3, r3
 800b286:	61a3      	str	r3, [r4, #24]
 800b288:	6923      	ldr	r3, [r4, #16]
 800b28a:	b943      	cbnz	r3, 800b29e <__swsetup_r+0xc6>
 800b28c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b290:	d1ba      	bne.n	800b208 <__swsetup_r+0x30>
 800b292:	bd70      	pop	{r4, r5, r6, pc}
 800b294:	0781      	lsls	r1, r0, #30
 800b296:	bf58      	it	pl
 800b298:	6963      	ldrpl	r3, [r4, #20]
 800b29a:	60a3      	str	r3, [r4, #8]
 800b29c:	e7f4      	b.n	800b288 <__swsetup_r+0xb0>
 800b29e:	2000      	movs	r0, #0
 800b2a0:	e7f7      	b.n	800b292 <__swsetup_r+0xba>
 800b2a2:	bf00      	nop
 800b2a4:	20000030 	.word	0x20000030
 800b2a8:	0800bee4 	.word	0x0800bee4
 800b2ac:	0800bf04 	.word	0x0800bf04
 800b2b0:	0800bec4 	.word	0x0800bec4

0800b2b4 <abort>:
 800b2b4:	b508      	push	{r3, lr}
 800b2b6:	2006      	movs	r0, #6
 800b2b8:	f000 fa52 	bl	800b760 <raise>
 800b2bc:	2001      	movs	r0, #1
 800b2be:	f7f6 f828 	bl	8001312 <_exit>
	...

0800b2c4 <__sflush_r>:
 800b2c4:	898a      	ldrh	r2, [r1, #12]
 800b2c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ca:	4605      	mov	r5, r0
 800b2cc:	0710      	lsls	r0, r2, #28
 800b2ce:	460c      	mov	r4, r1
 800b2d0:	d458      	bmi.n	800b384 <__sflush_r+0xc0>
 800b2d2:	684b      	ldr	r3, [r1, #4]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	dc05      	bgt.n	800b2e4 <__sflush_r+0x20>
 800b2d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	dc02      	bgt.n	800b2e4 <__sflush_r+0x20>
 800b2de:	2000      	movs	r0, #0
 800b2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2e6:	2e00      	cmp	r6, #0
 800b2e8:	d0f9      	beq.n	800b2de <__sflush_r+0x1a>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b2f0:	682f      	ldr	r7, [r5, #0]
 800b2f2:	602b      	str	r3, [r5, #0]
 800b2f4:	d032      	beq.n	800b35c <__sflush_r+0x98>
 800b2f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b2f8:	89a3      	ldrh	r3, [r4, #12]
 800b2fa:	075a      	lsls	r2, r3, #29
 800b2fc:	d505      	bpl.n	800b30a <__sflush_r+0x46>
 800b2fe:	6863      	ldr	r3, [r4, #4]
 800b300:	1ac0      	subs	r0, r0, r3
 800b302:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b304:	b10b      	cbz	r3, 800b30a <__sflush_r+0x46>
 800b306:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b308:	1ac0      	subs	r0, r0, r3
 800b30a:	2300      	movs	r3, #0
 800b30c:	4602      	mov	r2, r0
 800b30e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b310:	6a21      	ldr	r1, [r4, #32]
 800b312:	4628      	mov	r0, r5
 800b314:	47b0      	blx	r6
 800b316:	1c43      	adds	r3, r0, #1
 800b318:	89a3      	ldrh	r3, [r4, #12]
 800b31a:	d106      	bne.n	800b32a <__sflush_r+0x66>
 800b31c:	6829      	ldr	r1, [r5, #0]
 800b31e:	291d      	cmp	r1, #29
 800b320:	d82c      	bhi.n	800b37c <__sflush_r+0xb8>
 800b322:	4a2a      	ldr	r2, [pc, #168]	; (800b3cc <__sflush_r+0x108>)
 800b324:	40ca      	lsrs	r2, r1
 800b326:	07d6      	lsls	r6, r2, #31
 800b328:	d528      	bpl.n	800b37c <__sflush_r+0xb8>
 800b32a:	2200      	movs	r2, #0
 800b32c:	6062      	str	r2, [r4, #4]
 800b32e:	04d9      	lsls	r1, r3, #19
 800b330:	6922      	ldr	r2, [r4, #16]
 800b332:	6022      	str	r2, [r4, #0]
 800b334:	d504      	bpl.n	800b340 <__sflush_r+0x7c>
 800b336:	1c42      	adds	r2, r0, #1
 800b338:	d101      	bne.n	800b33e <__sflush_r+0x7a>
 800b33a:	682b      	ldr	r3, [r5, #0]
 800b33c:	b903      	cbnz	r3, 800b340 <__sflush_r+0x7c>
 800b33e:	6560      	str	r0, [r4, #84]	; 0x54
 800b340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b342:	602f      	str	r7, [r5, #0]
 800b344:	2900      	cmp	r1, #0
 800b346:	d0ca      	beq.n	800b2de <__sflush_r+0x1a>
 800b348:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b34c:	4299      	cmp	r1, r3
 800b34e:	d002      	beq.n	800b356 <__sflush_r+0x92>
 800b350:	4628      	mov	r0, r5
 800b352:	f7ff fae3 	bl	800a91c <_free_r>
 800b356:	2000      	movs	r0, #0
 800b358:	6360      	str	r0, [r4, #52]	; 0x34
 800b35a:	e7c1      	b.n	800b2e0 <__sflush_r+0x1c>
 800b35c:	6a21      	ldr	r1, [r4, #32]
 800b35e:	2301      	movs	r3, #1
 800b360:	4628      	mov	r0, r5
 800b362:	47b0      	blx	r6
 800b364:	1c41      	adds	r1, r0, #1
 800b366:	d1c7      	bne.n	800b2f8 <__sflush_r+0x34>
 800b368:	682b      	ldr	r3, [r5, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d0c4      	beq.n	800b2f8 <__sflush_r+0x34>
 800b36e:	2b1d      	cmp	r3, #29
 800b370:	d001      	beq.n	800b376 <__sflush_r+0xb2>
 800b372:	2b16      	cmp	r3, #22
 800b374:	d101      	bne.n	800b37a <__sflush_r+0xb6>
 800b376:	602f      	str	r7, [r5, #0]
 800b378:	e7b1      	b.n	800b2de <__sflush_r+0x1a>
 800b37a:	89a3      	ldrh	r3, [r4, #12]
 800b37c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b380:	81a3      	strh	r3, [r4, #12]
 800b382:	e7ad      	b.n	800b2e0 <__sflush_r+0x1c>
 800b384:	690f      	ldr	r7, [r1, #16]
 800b386:	2f00      	cmp	r7, #0
 800b388:	d0a9      	beq.n	800b2de <__sflush_r+0x1a>
 800b38a:	0793      	lsls	r3, r2, #30
 800b38c:	680e      	ldr	r6, [r1, #0]
 800b38e:	bf08      	it	eq
 800b390:	694b      	ldreq	r3, [r1, #20]
 800b392:	600f      	str	r7, [r1, #0]
 800b394:	bf18      	it	ne
 800b396:	2300      	movne	r3, #0
 800b398:	eba6 0807 	sub.w	r8, r6, r7
 800b39c:	608b      	str	r3, [r1, #8]
 800b39e:	f1b8 0f00 	cmp.w	r8, #0
 800b3a2:	dd9c      	ble.n	800b2de <__sflush_r+0x1a>
 800b3a4:	6a21      	ldr	r1, [r4, #32]
 800b3a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b3a8:	4643      	mov	r3, r8
 800b3aa:	463a      	mov	r2, r7
 800b3ac:	4628      	mov	r0, r5
 800b3ae:	47b0      	blx	r6
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	dc06      	bgt.n	800b3c2 <__sflush_r+0xfe>
 800b3b4:	89a3      	ldrh	r3, [r4, #12]
 800b3b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3ba:	81a3      	strh	r3, [r4, #12]
 800b3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c0:	e78e      	b.n	800b2e0 <__sflush_r+0x1c>
 800b3c2:	4407      	add	r7, r0
 800b3c4:	eba8 0800 	sub.w	r8, r8, r0
 800b3c8:	e7e9      	b.n	800b39e <__sflush_r+0xda>
 800b3ca:	bf00      	nop
 800b3cc:	20400001 	.word	0x20400001

0800b3d0 <_fflush_r>:
 800b3d0:	b538      	push	{r3, r4, r5, lr}
 800b3d2:	690b      	ldr	r3, [r1, #16]
 800b3d4:	4605      	mov	r5, r0
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	b913      	cbnz	r3, 800b3e0 <_fflush_r+0x10>
 800b3da:	2500      	movs	r5, #0
 800b3dc:	4628      	mov	r0, r5
 800b3de:	bd38      	pop	{r3, r4, r5, pc}
 800b3e0:	b118      	cbz	r0, 800b3ea <_fflush_r+0x1a>
 800b3e2:	6983      	ldr	r3, [r0, #24]
 800b3e4:	b90b      	cbnz	r3, 800b3ea <_fflush_r+0x1a>
 800b3e6:	f000 f887 	bl	800b4f8 <__sinit>
 800b3ea:	4b14      	ldr	r3, [pc, #80]	; (800b43c <_fflush_r+0x6c>)
 800b3ec:	429c      	cmp	r4, r3
 800b3ee:	d11b      	bne.n	800b428 <_fflush_r+0x58>
 800b3f0:	686c      	ldr	r4, [r5, #4]
 800b3f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d0ef      	beq.n	800b3da <_fflush_r+0xa>
 800b3fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b3fc:	07d0      	lsls	r0, r2, #31
 800b3fe:	d404      	bmi.n	800b40a <_fflush_r+0x3a>
 800b400:	0599      	lsls	r1, r3, #22
 800b402:	d402      	bmi.n	800b40a <_fflush_r+0x3a>
 800b404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b406:	f000 f915 	bl	800b634 <__retarget_lock_acquire_recursive>
 800b40a:	4628      	mov	r0, r5
 800b40c:	4621      	mov	r1, r4
 800b40e:	f7ff ff59 	bl	800b2c4 <__sflush_r>
 800b412:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b414:	07da      	lsls	r2, r3, #31
 800b416:	4605      	mov	r5, r0
 800b418:	d4e0      	bmi.n	800b3dc <_fflush_r+0xc>
 800b41a:	89a3      	ldrh	r3, [r4, #12]
 800b41c:	059b      	lsls	r3, r3, #22
 800b41e:	d4dd      	bmi.n	800b3dc <_fflush_r+0xc>
 800b420:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b422:	f000 f908 	bl	800b636 <__retarget_lock_release_recursive>
 800b426:	e7d9      	b.n	800b3dc <_fflush_r+0xc>
 800b428:	4b05      	ldr	r3, [pc, #20]	; (800b440 <_fflush_r+0x70>)
 800b42a:	429c      	cmp	r4, r3
 800b42c:	d101      	bne.n	800b432 <_fflush_r+0x62>
 800b42e:	68ac      	ldr	r4, [r5, #8]
 800b430:	e7df      	b.n	800b3f2 <_fflush_r+0x22>
 800b432:	4b04      	ldr	r3, [pc, #16]	; (800b444 <_fflush_r+0x74>)
 800b434:	429c      	cmp	r4, r3
 800b436:	bf08      	it	eq
 800b438:	68ec      	ldreq	r4, [r5, #12]
 800b43a:	e7da      	b.n	800b3f2 <_fflush_r+0x22>
 800b43c:	0800bee4 	.word	0x0800bee4
 800b440:	0800bf04 	.word	0x0800bf04
 800b444:	0800bec4 	.word	0x0800bec4

0800b448 <std>:
 800b448:	2300      	movs	r3, #0
 800b44a:	b510      	push	{r4, lr}
 800b44c:	4604      	mov	r4, r0
 800b44e:	e9c0 3300 	strd	r3, r3, [r0]
 800b452:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b456:	6083      	str	r3, [r0, #8]
 800b458:	8181      	strh	r1, [r0, #12]
 800b45a:	6643      	str	r3, [r0, #100]	; 0x64
 800b45c:	81c2      	strh	r2, [r0, #14]
 800b45e:	6183      	str	r3, [r0, #24]
 800b460:	4619      	mov	r1, r3
 800b462:	2208      	movs	r2, #8
 800b464:	305c      	adds	r0, #92	; 0x5c
 800b466:	f7fd fba1 	bl	8008bac <memset>
 800b46a:	4b05      	ldr	r3, [pc, #20]	; (800b480 <std+0x38>)
 800b46c:	6263      	str	r3, [r4, #36]	; 0x24
 800b46e:	4b05      	ldr	r3, [pc, #20]	; (800b484 <std+0x3c>)
 800b470:	62a3      	str	r3, [r4, #40]	; 0x28
 800b472:	4b05      	ldr	r3, [pc, #20]	; (800b488 <std+0x40>)
 800b474:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b476:	4b05      	ldr	r3, [pc, #20]	; (800b48c <std+0x44>)
 800b478:	6224      	str	r4, [r4, #32]
 800b47a:	6323      	str	r3, [r4, #48]	; 0x30
 800b47c:	bd10      	pop	{r4, pc}
 800b47e:	bf00      	nop
 800b480:	0800b799 	.word	0x0800b799
 800b484:	0800b7bb 	.word	0x0800b7bb
 800b488:	0800b7f3 	.word	0x0800b7f3
 800b48c:	0800b817 	.word	0x0800b817

0800b490 <_cleanup_r>:
 800b490:	4901      	ldr	r1, [pc, #4]	; (800b498 <_cleanup_r+0x8>)
 800b492:	f000 b8af 	b.w	800b5f4 <_fwalk_reent>
 800b496:	bf00      	nop
 800b498:	0800b3d1 	.word	0x0800b3d1

0800b49c <__sfmoreglue>:
 800b49c:	b570      	push	{r4, r5, r6, lr}
 800b49e:	1e4a      	subs	r2, r1, #1
 800b4a0:	2568      	movs	r5, #104	; 0x68
 800b4a2:	4355      	muls	r5, r2
 800b4a4:	460e      	mov	r6, r1
 800b4a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b4aa:	f7ff fa87 	bl	800a9bc <_malloc_r>
 800b4ae:	4604      	mov	r4, r0
 800b4b0:	b140      	cbz	r0, 800b4c4 <__sfmoreglue+0x28>
 800b4b2:	2100      	movs	r1, #0
 800b4b4:	e9c0 1600 	strd	r1, r6, [r0]
 800b4b8:	300c      	adds	r0, #12
 800b4ba:	60a0      	str	r0, [r4, #8]
 800b4bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b4c0:	f7fd fb74 	bl	8008bac <memset>
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	bd70      	pop	{r4, r5, r6, pc}

0800b4c8 <__sfp_lock_acquire>:
 800b4c8:	4801      	ldr	r0, [pc, #4]	; (800b4d0 <__sfp_lock_acquire+0x8>)
 800b4ca:	f000 b8b3 	b.w	800b634 <__retarget_lock_acquire_recursive>
 800b4ce:	bf00      	nop
 800b4d0:	200027fc 	.word	0x200027fc

0800b4d4 <__sfp_lock_release>:
 800b4d4:	4801      	ldr	r0, [pc, #4]	; (800b4dc <__sfp_lock_release+0x8>)
 800b4d6:	f000 b8ae 	b.w	800b636 <__retarget_lock_release_recursive>
 800b4da:	bf00      	nop
 800b4dc:	200027fc 	.word	0x200027fc

0800b4e0 <__sinit_lock_acquire>:
 800b4e0:	4801      	ldr	r0, [pc, #4]	; (800b4e8 <__sinit_lock_acquire+0x8>)
 800b4e2:	f000 b8a7 	b.w	800b634 <__retarget_lock_acquire_recursive>
 800b4e6:	bf00      	nop
 800b4e8:	200027f7 	.word	0x200027f7

0800b4ec <__sinit_lock_release>:
 800b4ec:	4801      	ldr	r0, [pc, #4]	; (800b4f4 <__sinit_lock_release+0x8>)
 800b4ee:	f000 b8a2 	b.w	800b636 <__retarget_lock_release_recursive>
 800b4f2:	bf00      	nop
 800b4f4:	200027f7 	.word	0x200027f7

0800b4f8 <__sinit>:
 800b4f8:	b510      	push	{r4, lr}
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	f7ff fff0 	bl	800b4e0 <__sinit_lock_acquire>
 800b500:	69a3      	ldr	r3, [r4, #24]
 800b502:	b11b      	cbz	r3, 800b50c <__sinit+0x14>
 800b504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b508:	f7ff bff0 	b.w	800b4ec <__sinit_lock_release>
 800b50c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b510:	6523      	str	r3, [r4, #80]	; 0x50
 800b512:	4b13      	ldr	r3, [pc, #76]	; (800b560 <__sinit+0x68>)
 800b514:	4a13      	ldr	r2, [pc, #76]	; (800b564 <__sinit+0x6c>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	62a2      	str	r2, [r4, #40]	; 0x28
 800b51a:	42a3      	cmp	r3, r4
 800b51c:	bf04      	itt	eq
 800b51e:	2301      	moveq	r3, #1
 800b520:	61a3      	streq	r3, [r4, #24]
 800b522:	4620      	mov	r0, r4
 800b524:	f000 f820 	bl	800b568 <__sfp>
 800b528:	6060      	str	r0, [r4, #4]
 800b52a:	4620      	mov	r0, r4
 800b52c:	f000 f81c 	bl	800b568 <__sfp>
 800b530:	60a0      	str	r0, [r4, #8]
 800b532:	4620      	mov	r0, r4
 800b534:	f000 f818 	bl	800b568 <__sfp>
 800b538:	2200      	movs	r2, #0
 800b53a:	60e0      	str	r0, [r4, #12]
 800b53c:	2104      	movs	r1, #4
 800b53e:	6860      	ldr	r0, [r4, #4]
 800b540:	f7ff ff82 	bl	800b448 <std>
 800b544:	68a0      	ldr	r0, [r4, #8]
 800b546:	2201      	movs	r2, #1
 800b548:	2109      	movs	r1, #9
 800b54a:	f7ff ff7d 	bl	800b448 <std>
 800b54e:	68e0      	ldr	r0, [r4, #12]
 800b550:	2202      	movs	r2, #2
 800b552:	2112      	movs	r1, #18
 800b554:	f7ff ff78 	bl	800b448 <std>
 800b558:	2301      	movs	r3, #1
 800b55a:	61a3      	str	r3, [r4, #24]
 800b55c:	e7d2      	b.n	800b504 <__sinit+0xc>
 800b55e:	bf00      	nop
 800b560:	0800bb44 	.word	0x0800bb44
 800b564:	0800b491 	.word	0x0800b491

0800b568 <__sfp>:
 800b568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b56a:	4607      	mov	r7, r0
 800b56c:	f7ff ffac 	bl	800b4c8 <__sfp_lock_acquire>
 800b570:	4b1e      	ldr	r3, [pc, #120]	; (800b5ec <__sfp+0x84>)
 800b572:	681e      	ldr	r6, [r3, #0]
 800b574:	69b3      	ldr	r3, [r6, #24]
 800b576:	b913      	cbnz	r3, 800b57e <__sfp+0x16>
 800b578:	4630      	mov	r0, r6
 800b57a:	f7ff ffbd 	bl	800b4f8 <__sinit>
 800b57e:	3648      	adds	r6, #72	; 0x48
 800b580:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b584:	3b01      	subs	r3, #1
 800b586:	d503      	bpl.n	800b590 <__sfp+0x28>
 800b588:	6833      	ldr	r3, [r6, #0]
 800b58a:	b30b      	cbz	r3, 800b5d0 <__sfp+0x68>
 800b58c:	6836      	ldr	r6, [r6, #0]
 800b58e:	e7f7      	b.n	800b580 <__sfp+0x18>
 800b590:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b594:	b9d5      	cbnz	r5, 800b5cc <__sfp+0x64>
 800b596:	4b16      	ldr	r3, [pc, #88]	; (800b5f0 <__sfp+0x88>)
 800b598:	60e3      	str	r3, [r4, #12]
 800b59a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b59e:	6665      	str	r5, [r4, #100]	; 0x64
 800b5a0:	f000 f847 	bl	800b632 <__retarget_lock_init_recursive>
 800b5a4:	f7ff ff96 	bl	800b4d4 <__sfp_lock_release>
 800b5a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b5ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b5b0:	6025      	str	r5, [r4, #0]
 800b5b2:	61a5      	str	r5, [r4, #24]
 800b5b4:	2208      	movs	r2, #8
 800b5b6:	4629      	mov	r1, r5
 800b5b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b5bc:	f7fd faf6 	bl	8008bac <memset>
 800b5c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b5c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5cc:	3468      	adds	r4, #104	; 0x68
 800b5ce:	e7d9      	b.n	800b584 <__sfp+0x1c>
 800b5d0:	2104      	movs	r1, #4
 800b5d2:	4638      	mov	r0, r7
 800b5d4:	f7ff ff62 	bl	800b49c <__sfmoreglue>
 800b5d8:	4604      	mov	r4, r0
 800b5da:	6030      	str	r0, [r6, #0]
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	d1d5      	bne.n	800b58c <__sfp+0x24>
 800b5e0:	f7ff ff78 	bl	800b4d4 <__sfp_lock_release>
 800b5e4:	230c      	movs	r3, #12
 800b5e6:	603b      	str	r3, [r7, #0]
 800b5e8:	e7ee      	b.n	800b5c8 <__sfp+0x60>
 800b5ea:	bf00      	nop
 800b5ec:	0800bb44 	.word	0x0800bb44
 800b5f0:	ffff0001 	.word	0xffff0001

0800b5f4 <_fwalk_reent>:
 800b5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5f8:	4606      	mov	r6, r0
 800b5fa:	4688      	mov	r8, r1
 800b5fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b600:	2700      	movs	r7, #0
 800b602:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b606:	f1b9 0901 	subs.w	r9, r9, #1
 800b60a:	d505      	bpl.n	800b618 <_fwalk_reent+0x24>
 800b60c:	6824      	ldr	r4, [r4, #0]
 800b60e:	2c00      	cmp	r4, #0
 800b610:	d1f7      	bne.n	800b602 <_fwalk_reent+0xe>
 800b612:	4638      	mov	r0, r7
 800b614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b618:	89ab      	ldrh	r3, [r5, #12]
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d907      	bls.n	800b62e <_fwalk_reent+0x3a>
 800b61e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b622:	3301      	adds	r3, #1
 800b624:	d003      	beq.n	800b62e <_fwalk_reent+0x3a>
 800b626:	4629      	mov	r1, r5
 800b628:	4630      	mov	r0, r6
 800b62a:	47c0      	blx	r8
 800b62c:	4307      	orrs	r7, r0
 800b62e:	3568      	adds	r5, #104	; 0x68
 800b630:	e7e9      	b.n	800b606 <_fwalk_reent+0x12>

0800b632 <__retarget_lock_init_recursive>:
 800b632:	4770      	bx	lr

0800b634 <__retarget_lock_acquire_recursive>:
 800b634:	4770      	bx	lr

0800b636 <__retarget_lock_release_recursive>:
 800b636:	4770      	bx	lr

0800b638 <__swhatbuf_r>:
 800b638:	b570      	push	{r4, r5, r6, lr}
 800b63a:	460e      	mov	r6, r1
 800b63c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b640:	2900      	cmp	r1, #0
 800b642:	b096      	sub	sp, #88	; 0x58
 800b644:	4614      	mov	r4, r2
 800b646:	461d      	mov	r5, r3
 800b648:	da07      	bge.n	800b65a <__swhatbuf_r+0x22>
 800b64a:	2300      	movs	r3, #0
 800b64c:	602b      	str	r3, [r5, #0]
 800b64e:	89b3      	ldrh	r3, [r6, #12]
 800b650:	061a      	lsls	r2, r3, #24
 800b652:	d410      	bmi.n	800b676 <__swhatbuf_r+0x3e>
 800b654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b658:	e00e      	b.n	800b678 <__swhatbuf_r+0x40>
 800b65a:	466a      	mov	r2, sp
 800b65c:	f000 f902 	bl	800b864 <_fstat_r>
 800b660:	2800      	cmp	r0, #0
 800b662:	dbf2      	blt.n	800b64a <__swhatbuf_r+0x12>
 800b664:	9a01      	ldr	r2, [sp, #4]
 800b666:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b66a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b66e:	425a      	negs	r2, r3
 800b670:	415a      	adcs	r2, r3
 800b672:	602a      	str	r2, [r5, #0]
 800b674:	e7ee      	b.n	800b654 <__swhatbuf_r+0x1c>
 800b676:	2340      	movs	r3, #64	; 0x40
 800b678:	2000      	movs	r0, #0
 800b67a:	6023      	str	r3, [r4, #0]
 800b67c:	b016      	add	sp, #88	; 0x58
 800b67e:	bd70      	pop	{r4, r5, r6, pc}

0800b680 <__smakebuf_r>:
 800b680:	898b      	ldrh	r3, [r1, #12]
 800b682:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b684:	079d      	lsls	r5, r3, #30
 800b686:	4606      	mov	r6, r0
 800b688:	460c      	mov	r4, r1
 800b68a:	d507      	bpl.n	800b69c <__smakebuf_r+0x1c>
 800b68c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b690:	6023      	str	r3, [r4, #0]
 800b692:	6123      	str	r3, [r4, #16]
 800b694:	2301      	movs	r3, #1
 800b696:	6163      	str	r3, [r4, #20]
 800b698:	b002      	add	sp, #8
 800b69a:	bd70      	pop	{r4, r5, r6, pc}
 800b69c:	ab01      	add	r3, sp, #4
 800b69e:	466a      	mov	r2, sp
 800b6a0:	f7ff ffca 	bl	800b638 <__swhatbuf_r>
 800b6a4:	9900      	ldr	r1, [sp, #0]
 800b6a6:	4605      	mov	r5, r0
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	f7ff f987 	bl	800a9bc <_malloc_r>
 800b6ae:	b948      	cbnz	r0, 800b6c4 <__smakebuf_r+0x44>
 800b6b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6b4:	059a      	lsls	r2, r3, #22
 800b6b6:	d4ef      	bmi.n	800b698 <__smakebuf_r+0x18>
 800b6b8:	f023 0303 	bic.w	r3, r3, #3
 800b6bc:	f043 0302 	orr.w	r3, r3, #2
 800b6c0:	81a3      	strh	r3, [r4, #12]
 800b6c2:	e7e3      	b.n	800b68c <__smakebuf_r+0xc>
 800b6c4:	4b0d      	ldr	r3, [pc, #52]	; (800b6fc <__smakebuf_r+0x7c>)
 800b6c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b6c8:	89a3      	ldrh	r3, [r4, #12]
 800b6ca:	6020      	str	r0, [r4, #0]
 800b6cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6d0:	81a3      	strh	r3, [r4, #12]
 800b6d2:	9b00      	ldr	r3, [sp, #0]
 800b6d4:	6163      	str	r3, [r4, #20]
 800b6d6:	9b01      	ldr	r3, [sp, #4]
 800b6d8:	6120      	str	r0, [r4, #16]
 800b6da:	b15b      	cbz	r3, 800b6f4 <__smakebuf_r+0x74>
 800b6dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	f000 f8d1 	bl	800b888 <_isatty_r>
 800b6e6:	b128      	cbz	r0, 800b6f4 <__smakebuf_r+0x74>
 800b6e8:	89a3      	ldrh	r3, [r4, #12]
 800b6ea:	f023 0303 	bic.w	r3, r3, #3
 800b6ee:	f043 0301 	orr.w	r3, r3, #1
 800b6f2:	81a3      	strh	r3, [r4, #12]
 800b6f4:	89a0      	ldrh	r0, [r4, #12]
 800b6f6:	4305      	orrs	r5, r0
 800b6f8:	81a5      	strh	r5, [r4, #12]
 800b6fa:	e7cd      	b.n	800b698 <__smakebuf_r+0x18>
 800b6fc:	0800b491 	.word	0x0800b491

0800b700 <_malloc_usable_size_r>:
 800b700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b704:	1f18      	subs	r0, r3, #4
 800b706:	2b00      	cmp	r3, #0
 800b708:	bfbc      	itt	lt
 800b70a:	580b      	ldrlt	r3, [r1, r0]
 800b70c:	18c0      	addlt	r0, r0, r3
 800b70e:	4770      	bx	lr

0800b710 <_raise_r>:
 800b710:	291f      	cmp	r1, #31
 800b712:	b538      	push	{r3, r4, r5, lr}
 800b714:	4604      	mov	r4, r0
 800b716:	460d      	mov	r5, r1
 800b718:	d904      	bls.n	800b724 <_raise_r+0x14>
 800b71a:	2316      	movs	r3, #22
 800b71c:	6003      	str	r3, [r0, #0]
 800b71e:	f04f 30ff 	mov.w	r0, #4294967295
 800b722:	bd38      	pop	{r3, r4, r5, pc}
 800b724:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b726:	b112      	cbz	r2, 800b72e <_raise_r+0x1e>
 800b728:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b72c:	b94b      	cbnz	r3, 800b742 <_raise_r+0x32>
 800b72e:	4620      	mov	r0, r4
 800b730:	f000 f830 	bl	800b794 <_getpid_r>
 800b734:	462a      	mov	r2, r5
 800b736:	4601      	mov	r1, r0
 800b738:	4620      	mov	r0, r4
 800b73a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b73e:	f000 b817 	b.w	800b770 <_kill_r>
 800b742:	2b01      	cmp	r3, #1
 800b744:	d00a      	beq.n	800b75c <_raise_r+0x4c>
 800b746:	1c59      	adds	r1, r3, #1
 800b748:	d103      	bne.n	800b752 <_raise_r+0x42>
 800b74a:	2316      	movs	r3, #22
 800b74c:	6003      	str	r3, [r0, #0]
 800b74e:	2001      	movs	r0, #1
 800b750:	e7e7      	b.n	800b722 <_raise_r+0x12>
 800b752:	2400      	movs	r4, #0
 800b754:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b758:	4628      	mov	r0, r5
 800b75a:	4798      	blx	r3
 800b75c:	2000      	movs	r0, #0
 800b75e:	e7e0      	b.n	800b722 <_raise_r+0x12>

0800b760 <raise>:
 800b760:	4b02      	ldr	r3, [pc, #8]	; (800b76c <raise+0xc>)
 800b762:	4601      	mov	r1, r0
 800b764:	6818      	ldr	r0, [r3, #0]
 800b766:	f7ff bfd3 	b.w	800b710 <_raise_r>
 800b76a:	bf00      	nop
 800b76c:	20000030 	.word	0x20000030

0800b770 <_kill_r>:
 800b770:	b538      	push	{r3, r4, r5, lr}
 800b772:	4d07      	ldr	r5, [pc, #28]	; (800b790 <_kill_r+0x20>)
 800b774:	2300      	movs	r3, #0
 800b776:	4604      	mov	r4, r0
 800b778:	4608      	mov	r0, r1
 800b77a:	4611      	mov	r1, r2
 800b77c:	602b      	str	r3, [r5, #0]
 800b77e:	f7f5 fdb8 	bl	80012f2 <_kill>
 800b782:	1c43      	adds	r3, r0, #1
 800b784:	d102      	bne.n	800b78c <_kill_r+0x1c>
 800b786:	682b      	ldr	r3, [r5, #0]
 800b788:	b103      	cbz	r3, 800b78c <_kill_r+0x1c>
 800b78a:	6023      	str	r3, [r4, #0]
 800b78c:	bd38      	pop	{r3, r4, r5, pc}
 800b78e:	bf00      	nop
 800b790:	200027f0 	.word	0x200027f0

0800b794 <_getpid_r>:
 800b794:	f7f5 bda5 	b.w	80012e2 <_getpid>

0800b798 <__sread>:
 800b798:	b510      	push	{r4, lr}
 800b79a:	460c      	mov	r4, r1
 800b79c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7a0:	f000 f894 	bl	800b8cc <_read_r>
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	bfab      	itete	ge
 800b7a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b7aa:	89a3      	ldrhlt	r3, [r4, #12]
 800b7ac:	181b      	addge	r3, r3, r0
 800b7ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b7b2:	bfac      	ite	ge
 800b7b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b7b6:	81a3      	strhlt	r3, [r4, #12]
 800b7b8:	bd10      	pop	{r4, pc}

0800b7ba <__swrite>:
 800b7ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7be:	461f      	mov	r7, r3
 800b7c0:	898b      	ldrh	r3, [r1, #12]
 800b7c2:	05db      	lsls	r3, r3, #23
 800b7c4:	4605      	mov	r5, r0
 800b7c6:	460c      	mov	r4, r1
 800b7c8:	4616      	mov	r6, r2
 800b7ca:	d505      	bpl.n	800b7d8 <__swrite+0x1e>
 800b7cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7d0:	2302      	movs	r3, #2
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f000 f868 	bl	800b8a8 <_lseek_r>
 800b7d8:	89a3      	ldrh	r3, [r4, #12]
 800b7da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b7e2:	81a3      	strh	r3, [r4, #12]
 800b7e4:	4632      	mov	r2, r6
 800b7e6:	463b      	mov	r3, r7
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ee:	f000 b817 	b.w	800b820 <_write_r>

0800b7f2 <__sseek>:
 800b7f2:	b510      	push	{r4, lr}
 800b7f4:	460c      	mov	r4, r1
 800b7f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7fa:	f000 f855 	bl	800b8a8 <_lseek_r>
 800b7fe:	1c43      	adds	r3, r0, #1
 800b800:	89a3      	ldrh	r3, [r4, #12]
 800b802:	bf15      	itete	ne
 800b804:	6560      	strne	r0, [r4, #84]	; 0x54
 800b806:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b80a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b80e:	81a3      	strheq	r3, [r4, #12]
 800b810:	bf18      	it	ne
 800b812:	81a3      	strhne	r3, [r4, #12]
 800b814:	bd10      	pop	{r4, pc}

0800b816 <__sclose>:
 800b816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b81a:	f000 b813 	b.w	800b844 <_close_r>
	...

0800b820 <_write_r>:
 800b820:	b538      	push	{r3, r4, r5, lr}
 800b822:	4d07      	ldr	r5, [pc, #28]	; (800b840 <_write_r+0x20>)
 800b824:	4604      	mov	r4, r0
 800b826:	4608      	mov	r0, r1
 800b828:	4611      	mov	r1, r2
 800b82a:	2200      	movs	r2, #0
 800b82c:	602a      	str	r2, [r5, #0]
 800b82e:	461a      	mov	r2, r3
 800b830:	f7f5 fd96 	bl	8001360 <_write>
 800b834:	1c43      	adds	r3, r0, #1
 800b836:	d102      	bne.n	800b83e <_write_r+0x1e>
 800b838:	682b      	ldr	r3, [r5, #0]
 800b83a:	b103      	cbz	r3, 800b83e <_write_r+0x1e>
 800b83c:	6023      	str	r3, [r4, #0]
 800b83e:	bd38      	pop	{r3, r4, r5, pc}
 800b840:	200027f0 	.word	0x200027f0

0800b844 <_close_r>:
 800b844:	b538      	push	{r3, r4, r5, lr}
 800b846:	4d06      	ldr	r5, [pc, #24]	; (800b860 <_close_r+0x1c>)
 800b848:	2300      	movs	r3, #0
 800b84a:	4604      	mov	r4, r0
 800b84c:	4608      	mov	r0, r1
 800b84e:	602b      	str	r3, [r5, #0]
 800b850:	f7f5 fda2 	bl	8001398 <_close>
 800b854:	1c43      	adds	r3, r0, #1
 800b856:	d102      	bne.n	800b85e <_close_r+0x1a>
 800b858:	682b      	ldr	r3, [r5, #0]
 800b85a:	b103      	cbz	r3, 800b85e <_close_r+0x1a>
 800b85c:	6023      	str	r3, [r4, #0]
 800b85e:	bd38      	pop	{r3, r4, r5, pc}
 800b860:	200027f0 	.word	0x200027f0

0800b864 <_fstat_r>:
 800b864:	b538      	push	{r3, r4, r5, lr}
 800b866:	4d07      	ldr	r5, [pc, #28]	; (800b884 <_fstat_r+0x20>)
 800b868:	2300      	movs	r3, #0
 800b86a:	4604      	mov	r4, r0
 800b86c:	4608      	mov	r0, r1
 800b86e:	4611      	mov	r1, r2
 800b870:	602b      	str	r3, [r5, #0]
 800b872:	f7f5 fd9d 	bl	80013b0 <_fstat>
 800b876:	1c43      	adds	r3, r0, #1
 800b878:	d102      	bne.n	800b880 <_fstat_r+0x1c>
 800b87a:	682b      	ldr	r3, [r5, #0]
 800b87c:	b103      	cbz	r3, 800b880 <_fstat_r+0x1c>
 800b87e:	6023      	str	r3, [r4, #0]
 800b880:	bd38      	pop	{r3, r4, r5, pc}
 800b882:	bf00      	nop
 800b884:	200027f0 	.word	0x200027f0

0800b888 <_isatty_r>:
 800b888:	b538      	push	{r3, r4, r5, lr}
 800b88a:	4d06      	ldr	r5, [pc, #24]	; (800b8a4 <_isatty_r+0x1c>)
 800b88c:	2300      	movs	r3, #0
 800b88e:	4604      	mov	r4, r0
 800b890:	4608      	mov	r0, r1
 800b892:	602b      	str	r3, [r5, #0]
 800b894:	f7f5 fd9c 	bl	80013d0 <_isatty>
 800b898:	1c43      	adds	r3, r0, #1
 800b89a:	d102      	bne.n	800b8a2 <_isatty_r+0x1a>
 800b89c:	682b      	ldr	r3, [r5, #0]
 800b89e:	b103      	cbz	r3, 800b8a2 <_isatty_r+0x1a>
 800b8a0:	6023      	str	r3, [r4, #0]
 800b8a2:	bd38      	pop	{r3, r4, r5, pc}
 800b8a4:	200027f0 	.word	0x200027f0

0800b8a8 <_lseek_r>:
 800b8a8:	b538      	push	{r3, r4, r5, lr}
 800b8aa:	4d07      	ldr	r5, [pc, #28]	; (800b8c8 <_lseek_r+0x20>)
 800b8ac:	4604      	mov	r4, r0
 800b8ae:	4608      	mov	r0, r1
 800b8b0:	4611      	mov	r1, r2
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	602a      	str	r2, [r5, #0]
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	f7f5 fd95 	bl	80013e6 <_lseek>
 800b8bc:	1c43      	adds	r3, r0, #1
 800b8be:	d102      	bne.n	800b8c6 <_lseek_r+0x1e>
 800b8c0:	682b      	ldr	r3, [r5, #0]
 800b8c2:	b103      	cbz	r3, 800b8c6 <_lseek_r+0x1e>
 800b8c4:	6023      	str	r3, [r4, #0]
 800b8c6:	bd38      	pop	{r3, r4, r5, pc}
 800b8c8:	200027f0 	.word	0x200027f0

0800b8cc <_read_r>:
 800b8cc:	b538      	push	{r3, r4, r5, lr}
 800b8ce:	4d07      	ldr	r5, [pc, #28]	; (800b8ec <_read_r+0x20>)
 800b8d0:	4604      	mov	r4, r0
 800b8d2:	4608      	mov	r0, r1
 800b8d4:	4611      	mov	r1, r2
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	602a      	str	r2, [r5, #0]
 800b8da:	461a      	mov	r2, r3
 800b8dc:	f7f5 fd23 	bl	8001326 <_read>
 800b8e0:	1c43      	adds	r3, r0, #1
 800b8e2:	d102      	bne.n	800b8ea <_read_r+0x1e>
 800b8e4:	682b      	ldr	r3, [r5, #0]
 800b8e6:	b103      	cbz	r3, 800b8ea <_read_r+0x1e>
 800b8e8:	6023      	str	r3, [r4, #0]
 800b8ea:	bd38      	pop	{r3, r4, r5, pc}
 800b8ec:	200027f0 	.word	0x200027f0

0800b8f0 <_init>:
 800b8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8f2:	bf00      	nop
 800b8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8f6:	bc08      	pop	{r3}
 800b8f8:	469e      	mov	lr, r3
 800b8fa:	4770      	bx	lr

0800b8fc <_fini>:
 800b8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8fe:	bf00      	nop
 800b900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b902:	bc08      	pop	{r3}
 800b904:	469e      	mov	lr, r3
 800b906:	4770      	bx	lr
